# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx

from .core.api_error import ApiError
from .core.jsonable_encoder import jsonable_encoder
from .core.remove_none_from_headers import remove_none_from_headers


class PerhapsApi:
    def __init__(self, *, environment: str, token: str):
        self._environment = environment
        self._token = token

    def completion(self, *, project_id: str, block_id: str, variables: typing.Dict[str, typing.Any]) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "public/v1/completion"),
            json=jsonable_encoder({"project_id": project_id, "block_id": block_id, "variables": variables}),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPerhapsApi:
    def __init__(self, *, environment: str, token: str):
        self._environment = environment
        self._token = token

    async def completion(self, *, project_id: str, block_id: str, variables: typing.Dict[str, typing.Any]) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "public/v1/completion"),
                json=jsonable_encoder({"project_id": project_id, "block_id": block_id, "variables": variables}),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

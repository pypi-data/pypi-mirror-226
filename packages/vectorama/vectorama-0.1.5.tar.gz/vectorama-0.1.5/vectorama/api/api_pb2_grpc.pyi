"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import typing

import grpc
import grpc.aio

import vectorama.api.api_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(
    collections.abc.AsyncIterator[_T],
    collections.abc.Iterator[_T],
    metaclass=abc.ABCMeta,
): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class vectoramaStub:
    def __init__(
        self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]
    ) -> None: ...
    RegisterSchema: grpc.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.RegisterSchemaRequest,
        vectorama.api.api_pb2.RegisterSchemaResponse,
    ]
    InsertVectors: grpc.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.InsertVectorsRequest,
        vectorama.api.api_pb2.InsertVectorsResponse,
    ]
    DeleteVectors: grpc.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.DeleteVectorsRequest,
        vectorama.api.api_pb2.DeleteVectorsResponse,
    ]
    SearchVectors: grpc.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.SearchVectorsRequest,
        vectorama.api.api_pb2.SearchVectorsResponse,
    ]
    GetSchemas: grpc.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.GetSchemasRequest,
        vectorama.api.api_pb2.GetSchemasResponse,
    ]
    DestroyAll: grpc.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.DestroyAllRequest,
        vectorama.api.api_pb2.DestroyAllResponse,
    ]

class vectoramaAsyncStub:
    RegisterSchema: grpc.aio.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.RegisterSchemaRequest,
        vectorama.api.api_pb2.RegisterSchemaResponse,
    ]
    InsertVectors: grpc.aio.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.InsertVectorsRequest,
        vectorama.api.api_pb2.InsertVectorsResponse,
    ]
    DeleteVectors: grpc.aio.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.DeleteVectorsRequest,
        vectorama.api.api_pb2.DeleteVectorsResponse,
    ]
    SearchVectors: grpc.aio.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.SearchVectorsRequest,
        vectorama.api.api_pb2.SearchVectorsResponse,
    ]
    GetSchemas: grpc.aio.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.GetSchemasRequest,
        vectorama.api.api_pb2.GetSchemasResponse,
    ]
    DestroyAll: grpc.aio.UnaryUnaryMultiCallable[
        vectorama.api.api_pb2.DestroyAllRequest,
        vectorama.api.api_pb2.DestroyAllResponse,
    ]

class vectoramaServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def RegisterSchema(
        self,
        request: vectorama.api.api_pb2.RegisterSchemaRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        vectorama.api.api_pb2.RegisterSchemaResponse,
        collections.abc.Awaitable[vectorama.api.api_pb2.RegisterSchemaResponse],
    ]: ...
    @abc.abstractmethod
    def InsertVectors(
        self,
        request: vectorama.api.api_pb2.InsertVectorsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        vectorama.api.api_pb2.InsertVectorsResponse,
        collections.abc.Awaitable[vectorama.api.api_pb2.InsertVectorsResponse],
    ]: ...
    @abc.abstractmethod
    def DeleteVectors(
        self,
        request: vectorama.api.api_pb2.DeleteVectorsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        vectorama.api.api_pb2.DeleteVectorsResponse,
        collections.abc.Awaitable[vectorama.api.api_pb2.DeleteVectorsResponse],
    ]: ...
    @abc.abstractmethod
    def SearchVectors(
        self,
        request: vectorama.api.api_pb2.SearchVectorsRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        vectorama.api.api_pb2.SearchVectorsResponse,
        collections.abc.Awaitable[vectorama.api.api_pb2.SearchVectorsResponse],
    ]: ...
    @abc.abstractmethod
    def GetSchemas(
        self,
        request: vectorama.api.api_pb2.GetSchemasRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        vectorama.api.api_pb2.GetSchemasResponse,
        collections.abc.Awaitable[vectorama.api.api_pb2.GetSchemasResponse],
    ]: ...
    @abc.abstractmethod
    def DestroyAll(
        self,
        request: vectorama.api.api_pb2.DestroyAllRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        vectorama.api.api_pb2.DestroyAllResponse,
        collections.abc.Awaitable[vectorama.api.api_pb2.DestroyAllResponse],
    ]: ...

def add_vectoramaServicer_to_server(
    servicer: vectoramaServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...

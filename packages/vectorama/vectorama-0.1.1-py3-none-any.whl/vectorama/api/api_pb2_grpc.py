# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from vectorama.api import api_pb2 as vectorama_dot_api_dot_api__pb2


class VectoramaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterSchema = channel.unary_unary(
            "/vectorama.vectorama/RegisterSchema",
            request_serializer=vectorama_dot_api_dot_api__pb2.RegisterSchemaRequest.SerializeToString,
            response_deserializer=vectorama_dot_api_dot_api__pb2.RegisterSchemaResponse.FromString,
        )
        self.InsertVectors = channel.unary_unary(
            "/vectorama.vectorama/InsertVectors",
            request_serializer=vectorama_dot_api_dot_api__pb2.InsertVectorsRequest.SerializeToString,
            response_deserializer=vectorama_dot_api_dot_api__pb2.InsertVectorsResponse.FromString,
        )
        self.DeleteVectors = channel.unary_unary(
            "/vectorama.vectorama/DeleteVectors",
            request_serializer=vectorama_dot_api_dot_api__pb2.DeleteVectorsRequest.SerializeToString,
            response_deserializer=vectorama_dot_api_dot_api__pb2.DeleteVectorsResponse.FromString,
        )
        self.SearchVectors = channel.unary_unary(
            "/vectorama.vectorama/SearchVectors",
            request_serializer=vectorama_dot_api_dot_api__pb2.SearchVectorsRequest.SerializeToString,
            response_deserializer=vectorama_dot_api_dot_api__pb2.SearchVectorsResponse.FromString,
        )
        self.GetSchemas = channel.unary_unary(
            "/vectorama.vectorama/GetSchemas",
            request_serializer=vectorama_dot_api_dot_api__pb2.GetSchemasRequest.SerializeToString,
            response_deserializer=vectorama_dot_api_dot_api__pb2.GetSchemasResponse.FromString,
        )
        self.DestroyAll = channel.unary_unary(
            "/vectorama.vectorama/DestroyAll",
            request_serializer=vectorama_dot_api_dot_api__pb2.DestroyAllRequest.SerializeToString,
            response_deserializer=vectorama_dot_api_dot_api__pb2.DestroyAllResponse.FromString,
        )


class vectoramaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterSchema(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def InsertVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SearchVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSchemas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DestroyAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_vectoramaServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RegisterSchema": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterSchema,
            request_deserializer=vectorama_dot_api_dot_api__pb2.RegisterSchemaRequest.FromString,
            response_serializer=vectorama_dot_api_dot_api__pb2.RegisterSchemaResponse.SerializeToString,
        ),
        "InsertVectors": grpc.unary_unary_rpc_method_handler(
            servicer.InsertVectors,
            request_deserializer=vectorama_dot_api_dot_api__pb2.InsertVectorsRequest.FromString,
            response_serializer=vectorama_dot_api_dot_api__pb2.InsertVectorsResponse.SerializeToString,
        ),
        "DeleteVectors": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteVectors,
            request_deserializer=vectorama_dot_api_dot_api__pb2.DeleteVectorsRequest.FromString,
            response_serializer=vectorama_dot_api_dot_api__pb2.DeleteVectorsResponse.SerializeToString,
        ),
        "SearchVectors": grpc.unary_unary_rpc_method_handler(
            servicer.SearchVectors,
            request_deserializer=vectorama_dot_api_dot_api__pb2.SearchVectorsRequest.FromString,
            response_serializer=vectorama_dot_api_dot_api__pb2.SearchVectorsResponse.SerializeToString,
        ),
        "GetSchemas": grpc.unary_unary_rpc_method_handler(
            servicer.GetSchemas,
            request_deserializer=vectorama_dot_api_dot_api__pb2.GetSchemasRequest.FromString,
            response_serializer=vectorama_dot_api_dot_api__pb2.GetSchemasResponse.SerializeToString,
        ),
        "DestroyAll": grpc.unary_unary_rpc_method_handler(
            servicer.DestroyAll,
            request_deserializer=vectorama_dot_api_dot_api__pb2.DestroyAllRequest.FromString,
            response_serializer=vectorama_dot_api_dot_api__pb2.DestroyAllResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "vectorama.vectorama", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class vectorama(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterSchema(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vectorama.vectorama/RegisterSchema",
            vectorama_dot_api_dot_api__pb2.RegisterSchemaRequest.SerializeToString,
            vectorama_dot_api_dot_api__pb2.RegisterSchemaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def InsertVectors(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vectorama.vectorama/InsertVectors",
            vectorama_dot_api_dot_api__pb2.InsertVectorsRequest.SerializeToString,
            vectorama_dot_api_dot_api__pb2.InsertVectorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteVectors(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vectorama.vectorama/DeleteVectors",
            vectorama_dot_api_dot_api__pb2.DeleteVectorsRequest.SerializeToString,
            vectorama_dot_api_dot_api__pb2.DeleteVectorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SearchVectors(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vectorama.vectorama/SearchVectors",
            vectorama_dot_api_dot_api__pb2.SearchVectorsRequest.SerializeToString,
            vectorama_dot_api_dot_api__pb2.SearchVectorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetSchemas(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vectorama.vectorama/GetSchemas",
            vectorama_dot_api_dot_api__pb2.GetSchemasRequest.SerializeToString,
            vectorama_dot_api_dot_api__pb2.GetSchemasResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DestroyAll(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/vectorama.vectorama/DestroyAll",
            vectorama_dot_api_dot_api__pb2.DestroyAllRequest.SerializeToString,
            vectorama_dot_api_dot_api__pb2.DestroyAllResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

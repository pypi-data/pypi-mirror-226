[build-system]
requires = ['flit_core>=3.4,<4']
build-backend = 'flit_core.buildapi'

[project]
name = 'aiida-nwchem'
dynamic = ['description', 'version']
authors = [
    {name = 'The AiiDA team', email = 'developers@aiida.net'}
]
readme = 'README.md'
license = {file = 'LICENSE.txt'}
classifiers = [
    'Development Status :: 4 - Beta',
    'Framework :: AiiDA',
    'License :: OSI Approved :: MIT License',
    'Operating System :: POSIX :: Linux',
    'Operating System :: MacOS :: MacOS X',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Topic :: Scientific/Engineering'
]
keywords = ['aiida', 'workflows', 'nwchem']
requires-python = '>=3.8'
dependencies = [
    'aiida-core[atomic_tools]~=2.0',
    'numpy',
]

[project.urls]
Source = 'https://github.com/aiidateam/aiida-nwchem'

[project.optional-dependencies]
docs = [
    'sphinx',
    'sphinxcontrib-contentui',
    'sphinxcontrib-details-directive',
    'sphinx-rtd-theme',
    'sphinxcontrib-napoleon',
]
pre-commit = [
    'pre-commit~=2.17',
]
tests = [
    'pgtest~=1.3',
    'pytest~=6.2',
    'pytest-regressions~=1.0',
]

[project.entry-points.'aiida.calculations']
'nwchem.nwchem' = 'aiida_nwchem.calculations.nwchem:NwchemCalculation'
'nwchem.base' = 'aiida_nwchem.calculations.nwchem:NwchemBaseCalculation'

[project.entry-points.'aiida.parsers']
'nwchem.nwchem' = 'aiida_nwchem.parsers.nwchem:NwchemBaseParser'

[project.entry-points.'aiida.workflows']
'nwchem.base' = 'aiida_nwchem.workflows.base:NwchemBaseWorkChain'

[tool.flit.module]
name = 'aiida_nwchem'

[tool.flit.sdist]
exclude = [
    '.github/',
    'docs/',
    'tests/',
    '.gitignore',
    '.pre-commit-config.yaml',
]

[tool.flynt]
line-length = 120
fail-on-change = true

[tool.isort]
force_sort_within_sections = true
include_trailing_comma = true
line_length = 120
multi_line_output = 3

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    'cyclic-import',
    'duplicate-code',
    'import-outside-toplevel',
    'inconsistent-return-statements',
    'locally-disabled',
    'logging-fstring-interpolation',
    'no-else-raise',
    'raise-missing-from',
    'too-few-public-methods',
    'too-many-ancestors',
    'too-many-locals',
    'too-many-branches',
    'too-many-statements',
    'too-many-arguments',
    'too-many-instance-attributes',
    'not-context-manager',
]

[tool.pylint.basic]
good-names = [
    'x',
    'y',
    'z',
    'i',
    'j',
    'k',
    'dt',
    'pk',
    'fg',
    'tz',
    'nl',
    'TemplatereplacerCalculation',
    'ArithmeticAddCalculation',
    'MultiplyAddWorkChain'
]
docstring-min-length = 5

[tool.pytest.ini_options]
minversion = '6.0'
testpaths = [
    'tests',
]
filterwarnings = [
    'ignore:Creating AiiDA configuration folder.*:UserWarning'
]

[tool.yapf]
align_closing_bracket_with_visual_indent = true
based_on_style = 'google'
coalesce_brackets = true
column_limit = 120
dedent_closing_brackets = true
indent_dictionary_value = false
split_arguments_when_comma_terminated = true

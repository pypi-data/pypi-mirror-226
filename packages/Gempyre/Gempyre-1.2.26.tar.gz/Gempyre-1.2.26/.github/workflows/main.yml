name: CMake Build Matrix

# not run
# on: [push]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "MSVC", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 17 2022",
            binary_mask: "Gempyre*.pyd",
            build_dir: "msvc_build"
          }
        - {
            name: "MinGW", artifact: "Windows-MinGW.tar.xz",
            os: windows-latest,
            build_type: "Release", cc: "gcc", cxx: "g++",
            generators: "Ninja",
            binary_mask: "Gempyre*.pyd",
            build_dir: "build"
          }
        - {
            name: "Ubuntu", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: "Release", cc: "gcc", cxx: "g++",
            generators: "Ninja",
            binary_mask: "Gempyre*.so",
            build_dir: "build"
          }
        - {
            name: "MacOS", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++",
            generators: "Ninja",
            binary_mask: "Gempyre*.so",
            build_dir: "build"
          }

    steps:
    
    - name: Setup Python
      uses: actions/setup-python@v3.1.3
      id: cp310
      with:
        python-version: "3.10"
  
    - uses: actions/checkout@v2  
    
    - name: Install dependencies on mingw
      if: startsWith(matrix.config.name, 'MinGW')
      run: |
        choco install ninja cmake
        ninja --version
        cmake --version

    - name: Install dependencies on ubuntu
      if: startsWith(matrix.config.name, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build cmake
        ninja --version
        cmake --version
        gcc --version
    
    - name: Install dependencies on macos
      if: startsWith(matrix.config.os, 'macos')
      run: |
        brew install cmake ninja
        ninja --version
        cmake --version
   
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@v1  

    - name: Setup DISPLAY
      if: startsWith(matrix.config.os, 'linux')
      run: |
        export DISPLAY=:99
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &   
 
    - name: Checkout Gempyre repo
      uses: actions/checkout@v3
      with:
        repository: mmertama/Gempyre
        path: Gempyre

    - name: Install Gempyre on windows msvc
      if: startsWith(matrix.config.name, 'msvc')
      shell: cmd
      working-directory: "Gempyre"
      run: |
        call "${{ matrix.config.environment_script }}"
        call msvc_install.bat   

    - name: Apply python path from mingw
      if: startsWith(matrix.config.name, 'mingw')
      env: 
        PYTHONHOME: '${{ steps.cp310.outputs.python-path }}'
      run: echo "${{ runner.temp }}/msys/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append             
    
    - name: Install Gempyre on windows gcc
      if: startsWith(matrix.config.name, 'mingw')
      shell: sh
      working-directory: "Gempyre"  
      run: |
        ./mingw_install.sh

    - name: Install Gempyre on ubuntu
      if: startsWith(matrix.config.name, 'ubuntu')
      shell: bash
      working-directory: "Gempyre"  
      run: |
        ./linux_install.sh
    
    - name: Install Gempyre on macos
      if: startsWith(matrix.config.os, 'macos')
      shell: bash
      working-directory: "Gempyre"  
      run: |
        ./osx_install.sh


    - name: Clean Gempyre on windows msvc
      if: startsWith(matrix.config.name, 'msvc')
      shell: cmd
      working-directory: "Gempyre"  
      run: |
        rem MSVC otherwise tries to use these without an apparent reason!
        del CMakeCache.txt /s

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        
        message("Currently: ${CMAKE_CURRENT_SOURCE_DIR}, ${CMAKE_CURRENT_LIST_DIR}")

        file(MAKE_DIRECTORY ${{ matrix.config.build_dir }})

        if("${{ matrix.config.name }}" STREQUAL "MSVC")
         
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )

          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()

          # MSVC wont find libs unless we tell
          set(DIR_LIST_LIST
              "${CMAKE_CURRENT_SOURCE_DIR}/Gempyre/msvc_build/gempyrelib/libuv-prefix/src/libuv-build/Release" 
              "${CMAKE_CURRENT_SOURCE_DIR}/Gempyre/msvc_build/gempyrelib"
              "${CMAKE_CURRENT_SOURCE_DIR}/Gempyre/msvc_build"
              "${CMAKE_CURRENT_SOURCE_DIR}/Gempyre/msvc_build/gempyrelib/libuv-prefix/src/libuv-build/Debug")
          
          # we cannot pass list as a list (not event ; separated)
          # therefore DCMAKE_LIBRARY_DIRS or such is not working, but we have to 
          # restruct list at the otherside
          string(REPLACE ";" "+" DIR_LIST "${DIR_LIST_LIST}")
         
          execute_process(
            COMMAND cmake .. -G "${{ matrix.config.generators }}"
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -DADD_PATH=${DIR_LIST}
            RESULT_VARIABLE result
            WORKING_DIRECTORY "${{ matrix.config.build_dir }}"
          ) 

        else()

          execute_process(
            COMMAND cmake .. -G "${{ matrix.config.generators }}" -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} 
            RESULT_VARIABLE result
            WORKING_DIRECTORY "${{ matrix.config.build_dir }}"
          )

        endif()

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
        

    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        execute_process(
          COMMAND cmake --build . --config ${{ matrix.config.build_type }}
          RESULT_VARIABLE result
          OUTPUT_VARIABLE build_out
          ERROR_VARIABLE build_out
          WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${{ matrix.config.build_dir }}"
        )
        
        message("build out: ${build_out}")
        
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Run tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)

        execute_process(
          COMMAND ctest -j ${N}
          WORKING_DIRECTORY ${{ matrix.config.build_dir }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
    
    - name: Pack
      shell: bash
      run: find . -name ${{ matrix.config.binary_mask }} -exec cmake -E tar cJfv ../${{ matrix.config.artifact }} {} +
      working-directory: ${{ matrix.config.build_dir }}

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1.12.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        allowUpdates: true

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
            os: ubuntu-latest
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar

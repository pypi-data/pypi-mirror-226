# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'itemid': 'int',
        'title': 'str',
        'elabid': 'str',
        'category': 'str',
        'is_bookable': 'int',
        'color': 'str'
    }

    attribute_map = {
        'itemid': 'itemid',
        'title': 'title',
        'elabid': 'elabid',
        'category': 'category',
        'is_bookable': 'is_bookable',
        'color': 'color'
    }

    def __init__(self, itemid=None, title=None, elabid=None, category=None, is_bookable=None, color=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501
        self._itemid = None
        self._title = None
        self._elabid = None
        self._category = None
        self._is_bookable = None
        self._color = None
        self.discriminator = None
        if itemid is not None:
            self.itemid = itemid
        if title is not None:
            self.title = title
        if elabid is not None:
            self.elabid = elabid
        if category is not None:
            self.category = category
        if is_bookable is not None:
            self.is_bookable = is_bookable
        if color is not None:
            self.color = color

    @property
    def itemid(self):
        """Gets the itemid of this Link.  # noqa: E501


        :return: The itemid of this Link.  # noqa: E501
        :rtype: int
        """
        return self._itemid

    @itemid.setter
    def itemid(self, itemid):
        """Sets the itemid of this Link.


        :param itemid: The itemid of this Link.  # noqa: E501
        :type: int
        """

        self._itemid = itemid

    @property
    def title(self):
        """Gets the title of this Link.  # noqa: E501


        :return: The title of this Link.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Link.


        :param title: The title of this Link.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def elabid(self):
        """Gets the elabid of this Link.  # noqa: E501


        :return: The elabid of this Link.  # noqa: E501
        :rtype: str
        """
        return self._elabid

    @elabid.setter
    def elabid(self, elabid):
        """Sets the elabid of this Link.


        :param elabid: The elabid of this Link.  # noqa: E501
        :type: str
        """

        self._elabid = elabid

    @property
    def category(self):
        """Gets the category of this Link.  # noqa: E501


        :return: The category of this Link.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Link.


        :param category: The category of this Link.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def is_bookable(self):
        """Gets the is_bookable of this Link.  # noqa: E501


        :return: The is_bookable of this Link.  # noqa: E501
        :rtype: int
        """
        return self._is_bookable

    @is_bookable.setter
    def is_bookable(self, is_bookable):
        """Sets the is_bookable of this Link.


        :param is_bookable: The is_bookable of this Link.  # noqa: E501
        :type: int
        """

        self._is_bookable = is_bookable

    @property
    def color(self):
        """Gets the color of this Link.  # noqa: E501


        :return: The color of this Link.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Link.


        :param color: The color of this Link.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

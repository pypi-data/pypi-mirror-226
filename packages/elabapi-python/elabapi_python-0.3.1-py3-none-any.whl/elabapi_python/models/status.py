# coding: utf-8

"""
    eLabFTW REST API v2 Documentation

    This document describes all available endpoints and methods for eLabFTW's API version 2.   # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'int',
        'category': 'str',
        'color': 'str',
        'is_default': 'int'
    }

    attribute_map = {
        'category_id': 'category_id',
        'category': 'category',
        'color': 'color',
        'is_default': 'is_default'
    }

    def __init__(self, category_id=None, category=None, color=None, is_default=None):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._category = None
        self._color = None
        self._is_default = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if category is not None:
            self.category = category
        if color is not None:
            self.color = color
        if is_default is not None:
            self.is_default = is_default

    @property
    def category_id(self):
        """Gets the category_id of this Status.  # noqa: E501


        :return: The category_id of this Status.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Status.


        :param category_id: The category_id of this Status.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def category(self):
        """Gets the category of this Status.  # noqa: E501


        :return: The category of this Status.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Status.


        :param category: The category of this Status.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def color(self):
        """Gets the color of this Status.  # noqa: E501


        :return: The color of this Status.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Status.


        :param color: The color of this Status.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def is_default(self):
        """Gets the is_default of this Status.  # noqa: E501


        :return: The is_default of this Status.  # noqa: E501
        :rtype: int
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Status.


        :param is_default: The is_default of this Status.  # noqa: E501
        :type: int
        """

        self._is_default = is_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

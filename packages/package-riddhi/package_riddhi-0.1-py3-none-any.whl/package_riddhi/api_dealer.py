# -*- coding: utf-8 -*-
"""MasterClass_final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JuZAu4UVWjj4OHCOBotCqO_5e8jK8C2t
"""

import requests

import pandas as pd

import datetime

import hashlib



private_key = 'a16c97622089e1bdffec4d72216cbeed53ad7fb4'



public_key = '4b21b06c3f23788e0698a62cf3d42d1c'



baseURI = "http://gateway.marvel.com/v1/public"



timestamp = '{:%Y%m%d%H%M%S}'.format(datetime.datetime.now())



hash_input = timestamp + private_key + public_key



hashed_string = hashlib.md5(hash_input.encode('utf-8')).hexdigest()

url_params = {



              'ts':timestamp,



              'apikey':public_key,



              'hash':hashed_string



          }

final_list=[]

offset=0



for i in range(5):



  try:



      response = requests.get(baseURI+f"/characters?limit=100&offset={offset}",params=url_params)





      response_data = response.json()



      data=response_data['data']['results']



      final_list.extend(data)



      offset+=100



  except requests.exceptions.HTTPError as http_err:



      print(f"HTTPError:",{http_err})



  except Exception as err:



      print(f"Error:", {err})



marvel_df = pd.json_normalize(final_list)

filtered_char = marvel_df[marvel_df['name'].str.startswith('A')]



len(filtered_char)

marvel_df.head()

len(marvel_df)

import requests
import pandas as pd

def fetch_marvel_data(api_key, hash, namestartswith=None, url=None, length=None):
   base_url = "http://gateway.marvel.com/v1/public/comics?ts=timestamp&apikey=apikey&hash=7126cf253e1f69f0b4a2470ffff91670"
   params = {
       "apikey": api_key,
       "hash": hash,
       "nameStartsWith": namestartswith,
       "url": url,
       "length": length
   }

   response = requests.get(base_url, params=params)
   if response.status_code != 200:
       raise Exception("Request not successful")

   data = response.json()
   return data

def transform_to_dataframe(marvel_data):
   results = marvel_data["data"]["results"]
   character_list = []
   for character in results:
       character_info = {
           "Name": character["name"],
           "Description": character["description"],
           "Thumbnail": character["thumbnail"]["path"] + "." + character["thumbnail"]["extension"]
       }
       character_list.append(character_info)

   df = pd.DataFrame(character_list)
   return df

try:
   api_key = "535503ca64cb902af9a2a0912445f87c"
   hash_value = "7126cf253e1f69f0b4a2470ffff91670"
   marvel_data = fetch_marvel_data(api_key, hash_value, namestartswith="Spider", length=10)
   marvel_dataframe = transform_to_dataframe(marvel_data)
except Exception as e:
   print("An exception occurred:", e)

def get_api(baseURI,API_KEY,hash,namestartswith=None,length=None):


  final_list=[]

  offset=0

  params = {

              'ts':timestamp,

              'apikey':API_KEY,

              'hash':hash

          }

  if namestartswith:

    params['nameStartsWith']=namestartswith

  for i in range(5):

    try:

        response = requests.get(baseURI+f"/characters?limit=100&offset={offset}",params=params)
        response.raise_for_status()


        response_data = response.json()

        data=response_data['data']['results']

        final_list.extend(data)

        offset+=100

    except requests.exceptions.HTTPError as http_err:

        print(f"HTTPError:",{http_err})

    except Exception as err:

        print(f"Error:", {err})


def convert_df(data):

  data_df = pd.json_normalize(data)

  return data_df
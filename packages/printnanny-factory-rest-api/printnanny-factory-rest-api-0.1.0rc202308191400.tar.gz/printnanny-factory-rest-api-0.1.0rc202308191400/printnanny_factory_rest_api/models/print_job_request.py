# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import printnanny_factory_rest_api.models

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint
from printnanny_factory_rest_api.models.print_job_status import PrintJobStatus
from printnanny_factory_rest_api.models.printer_reservation_polymorphic_request import PrinterReservationPolymorphicRequest

class PrintJobRequest(PrinterReservationPolymorphicRequest):
    """
    PrintJobRequest
    """
    progress: conint(strict=True, le=2147483647, ge=-2147483648) = Field(...)
    estimated_print_seconds: Optional[conint(strict=True, le=9223372036854775807, ge=-9223372036854775808)] = Field(None, description="Estimated print time, in seconds")
    clear_dt: Optional[datetime] = None
    status: PrintJobStatus = Field(...)
    batch: StrictStr = Field(...)
    __properties = ["created_by", "end_dt", "notes", "printer", "start_dt", "title", "workspace", "progress", "estimated_print_seconds", "clear_dt", "status", "batch"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = 'resourcetype'

    # discriminator mappings
    __discriminator_value_class_map = {
        'MaintenanceJob': 'MaintenanceJobTypedRequest',
        'PrintJob': 'PrintJobTypedRequest',
        'PrinterReservation': 'PrinterReservationTypedRequest'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(PrintJobTypedRequest):
        """Create an instance of PrintJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if estimated_print_seconds (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_print_seconds is None and "estimated_print_seconds" in self.__fields_set__:
            _dict['estimated_print_seconds'] = None

        # set to None if clear_dt (nullable) is None
        # and __fields_set__ contains the field
        if self.clear_dt is None and "clear_dt" in self.__fields_set__:
            _dict['clear_dt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(PrintJobTypedRequest):
        """Create an instance of PrintJobRequest from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = getattr(printnanny_factory_rest_api.models, object_type)
            return klass.from_dict(obj)
        else:
            raise ValueError("PrintJobRequest failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBytes, StrictStr, conint, constr
from printnanny_factory_rest_api.models.printer_backend import PrinterBackend

class PrinterOEMRequest(BaseModel):
    """
    PrinterOEMRequest
    """
    manufacturer: constr(strict=True, max_length=255, min_length=1) = Field(...)
    model: constr(strict=True, max_length=255, min_length=1) = Field(...)
    backend: Optional[PrinterBackend] = None
    build_volume_x: conint(strict=True, le=2147483647, ge=-2147483648) = Field(...)
    build_volume_y: conint(strict=True, le=2147483647, ge=-2147483648) = Field(...)
    build_volume_z: conint(strict=True, le=2147483647, ge=-2147483648) = Field(...)
    thumbnail: Optional[Union[StrictBytes, StrictStr]] = None
    __properties = ["manufacturer", "model", "backend", "build_volume_x", "build_volume_y", "build_volume_z", "thumbnail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrinterOEMRequest:
        """Create an instance of PrinterOEMRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if thumbnail (nullable) is None
        # and __fields_set__ contains the field
        if self.thumbnail is None and "thumbnail" in self.__fields_set__:
            _dict['thumbnail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrinterOEMRequest:
        """Create an instance of PrinterOEMRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PrinterOEMRequest.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PrinterOEMRequest) in the input: " + obj)

        _obj = PrinterOEMRequest.parse_obj({
            "manufacturer": obj.get("manufacturer"),
            "model": obj.get("model"),
            "backend": obj.get("backend"),
            "build_volume_x": obj.get("build_volume_x"),
            "build_volume_y": obj.get("build_volume_y"),
            "build_volume_z": obj.get("build_volume_z"),
            "thumbnail": obj.get("thumbnail")
        })
        return _obj


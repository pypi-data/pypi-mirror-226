# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated
from typing import overload, Optional, Union, Awaitable

from pydantic import Field, StrictStr

from typing import List, Optional

from printnanny_factory_rest_api.models.duet_printer_backend import DuetPrinterBackend
from printnanny_factory_rest_api.models.duet_printer_backend_request import DuetPrinterBackendRequest
from printnanny_factory_rest_api.models.oauth2_application import Oauth2Application
from printnanny_factory_rest_api.models.patched_duet_printer_backend_request import PatchedDuetPrinterBackendRequest
from printnanny_factory_rest_api.models.patched_printer_request import PatchedPrinterRequest
from printnanny_factory_rest_api.models.printer import Printer
from printnanny_factory_rest_api.models.printer_create_request import PrinterCreateRequest
from printnanny_factory_rest_api.models.printer_oem import PrinterOEM
from printnanny_factory_rest_api.models.printer_oem_request import PrinterOEMRequest
from printnanny_factory_rest_api.models.printer_oauth_application_create_request import PrinterOauthApplicationCreateRequest
from printnanny_factory_rest_api.models.printer_request import PrinterRequest

from printnanny_factory_rest_api.api_client import ApiClient
from printnanny_factory_rest_api.api_response import ApiResponse
from printnanny_factory_rest_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PrintersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def oems_create(self, printer_oem_request : PrinterOEMRequest, **kwargs) -> PrinterOEM:  # noqa: E501
        ...

    @overload
    def oems_create(self, printer_oem_request : PrinterOEMRequest, async_req: Optional[bool]=True, **kwargs) -> PrinterOEM:  # noqa: E501
        ...

    @validate_arguments
    def oems_create(self, printer_oem_request : PrinterOEMRequest, async_req: Optional[bool]=None, **kwargs) -> Union[PrinterOEM, Awaitable[PrinterOEM]]:  # noqa: E501
        """oems_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.oems_create(printer_oem_request, async_req=True)
        >>> result = thread.get()

        :param printer_oem_request: (required)
        :type printer_oem_request: PrinterOEMRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PrinterOEM
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the oems_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.oems_create_with_http_info(printer_oem_request, **kwargs)  # noqa: E501

    @validate_arguments
    def oems_create_with_http_info(self, printer_oem_request : PrinterOEMRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """oems_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.oems_create_with_http_info(printer_oem_request, async_req=True)
        >>> result = thread.get()

        :param printer_oem_request: (required)
        :type printer_oem_request: PrinterOEMRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PrinterOEM, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'printer_oem_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oems_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['printer_oem_request'] is not None:
            _body_params = _params['printer_oem_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '201': "PrinterOEM",
            '400': "ErrorDetail",
            '409': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/oems/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def oems_list(self, **kwargs) -> List[PrinterOEM]:  # noqa: E501
        ...

    @overload
    def oems_list(self, async_req: Optional[bool]=True, **kwargs) -> List[PrinterOEM]:  # noqa: E501
        ...

    @validate_arguments
    def oems_list(self, async_req: Optional[bool]=None, **kwargs) -> Union[List[PrinterOEM], Awaitable[List[PrinterOEM]]]:  # noqa: E501
        """oems_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.oems_list(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PrinterOEM]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the oems_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.oems_list_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def oems_list_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """oems_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.oems_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PrinterOEM], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oems_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[PrinterOEM]",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/oems/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def oems_retrieve(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer oem.")], **kwargs) -> PrinterOEM:  # noqa: E501
        ...

    @overload
    def oems_retrieve(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer oem.")], async_req: Optional[bool]=True, **kwargs) -> PrinterOEM:  # noqa: E501
        ...

    @validate_arguments
    def oems_retrieve(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer oem.")], async_req: Optional[bool]=None, **kwargs) -> Union[PrinterOEM, Awaitable[PrinterOEM]]:  # noqa: E501
        """oems_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.oems_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer oem. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PrinterOEM
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the oems_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.oems_retrieve_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def oems_retrieve_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer oem.")], **kwargs) -> ApiResponse:  # noqa: E501
        """oems_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.oems_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer oem. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PrinterOEM, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oems_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "PrinterOEM",
            '404': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/oems/{id}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_application_create(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, printer_oauth_application_create_request : PrinterOauthApplicationCreateRequest, **kwargs) -> Oauth2Application:  # noqa: E501
        ...

    @overload
    def workspaces_printers_application_create(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, printer_oauth_application_create_request : PrinterOauthApplicationCreateRequest, async_req: Optional[bool]=True, **kwargs) -> Oauth2Application:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_application_create(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, printer_oauth_application_create_request : PrinterOauthApplicationCreateRequest, async_req: Optional[bool]=None, **kwargs) -> Union[Oauth2Application, Awaitable[Oauth2Application]]:  # noqa: E501
        """workspaces_printers_application_create  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_application_create(id, workspace_id, printer_oauth_application_create_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer. (required)
        :type id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param printer_oauth_application_create_request: (required)
        :type printer_oauth_application_create_request: PrinterOauthApplicationCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Oauth2Application
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_application_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_application_create_with_http_info(id, workspace_id, printer_oauth_application_create_request, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_application_create_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, printer_oauth_application_create_request : PrinterOauthApplicationCreateRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_application_create  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_application_create_with_http_info(id, workspace_id, printer_oauth_application_create_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer. (required)
        :type id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param printer_oauth_application_create_request: (required)
        :type printer_oauth_application_create_request: PrinterOauthApplicationCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Oauth2Application, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'workspace_id',
            'printer_oauth_application_create_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_application_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['printer_oauth_application_create_request'] is not None:
            _body_params = _params['printer_oauth_application_create_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '201': "Oauth2Application",
            '400': "ErrorDetail",
            '409': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/{id}/application/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_create(self, workspace_id : StrictStr, printer_create_request : PrinterCreateRequest, **kwargs) -> Printer:  # noqa: E501
        ...

    @overload
    def workspaces_printers_create(self, workspace_id : StrictStr, printer_create_request : PrinterCreateRequest, async_req: Optional[bool]=True, **kwargs) -> Printer:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_create(self, workspace_id : StrictStr, printer_create_request : PrinterCreateRequest, async_req: Optional[bool]=None, **kwargs) -> Union[Printer, Awaitable[Printer]]:  # noqa: E501
        """workspaces_printers_create  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_create(workspace_id, printer_create_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: (required)
        :type workspace_id: str
        :param printer_create_request: (required)
        :type printer_create_request: PrinterCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Printer
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_create_with_http_info(workspace_id, printer_create_request, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_create_with_http_info(self, workspace_id : StrictStr, printer_create_request : PrinterCreateRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_create  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_create_with_http_info(workspace_id, printer_create_request, async_req=True)
        >>> result = thread.get()

        :param workspace_id: (required)
        :type workspace_id: str
        :param printer_create_request: (required)
        :type printer_create_request: PrinterCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Printer, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id',
            'printer_create_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['printer_create_request'] is not None:
            _body_params = _params['printer_create_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '201': "Printer",
            '400': "ErrorDetail",
            '409': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_duet_partial_update(self, printer_id : StrictStr, workspace_id : StrictStr, patched_duet_printer_backend_request : Optional[PatchedDuetPrinterBackendRequest] = None, **kwargs) -> DuetPrinterBackend:  # noqa: E501
        ...

    @overload
    def workspaces_printers_duet_partial_update(self, printer_id : StrictStr, workspace_id : StrictStr, patched_duet_printer_backend_request : Optional[PatchedDuetPrinterBackendRequest] = None, async_req: Optional[bool]=True, **kwargs) -> DuetPrinterBackend:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_duet_partial_update(self, printer_id : StrictStr, workspace_id : StrictStr, patched_duet_printer_backend_request : Optional[PatchedDuetPrinterBackendRequest] = None, async_req: Optional[bool]=None, **kwargs) -> Union[DuetPrinterBackend, Awaitable[DuetPrinterBackend]]:  # noqa: E501
        """workspaces_printers_duet_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_duet_partial_update(printer_id, workspace_id, patched_duet_printer_backend_request, async_req=True)
        >>> result = thread.get()

        :param printer_id: (required)
        :type printer_id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param patched_duet_printer_backend_request:
        :type patched_duet_printer_backend_request: PatchedDuetPrinterBackendRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DuetPrinterBackend
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_duet_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_duet_partial_update_with_http_info(printer_id, workspace_id, patched_duet_printer_backend_request, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_duet_partial_update_with_http_info(self, printer_id : StrictStr, workspace_id : StrictStr, patched_duet_printer_backend_request : Optional[PatchedDuetPrinterBackendRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_duet_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_duet_partial_update_with_http_info(printer_id, workspace_id, patched_duet_printer_backend_request, async_req=True)
        >>> result = thread.get()

        :param printer_id: (required)
        :type printer_id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param patched_duet_printer_backend_request:
        :type patched_duet_printer_backend_request: PatchedDuetPrinterBackendRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DuetPrinterBackend, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'printer_id',
            'workspace_id',
            'patched_duet_printer_backend_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_duet_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['printer_id']:
            _path_params['printer_id'] = _params['printer_id']

        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_duet_printer_backend_request'] is not None:
            _body_params = _params['patched_duet_printer_backend_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DuetPrinterBackend",
            '400': "ErrorDetail",
            '409': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/{printer_id}/duet/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_duet_retrieve(self, printer_id : StrictStr, workspace_id : StrictStr, **kwargs) -> DuetPrinterBackend:  # noqa: E501
        ...

    @overload
    def workspaces_printers_duet_retrieve(self, printer_id : StrictStr, workspace_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> DuetPrinterBackend:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_duet_retrieve(self, printer_id : StrictStr, workspace_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[DuetPrinterBackend, Awaitable[DuetPrinterBackend]]:  # noqa: E501
        """workspaces_printers_duet_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_duet_retrieve(printer_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param printer_id: (required)
        :type printer_id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DuetPrinterBackend
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_duet_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_duet_retrieve_with_http_info(printer_id, workspace_id, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_duet_retrieve_with_http_info(self, printer_id : StrictStr, workspace_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_duet_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_duet_retrieve_with_http_info(printer_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param printer_id: (required)
        :type printer_id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DuetPrinterBackend, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'printer_id',
            'workspace_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_duet_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['printer_id']:
            _path_params['printer_id'] = _params['printer_id']

        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DuetPrinterBackend",
            '404': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/{printer_id}/duet/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_duet_update(self, printer_id : StrictStr, workspace_id : StrictStr, duet_printer_backend_request : DuetPrinterBackendRequest, **kwargs) -> DuetPrinterBackend:  # noqa: E501
        ...

    @overload
    def workspaces_printers_duet_update(self, printer_id : StrictStr, workspace_id : StrictStr, duet_printer_backend_request : DuetPrinterBackendRequest, async_req: Optional[bool]=True, **kwargs) -> DuetPrinterBackend:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_duet_update(self, printer_id : StrictStr, workspace_id : StrictStr, duet_printer_backend_request : DuetPrinterBackendRequest, async_req: Optional[bool]=None, **kwargs) -> Union[DuetPrinterBackend, Awaitable[DuetPrinterBackend]]:  # noqa: E501
        """workspaces_printers_duet_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_duet_update(printer_id, workspace_id, duet_printer_backend_request, async_req=True)
        >>> result = thread.get()

        :param printer_id: (required)
        :type printer_id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param duet_printer_backend_request: (required)
        :type duet_printer_backend_request: DuetPrinterBackendRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DuetPrinterBackend
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_duet_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_duet_update_with_http_info(printer_id, workspace_id, duet_printer_backend_request, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_duet_update_with_http_info(self, printer_id : StrictStr, workspace_id : StrictStr, duet_printer_backend_request : DuetPrinterBackendRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_duet_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_duet_update_with_http_info(printer_id, workspace_id, duet_printer_backend_request, async_req=True)
        >>> result = thread.get()

        :param printer_id: (required)
        :type printer_id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param duet_printer_backend_request: (required)
        :type duet_printer_backend_request: DuetPrinterBackendRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DuetPrinterBackend, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'printer_id',
            'workspace_id',
            'duet_printer_backend_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_duet_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['printer_id']:
            _path_params['printer_id'] = _params['printer_id']

        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['duet_printer_backend_request'] is not None:
            _body_params = _params['duet_printer_backend_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DuetPrinterBackend",
            '400': "ErrorDetail",
            '409': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/{printer_id}/duet/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_list(self, workspace_id : StrictStr, **kwargs) -> List[Printer]:  # noqa: E501
        ...

    @overload
    def workspaces_printers_list(self, workspace_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> List[Printer]:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_list(self, workspace_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[List[Printer], Awaitable[List[Printer]]]:  # noqa: E501
        """workspaces_printers_list  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_list(workspace_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Printer]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_list_with_http_info(workspace_id, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_list_with_http_info(self, workspace_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_list  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_list_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param workspace_id: (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Printer], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workspace_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[Printer]",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_partial_update(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, patched_printer_request : Optional[PatchedPrinterRequest] = None, **kwargs) -> Printer:  # noqa: E501
        ...

    @overload
    def workspaces_printers_partial_update(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, patched_printer_request : Optional[PatchedPrinterRequest] = None, async_req: Optional[bool]=True, **kwargs) -> Printer:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_partial_update(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, patched_printer_request : Optional[PatchedPrinterRequest] = None, async_req: Optional[bool]=None, **kwargs) -> Union[Printer, Awaitable[Printer]]:  # noqa: E501
        """workspaces_printers_partial_update  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_partial_update(id, workspace_id, patched_printer_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer. (required)
        :type id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param patched_printer_request:
        :type patched_printer_request: PatchedPrinterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Printer
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_partial_update_with_http_info(id, workspace_id, patched_printer_request, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_partial_update_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, patched_printer_request : Optional[PatchedPrinterRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_partial_update  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_partial_update_with_http_info(id, workspace_id, patched_printer_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer. (required)
        :type id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param patched_printer_request:
        :type patched_printer_request: PatchedPrinterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Printer, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'workspace_id',
            'patched_printer_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_printer_request'] is not None:
            _body_params = _params['patched_printer_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "Printer",
            '400': "ErrorDetail",
            '409': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/{id}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_retrieve(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, **kwargs) -> Printer:  # noqa: E501
        ...

    @overload
    def workspaces_printers_retrieve(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Printer:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_retrieve(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Printer, Awaitable[Printer]]:  # noqa: E501
        """workspaces_printers_retrieve  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_retrieve(id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer. (required)
        :type id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Printer
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_retrieve_with_http_info(id, workspace_id, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_retrieve_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_retrieve  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_retrieve_with_http_info(id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer. (required)
        :type id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Printer, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'workspace_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "Printer",
            '404': "ErrorDetail",
            '401': "ErrorDetail",
            '403': "ErrorDetail",
            '500': "ErrorDetail",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/{id}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def workspaces_printers_update(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, printer_request : PrinterRequest, **kwargs) -> Printer:  # noqa: E501
        ...

    @overload
    def workspaces_printers_update(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, printer_request : PrinterRequest, async_req: Optional[bool]=True, **kwargs) -> Printer:  # noqa: E501
        ...

    @validate_arguments
    def workspaces_printers_update(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, printer_request : PrinterRequest, async_req: Optional[bool]=None, **kwargs) -> Union[Printer, Awaitable[Printer]]:  # noqa: E501
        """workspaces_printers_update  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_update(id, workspace_id, printer_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer. (required)
        :type id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param printer_request: (required)
        :type printer_request: PrinterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Printer
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the workspaces_printers_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.workspaces_printers_update_with_http_info(id, workspace_id, printer_request, **kwargs)  # noqa: E501

    @validate_arguments
    def workspaces_printers_update_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A unique integer value identifying this printer.")], workspace_id : StrictStr, printer_request : PrinterRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """workspaces_printers_update  # noqa: E501

        Intended for use with ViewSets registered using rest_framework_nested.routers.NestedSimpleRouter  Looks up workspace object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.workspaces_printers_update_with_http_info(id, workspace_id, printer_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this printer. (required)
        :type id: str
        :param workspace_id: (required)
        :type workspace_id: str
        :param printer_request: (required)
        :type printer_request: PrinterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Printer, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'workspace_id',
            'printer_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_printers_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['workspace_id']:
            _path_params['workspace_id'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['printer_request'] is not None:
            _body_params = _params['printer_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "Printer",
        }

        return self.api_client.call_api(
            '/api/workspaces/{workspace_id}/printers/{id}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

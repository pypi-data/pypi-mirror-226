# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated
from typing import overload, Optional, Union, Awaitable

from pydantic import constr

from typing import Optional

from printnanny_factory_rest_api.models.callback_token_auth_request import CallbackTokenAuthRequest
from printnanny_factory_rest_api.models.email_auth_redirect import EmailAuthRedirect
from printnanny_factory_rest_api.models.email_auth_redirect_request import EmailAuthRedirectRequest
from printnanny_factory_rest_api.models.grant_type_enum import GrantTypeEnum
from printnanny_factory_rest_api.models.oauth2_introspect import Oauth2Introspect
from printnanny_factory_rest_api.models.oauth2_token import Oauth2Token

from printnanny_factory_rest_api.api_client import ApiClient
from printnanny_factory_rest_api.api_response import ApiResponse
from printnanny_factory_rest_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AuthApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def auth_send_email_create(self, email_auth_redirect_request : EmailAuthRedirectRequest, **kwargs) -> EmailAuthRedirect:  # noqa: E501
        ...

    @overload
    def auth_send_email_create(self, email_auth_redirect_request : EmailAuthRedirectRequest, async_req: Optional[bool]=True, **kwargs) -> EmailAuthRedirect:  # noqa: E501
        ...

    @validate_arguments
    def auth_send_email_create(self, email_auth_redirect_request : EmailAuthRedirectRequest, async_req: Optional[bool]=None, **kwargs) -> Union[EmailAuthRedirect, Awaitable[EmailAuthRedirect]]:  # noqa: E501
        """auth_send_email_create  # noqa: E501

        ObtainEmailCallbackToken is identical to drfpasswordless.views.ObtainEmailCallbackToken but passes request context to TokenService.send_token()  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_send_email_create(email_auth_redirect_request, async_req=True)
        >>> result = thread.get()

        :param email_auth_redirect_request: (required)
        :type email_auth_redirect_request: EmailAuthRedirectRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EmailAuthRedirect
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the auth_send_email_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.auth_send_email_create_with_http_info(email_auth_redirect_request, **kwargs)  # noqa: E501

    @validate_arguments
    def auth_send_email_create_with_http_info(self, email_auth_redirect_request : EmailAuthRedirectRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """auth_send_email_create  # noqa: E501

        ObtainEmailCallbackToken is identical to drfpasswordless.views.ObtainEmailCallbackToken but passes request context to TokenService.send_token()  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_send_email_create_with_http_info(email_auth_redirect_request, async_req=True)
        >>> result = thread.get()

        :param email_auth_redirect_request: (required)
        :type email_auth_redirect_request: EmailAuthRedirectRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EmailAuthRedirect, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'email_auth_redirect_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_send_email_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['email_auth_redirect_request'] is not None:
            _body_params = _params['email_auth_redirect_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "EmailAuthRedirect",
        }

        return self.api_client.call_api(
            '/api/auth/send-email/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def auth_verify_email_create(self, callback_token_auth_request : CallbackTokenAuthRequest, **kwargs) -> Oauth2Token:  # noqa: E501
        ...

    @overload
    def auth_verify_email_create(self, callback_token_auth_request : CallbackTokenAuthRequest, async_req: Optional[bool]=True, **kwargs) -> Oauth2Token:  # noqa: E501
        ...

    @validate_arguments
    def auth_verify_email_create(self, callback_token_auth_request : CallbackTokenAuthRequest, async_req: Optional[bool]=None, **kwargs) -> Union[Oauth2Token, Awaitable[Oauth2Token]]:  # noqa: E501
        """auth_verify_email_create  # noqa: E501

        This is a duplicate of rest_framework's own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_verify_email_create(callback_token_auth_request, async_req=True)
        >>> result = thread.get()

        :param callback_token_auth_request: (required)
        :type callback_token_auth_request: CallbackTokenAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Oauth2Token
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the auth_verify_email_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.auth_verify_email_create_with_http_info(callback_token_auth_request, **kwargs)  # noqa: E501

    @validate_arguments
    def auth_verify_email_create_with_http_info(self, callback_token_auth_request : CallbackTokenAuthRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """auth_verify_email_create  # noqa: E501

        This is a duplicate of rest_framework's own ObtainAuthToken method. Instead, this returns an Auth Token based on our callback token and source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.auth_verify_email_create_with_http_info(callback_token_auth_request, async_req=True)
        >>> result = thread.get()

        :param callback_token_auth_request: (required)
        :type callback_token_auth_request: CallbackTokenAuthRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Oauth2Token, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'callback_token_auth_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_verify_email_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['callback_token_auth_request'] is not None:
            _body_params = _params['callback_token_auth_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "Oauth2Token",
        }

        return self.api_client.call_api(
            '/api/auth/verify-email/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def o_introspect_create(self, token : constr(strict=True, min_length=1), **kwargs) -> Oauth2Introspect:  # noqa: E501
        ...

    @overload
    def o_introspect_create(self, token : constr(strict=True, min_length=1), async_req: Optional[bool]=True, **kwargs) -> Oauth2Introspect:  # noqa: E501
        ...

    @validate_arguments
    def o_introspect_create(self, token : constr(strict=True, min_length=1), async_req: Optional[bool]=None, **kwargs) -> Union[Oauth2Introspect, Awaitable[Oauth2Introspect]]:  # noqa: E501
        """o_introspect_create  # noqa: E501

        Get the token from the body form parameters. Body: token=mF_9.B5f-4.1JqM  :param request: :param args: :param kwargs: :return:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.o_introspect_create(token, async_req=True)
        >>> result = thread.get()

        :param token: (required)
        :type token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Oauth2Introspect
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the o_introspect_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.o_introspect_create_with_http_info(token, **kwargs)  # noqa: E501

    @validate_arguments
    def o_introspect_create_with_http_info(self, token : constr(strict=True, min_length=1), **kwargs) -> ApiResponse:  # noqa: E501
        """o_introspect_create  # noqa: E501

        Get the token from the body form parameters. Body: token=mF_9.B5f-4.1JqM  :param request: :param args: :param kwargs: :return:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.o_introspect_create_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param token: (required)
        :type token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Oauth2Introspect, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_introspect_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['token']:
            _form_params.append(('token', _params['token']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Oauth2Introspect",
        }

        return self.api_client.call_api(
            '/api/o/introspect/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def o_introspect_retrieve(self, **kwargs) -> Oauth2Introspect:  # noqa: E501
        ...

    @overload
    def o_introspect_retrieve(self, async_req: Optional[bool]=True, **kwargs) -> Oauth2Introspect:  # noqa: E501
        ...

    @validate_arguments
    def o_introspect_retrieve(self, async_req: Optional[bool]=None, **kwargs) -> Union[Oauth2Introspect, Awaitable[Oauth2Introspect]]:  # noqa: E501
        """o_introspect_retrieve  # noqa: E501

        Get the token from the URL parameters. URL: https://example.com/introspect?token=mF_9.B5f-4.1JqM  :param request: :param args: :param kwargs: :return:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.o_introspect_retrieve(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Oauth2Introspect
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the o_introspect_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.o_introspect_retrieve_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def o_introspect_retrieve_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """o_introspect_retrieve  # noqa: E501

        Get the token from the URL parameters. URL: https://example.com/introspect?token=mF_9.B5f-4.1JqM  :param request: :param args: :param kwargs: :return:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.o_introspect_retrieve_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Oauth2Introspect, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_introspect_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Oauth2Introspect",
        }

        return self.api_client.call_api(
            '/api/o/introspect/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def o_token_create(self, grant_type : GrantTypeEnum, username : Optional[constr(strict=True, min_length=1)] = None, password : Optional[constr(strict=True, min_length=1)] = None, scope : Optional[constr(strict=True, min_length=1)] = None, client_id : Optional[constr(strict=True, min_length=1)] = None, client_secret : Optional[constr(strict=True, min_length=1)] = None, refresh_token : Optional[constr(strict=True, min_length=1)] = None, **kwargs) -> Oauth2Token:  # noqa: E501
        ...

    @overload
    def o_token_create(self, grant_type : GrantTypeEnum, username : Optional[constr(strict=True, min_length=1)] = None, password : Optional[constr(strict=True, min_length=1)] = None, scope : Optional[constr(strict=True, min_length=1)] = None, client_id : Optional[constr(strict=True, min_length=1)] = None, client_secret : Optional[constr(strict=True, min_length=1)] = None, refresh_token : Optional[constr(strict=True, min_length=1)] = None, async_req: Optional[bool]=True, **kwargs) -> Oauth2Token:  # noqa: E501
        ...

    @validate_arguments
    def o_token_create(self, grant_type : GrantTypeEnum, username : Optional[constr(strict=True, min_length=1)] = None, password : Optional[constr(strict=True, min_length=1)] = None, scope : Optional[constr(strict=True, min_length=1)] = None, client_id : Optional[constr(strict=True, min_length=1)] = None, client_secret : Optional[constr(strict=True, min_length=1)] = None, refresh_token : Optional[constr(strict=True, min_length=1)] = None, async_req: Optional[bool]=None, **kwargs) -> Union[Oauth2Token, Awaitable[Oauth2Token]]:  # noqa: E501
        """o_token_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.o_token_create(grant_type, username, password, scope, client_id, client_secret, refresh_token, async_req=True)
        >>> result = thread.get()

        :param grant_type: (required)
        :type grant_type: GrantTypeEnum
        :param username:
        :type username: str
        :param password:
        :type password: str
        :param scope:
        :type scope: str
        :param client_id:
        :type client_id: str
        :param client_secret:
        :type client_secret: str
        :param refresh_token:
        :type refresh_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Oauth2Token
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the o_token_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.o_token_create_with_http_info(grant_type, username, password, scope, client_id, client_secret, refresh_token, **kwargs)  # noqa: E501

    @validate_arguments
    def o_token_create_with_http_info(self, grant_type : GrantTypeEnum, username : Optional[constr(strict=True, min_length=1)] = None, password : Optional[constr(strict=True, min_length=1)] = None, scope : Optional[constr(strict=True, min_length=1)] = None, client_id : Optional[constr(strict=True, min_length=1)] = None, client_secret : Optional[constr(strict=True, min_length=1)] = None, refresh_token : Optional[constr(strict=True, min_length=1)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """o_token_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.o_token_create_with_http_info(grant_type, username, password, scope, client_id, client_secret, refresh_token, async_req=True)
        >>> result = thread.get()

        :param grant_type: (required)
        :type grant_type: GrantTypeEnum
        :param username:
        :type username: str
        :param password:
        :type password: str
        :param scope:
        :type scope: str
        :param client_id:
        :type client_id: str
        :param client_secret:
        :type client_secret: str
        :param refresh_token:
        :type refresh_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Oauth2Token, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'grant_type',
            'username',
            'password',
            'scope',
            'client_id',
            'client_secret',
            'refresh_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_token_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['username']:
            _form_params.append(('username', _params['username']))

        if _params['password']:
            _form_params.append(('password', _params['password']))

        if _params['grant_type']:
            _form_params.append(('grant_type', _params['grant_type']))

        if _params['scope']:
            _form_params.append(('scope', _params['scope']))

        if _params['client_id']:
            _form_params.append(('client_id', _params['client_id']))

        if _params['client_secret']:
            _form_params.append(('client_secret', _params['client_secret']))

        if _params['refresh_token']:
            _form_params.append(('refresh_token', _params['refresh_token']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Oauth2Token",
        }

        return self.api_client.call_api(
            '/api/o/token/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

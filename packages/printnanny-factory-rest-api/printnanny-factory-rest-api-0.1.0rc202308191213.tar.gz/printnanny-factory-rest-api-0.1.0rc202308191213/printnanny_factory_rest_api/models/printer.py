# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from printnanny_factory_rest_api.models.duet_printer_backend import DuetPrinterBackend
from printnanny_factory_rest_api.models.oauth2_application import Oauth2Application
from printnanny_factory_rest_api.models.printer_oem import PrinterOEM

class Printer(BaseModel):
    """
    Printer
    """
    id: StrictStr = Field(...)
    oem: PrinterOEM = Field(...)
    backend_data: DuetPrinterBackend = Field(...)
    workspace: StrictStr = Field(...)
    oauth_application: conlist(Oauth2Application) = Field(...)
    name: constr(strict=True, max_length=255) = Field(...)
    bed_cleared: Optional[StrictBool] = None
    created: datetime = Field(...)
    modified: datetime = Field(...)
    filament: Optional[StrictStr] = None
    nozzle: Optional[StrictStr] = None
    bed: Optional[StrictStr] = None
    __properties = ["id", "oem", "backend_data", "workspace", "oauth_application", "name", "bed_cleared", "created", "modified", "filament", "nozzle", "bed"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Printer:
        """Create an instance of Printer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "oem",
                            "backend_data",
                            "workspace",
                            "oauth_application",
                            "created",
                            "modified",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of oem
        if self.oem:
            _dict['oem'] = self.oem.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backend_data
        if self.backend_data:
            _dict['backend_data'] = self.backend_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in oauth_application (list)
        _items = []
        if self.oauth_application:
            for _item in self.oauth_application:
                if _item:
                    _items.append(_item.to_dict())
            _dict['oauth_application'] = _items
        # set to None if filament (nullable) is None
        # and __fields_set__ contains the field
        if self.filament is None and "filament" in self.__fields_set__:
            _dict['filament'] = None

        # set to None if nozzle (nullable) is None
        # and __fields_set__ contains the field
        if self.nozzle is None and "nozzle" in self.__fields_set__:
            _dict['nozzle'] = None

        # set to None if bed (nullable) is None
        # and __fields_set__ contains the field
        if self.bed is None and "bed" in self.__fields_set__:
            _dict['bed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Printer:
        """Create an instance of Printer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Printer.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Printer) in the input: " + obj)

        _obj = Printer.parse_obj({
            "id": obj.get("id"),
            "oem": PrinterOEM.from_dict(obj.get("oem")) if obj.get("oem") is not None else None,
            "backend_data": DuetPrinterBackend.from_dict(obj.get("backend_data")) if obj.get("backend_data") is not None else None,
            "workspace": obj.get("workspace"),
            "oauth_application": [Oauth2Application.from_dict(_item) for _item in obj.get("oauth_application")] if obj.get("oauth_application") is not None else None,
            "name": obj.get("name"),
            "bed_cleared": obj.get("bed_cleared"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "filament": obj.get("filament"),
            "nozzle": obj.get("nozzle"),
            "bed": obj.get("bed")
        })
        return _obj


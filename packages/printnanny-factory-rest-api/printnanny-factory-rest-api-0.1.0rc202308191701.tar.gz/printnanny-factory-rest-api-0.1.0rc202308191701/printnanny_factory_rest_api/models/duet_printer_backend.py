# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from printnanny_factory_rest_api.models.duet_printer_backend_status_enum import DuetPrinterBackendStatusEnum

class DuetPrinterBackend(BaseModel):
    """
    DuetPrinterBackend
    """
    id: StrictStr = Field(...)
    deleted: Optional[datetime] = Field(...)
    deleted_by_cascade: StrictBool = Field(...)
    network: Optional[Dict[str, Any]] = None
    job: Optional[Dict[str, Any]] = None
    status: Optional[DuetPrinterBackendStatusEnum] = None
    last_message: Optional[constr(strict=True, max_length=255)] = None
    last_message_at: Optional[datetime] = None
    tz: Optional[StrictStr] = None
    modified: datetime = Field(...)
    printer: StrictStr = Field(...)
    __properties = ["id", "deleted", "deleted_by_cascade", "network", "job", "status", "last_message", "last_message_at", "tz", "modified", "printer"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DuetPrinterBackend:
        """Create an instance of DuetPrinterBackend from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "deleted",
                            "deleted_by_cascade",
                            "modified",
                          },
                          exclude_none=True)
        # set to None if deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted is None and "deleted" in self.__fields_set__:
            _dict['deleted'] = None

        # set to None if network (nullable) is None
        # and __fields_set__ contains the field
        if self.network is None and "network" in self.__fields_set__:
            _dict['network'] = None

        # set to None if job (nullable) is None
        # and __fields_set__ contains the field
        if self.job is None and "job" in self.__fields_set__:
            _dict['job'] = None

        # set to None if last_message (nullable) is None
        # and __fields_set__ contains the field
        if self.last_message is None and "last_message" in self.__fields_set__:
            _dict['last_message'] = None

        # set to None if last_message_at (nullable) is None
        # and __fields_set__ contains the field
        if self.last_message_at is None and "last_message_at" in self.__fields_set__:
            _dict['last_message_at'] = None

        # set to None if tz (nullable) is None
        # and __fields_set__ contains the field
        if self.tz is None and "tz" in self.__fields_set__:
            _dict['tz'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DuetPrinterBackend:
        """Create an instance of DuetPrinterBackend from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DuetPrinterBackend.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in DuetPrinterBackend) in the input: " + obj)

        _obj = DuetPrinterBackend.parse_obj({
            "id": obj.get("id"),
            "deleted": obj.get("deleted"),
            "deleted_by_cascade": obj.get("deleted_by_cascade"),
            "network": obj.get("network"),
            "job": obj.get("job"),
            "status": obj.get("status"),
            "last_message": obj.get("last_message"),
            "last_message_at": obj.get("last_message_at"),
            "tz": obj.get("tz"),
            "modified": obj.get("modified"),
            "printer": obj.get("printer")
        })
        return _obj


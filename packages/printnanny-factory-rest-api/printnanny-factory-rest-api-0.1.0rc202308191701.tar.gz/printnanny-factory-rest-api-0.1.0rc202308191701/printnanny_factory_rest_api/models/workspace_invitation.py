# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class WorkspaceInvitation(BaseModel):
    """
    WorkspaceInvitation
    """
    id: StrictStr = Field(...)
    invitee: Optional[StrictStr] = Field(...)
    invited_by: StrictStr = Field(...)
    workspace: StrictStr = Field(...)
    guid: StrictStr = Field(...)
    invitee_identifier: constr(strict=True, max_length=1000) = Field(..., description="The contact identifier for the invitee, email, phone number, social media handle, etc.")
    created: datetime = Field(...)
    modified: datetime = Field(...)
    __properties = ["id", "invitee", "invited_by", "workspace", "guid", "invitee_identifier", "created", "modified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkspaceInvitation:
        """Create an instance of WorkspaceInvitation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "invitee",
                            "invited_by",
                            "workspace",
                            "guid",
                            "created",
                            "modified",
                          },
                          exclude_none=True)
        # set to None if invitee (nullable) is None
        # and __fields_set__ contains the field
        if self.invitee is None and "invitee" in self.__fields_set__:
            _dict['invitee'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkspaceInvitation:
        """Create an instance of WorkspaceInvitation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkspaceInvitation.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in WorkspaceInvitation) in the input: " + obj)

        _obj = WorkspaceInvitation.parse_obj({
            "id": obj.get("id"),
            "invitee": obj.get("invitee"),
            "invited_by": obj.get("invited_by"),
            "workspace": obj.get("workspace"),
            "guid": obj.get("guid"),
            "invitee_identifier": obj.get("invitee_identifier"),
            "created": obj.get("created"),
            "modified": obj.get("modified")
        })
        return _obj


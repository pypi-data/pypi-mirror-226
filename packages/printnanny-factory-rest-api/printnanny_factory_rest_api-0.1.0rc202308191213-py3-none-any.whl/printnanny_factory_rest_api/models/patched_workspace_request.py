# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictBytes, StrictStr, constr, validator

class PatchedWorkspaceRequest(BaseModel):
    """
    PatchedWorkspaceRequest
    """
    name: Optional[constr(strict=True, max_length=200, min_length=1)] = Field(None, description="The name of the organization")
    domain: Optional[constr(strict=True, max_length=255)] = None
    domain_autojoin: Optional[StrictBool] = None
    slug: Optional[constr(strict=True, max_length=200, min_length=1)] = Field(None, description="The name in all lowercase, suitable for URL identification")
    icon: Optional[Union[StrictBytes, StrictStr]] = None
    __properties = ["name", "domain", "domain_autojoin", "slug", "icon"]

    @validator('slug')
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedWorkspaceRequest:
        """Create an instance of PatchedWorkspaceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if icon (nullable) is None
        # and __fields_set__ contains the field
        if self.icon is None and "icon" in self.__fields_set__:
            _dict['icon'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedWorkspaceRequest:
        """Create an instance of PatchedWorkspaceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedWorkspaceRequest.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PatchedWorkspaceRequest) in the input: " + obj)

        _obj = PatchedWorkspaceRequest.parse_obj({
            "name": obj.get("name"),
            "domain": obj.get("domain"),
            "domain_autojoin": obj.get("domain_autojoin"),
            "slug": obj.get("slug"),
            "icon": obj.get("icon")
        })
        return _obj


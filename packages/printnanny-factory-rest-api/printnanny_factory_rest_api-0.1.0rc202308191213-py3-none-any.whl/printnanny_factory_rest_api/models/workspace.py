# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from printnanny_factory_rest_api.models.user import User
from printnanny_factory_rest_api.models.workspace_invitation import WorkspaceInvitation
from printnanny_factory_rest_api.models.workspace_owner import WorkspaceOwner

class Workspace(BaseModel):
    """
    Workspace
    """
    id: StrictStr = Field(...)
    name: constr(strict=True, max_length=200) = Field(..., description="The name of the organization")
    domain: Optional[constr(strict=True, max_length=255)] = None
    domain_autojoin: Optional[StrictBool] = None
    url: StrictStr = Field(...)
    slug: constr(strict=True, max_length=200) = Field(..., description="The name in all lowercase, suitable for URL identification")
    users: conlist(User) = Field(...)
    icon: Optional[StrictStr] = None
    owner: WorkspaceOwner = Field(...)
    pending_invites: conlist(WorkspaceInvitation) = Field(...)
    created: datetime = Field(...)
    modified: datetime = Field(...)
    __properties = ["id", "name", "domain", "domain_autojoin", "url", "slug", "users", "icon", "owner", "pending_invites", "created", "modified"]

    @validator('slug')
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Workspace:
        """Create an instance of Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "url",
                            "users",
                            "owner",
                            "pending_invites",
                            "created",
                            "modified",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pending_invites (list)
        _items = []
        if self.pending_invites:
            for _item in self.pending_invites:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pending_invites'] = _items
        # set to None if icon (nullable) is None
        # and __fields_set__ contains the field
        if self.icon is None and "icon" in self.__fields_set__:
            _dict['icon'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Workspace:
        """Create an instance of Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Workspace.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Workspace) in the input: " + obj)

        _obj = Workspace.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "domain": obj.get("domain"),
            "domain_autojoin": obj.get("domain_autojoin"),
            "url": obj.get("url"),
            "slug": obj.get("slug"),
            "users": [User.from_dict(_item) for _item in obj.get("users")] if obj.get("users") is not None else None,
            "icon": obj.get("icon"),
            "owner": WorkspaceOwner.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "pending_invites": [WorkspaceInvitation.from_dict(_item) for _item in obj.get("pending_invites")] if obj.get("pending_invites") is not None else None,
            "created": obj.get("created"),
            "modified": obj.get("modified")
        })
        return _obj


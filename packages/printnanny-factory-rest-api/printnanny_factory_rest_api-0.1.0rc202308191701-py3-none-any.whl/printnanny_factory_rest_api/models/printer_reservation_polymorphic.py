# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import printnanny_factory_rest_api.models

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr

class PrinterReservationPolymorphic(BaseModel):
    """
    PrinterReservationPolymorphic
    """
    created: datetime = Field(...)
    created_by: StrictStr = Field(...)
    deleted: Optional[datetime] = Field(...)
    deleted_by_cascade: StrictBool = Field(...)
    end_dt: datetime = Field(...)
    id: StrictStr = Field(...)
    notes: Optional[StrictStr] = None
    polymorphic_ctype: Optional[StrictInt] = Field(...)
    printer: StrictStr = Field(...)
    start_dt: datetime = Field(...)
    title: constr(strict=True, max_length=255) = Field(...)
    workspace: StrictStr = Field(...)
    __properties = ["created", "created_by", "deleted", "deleted_by_cascade", "end_dt", "id", "notes", "polymorphic_ctype", "printer", "start_dt", "title", "workspace"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    # JSON field name that stores the object type
    __discriminator_property_name = 'resourcetype'

    # discriminator mappings
    __discriminator_value_class_map = {
        'MaintenanceJob': 'MaintenanceJobTyped',
        'PrintJob': 'PrintJobTyped',
        'PrinterReservation': 'PrinterReservationTyped'
    }

    @classmethod
    def get_discriminator_value(cls, obj: dict) -> str:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Union(MaintenanceJob, MaintenanceJobTyped, PrintJob, PrintJobTyped, PrinterReservation, PrinterReservationTyped):
        """Create an instance of PrinterReservationPolymorphic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "created",
                            "deleted",
                            "deleted_by_cascade",
                            "id",
                            "polymorphic_ctype",
                          },
                          exclude_none=True)
        # set to None if deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted is None and "deleted" in self.__fields_set__:
            _dict['deleted'] = None

        # set to None if polymorphic_ctype (nullable) is None
        # and __fields_set__ contains the field
        if self.polymorphic_ctype is None and "polymorphic_ctype" in self.__fields_set__:
            _dict['polymorphic_ctype'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Union(MaintenanceJob, MaintenanceJobTyped, PrintJob, PrintJobTyped, PrinterReservation, PrinterReservationTyped):
        """Create an instance of PrinterReservationPolymorphic from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = getattr(printnanny_factory_rest_api.models, object_type)
            return klass.from_dict(obj)
        else:
            raise ValueError("PrinterReservationPolymorphic failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


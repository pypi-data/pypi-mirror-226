# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from printnanny_factory_rest_api.models.authorization_grant_type_enum import AuthorizationGrantTypeEnum
from printnanny_factory_rest_api.models.client_type_enum import ClientTypeEnum

class Oauth2ApplicationRequest(BaseModel):
    """
    Oauth2ApplicationRequest
    """
    client_id: Optional[constr(strict=True, max_length=100, min_length=1)] = None
    client_secret: Optional[constr(strict=True, max_length=255)] = Field(None, description="Hashed on Save. Copy it now if this is a new secret.")
    default_scopes: Optional[constr(strict=True, min_length=1)] = None
    authorization_grant_type: AuthorizationGrantTypeEnum = Field(...)
    client_type: ClientTypeEnum = Field(...)
    name: Optional[constr(strict=True, max_length=255)] = None
    workspace: Optional[StrictStr] = None
    printer: Optional[StrictStr] = None
    __properties = ["client_id", "client_secret", "default_scopes", "authorization_grant_type", "client_type", "name", "workspace", "printer"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Oauth2ApplicationRequest:
        """Create an instance of Oauth2ApplicationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if default_scopes (nullable) is None
        # and __fields_set__ contains the field
        if self.default_scopes is None and "default_scopes" in self.__fields_set__:
            _dict['default_scopes'] = None

        # set to None if workspace (nullable) is None
        # and __fields_set__ contains the field
        if self.workspace is None and "workspace" in self.__fields_set__:
            _dict['workspace'] = None

        # set to None if printer (nullable) is None
        # and __fields_set__ contains the field
        if self.printer is None and "printer" in self.__fields_set__:
            _dict['printer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Oauth2ApplicationRequest:
        """Create an instance of Oauth2ApplicationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Oauth2ApplicationRequest.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Oauth2ApplicationRequest) in the input: " + obj)

        _obj = Oauth2ApplicationRequest.parse_obj({
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "default_scopes": obj.get("default_scopes"),
            "authorization_grant_type": obj.get("authorization_grant_type"),
            "client_type": obj.get("client_type"),
            "name": obj.get("name"),
            "workspace": obj.get("workspace"),
            "printer": obj.get("printer")
        })
        return _obj


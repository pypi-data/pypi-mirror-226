# coding: utf-8

"""
    PrintNanny Factory API Documentation

    Documentation of API endpoints of printnanny-factory  # noqa: E501

    The version of the OpenAPI document: 0.1.0 
    Contact: leigh@printnanny.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from printnanny_factory_rest_api.models.print_job import PrintJob

class PrintJobTyped(PrintJob):
    """
    PrintJobTyped
    """
    resourcetype: StrictStr = Field(...)
    __properties = ["resourcetype", "created", "created_by", "deleted", "deleted_by_cascade", "end_dt", "id", "notes", "polymorphic_ctype", "printer", "start_dt", "title", "workspace", "progress", "estimated_print_seconds", "clear_dt", "status", "batch"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrintJobTyped:
        """Create an instance of PrintJobTyped from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted is None and "deleted" in self.__fields_set__:
            _dict['deleted'] = None

        # set to None if polymorphic_ctype (nullable) is None
        # and __fields_set__ contains the field
        if self.polymorphic_ctype is None and "polymorphic_ctype" in self.__fields_set__:
            _dict['polymorphic_ctype'] = None

        # set to None if estimated_print_seconds (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_print_seconds is None and "estimated_print_seconds" in self.__fields_set__:
            _dict['estimated_print_seconds'] = None

        # set to None if clear_dt (nullable) is None
        # and __fields_set__ contains the field
        if self.clear_dt is None and "clear_dt" in self.__fields_set__:
            _dict['clear_dt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrintJobTyped:
        """Create an instance of PrintJobTyped from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PrintJobTyped.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PrintJobTyped) in the input: " + obj)

        _obj = PrintJobTyped.parse_obj({
            "resourcetype": obj.get("resourcetype"),
            "created": obj.get("created"),
            "created_by": obj.get("created_by"),
            "deleted": obj.get("deleted"),
            "deleted_by_cascade": obj.get("deleted_by_cascade"),
            "end_dt": obj.get("end_dt"),
            "id": obj.get("id"),
            "notes": obj.get("notes"),
            "polymorphic_ctype": obj.get("polymorphic_ctype"),
            "printer": obj.get("printer"),
            "start_dt": obj.get("start_dt"),
            "title": obj.get("title"),
            "workspace": obj.get("workspace"),
            "progress": obj.get("progress"),
            "estimated_print_seconds": obj.get("estimated_print_seconds"),
            "clear_dt": obj.get("clear_dt"),
            "status": obj.get("status"),
            "batch": obj.get("batch")
        })
        return _obj


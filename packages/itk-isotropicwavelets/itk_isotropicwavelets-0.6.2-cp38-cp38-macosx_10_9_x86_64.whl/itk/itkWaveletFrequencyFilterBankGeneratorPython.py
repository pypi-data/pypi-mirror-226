# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkWaveletFrequencyFilterBankGeneratorPython
else:
    import _itkWaveletFrequencyFilterBankGeneratorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkWaveletFrequencyFilterBankGeneratorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkWaveletFrequencyFilterBankGeneratorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkHeldIsotropicWaveletPython
import itk.itkIsotropicWaveletFrequencyFunctionPython
import itk.itkIsotropicFrequencyFunctionPython
import itk.itkFrequencyFunctionPython
import itk.itkShannonIsotropicWaveletPython
import itk.itkVowIsotropicWaveletPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSimoncelliIsotropicWaveletPython
import itk.itkGenerateImageSourcePython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython

def itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2)
itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldD2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2)
itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2HeldF2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2)
itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonD2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2)
itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2ShannonF2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2)
itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliD2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2)
itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2SimoncelliF2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2)
itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowD2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2)
itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD2VowF2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3)
itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldD3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3)
itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3HeldF3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3)
itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonD3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3)
itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3ShannonF3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3)
itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliD3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3)
itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3SimoncelliF3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3)
itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowD3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3)
itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD3VowF3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4)
itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldD4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4)
itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4HeldF4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4)
itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonD4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4)
itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4ShannonF4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4)
itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliD4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4)
itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4SimoncelliF4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4)
itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowD4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4)
itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICD4VowF4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2)
itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldD2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2)
itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2HeldF2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2)
itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonD2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2)
itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2ShannonF2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2)
itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliD2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2)
itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2SimoncelliF2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2)
itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowD2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_New():
    return itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2.New()

class itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_swigregister(itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2)
itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF2VowF2VD2_cast


def itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3)
itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldD3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3)
itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3HeldF3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3)
itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonD3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3)
itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3ShannonF3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3)
itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliD3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3)
itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3SimoncelliF3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3)
itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowD3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_New():
    return itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3.New()

class itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_swigregister(itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3)
itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF3VowF3VD3_cast


def itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4)
itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldD4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4)
itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4HeldF4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4)
itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonD4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4)
itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4ShannonF4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4)
itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliD4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4)
itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4SimoncelliF4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4)
itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowD4VD4_cast


def itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_New():
    return itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4.New()

class itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_Clone)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_SetHighPassSubBands)
    GetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetInverseBank)
    SetInverseBank = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_SetInverseBank)
    InverseBankOn = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_InverseBankOn)
    InverseBankOff = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_InverseBankOff)
    GetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetLevel)
    SetLevel = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_SetLevel)
    GetModifiableWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetModifiableWaveletFunction)
    GetWaveletFunction = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetWaveletFunction)
    GetOutputLowPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetOutputLowPass)
    GetOutputHighPass = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetOutputHighPass)
    GetOutputSubBand = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetOutputSubBand)
    GetOutputsAll = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetOutputsAll)
    GetOutputsHighPassBands = _swig_new_instance_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_GetOutputsHighPassBands)
    OutputPixelTypeIsComplexAndFloatCheck = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_OutputPixelTypeIsComplexAndFloatCheck
    
    __swig_destroy__ = _itkWaveletFrequencyFilterBankGeneratorPython.delete_itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4

        Create a new object of the class itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4 in _itkWaveletFrequencyFilterBankGeneratorPython:
_itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_swigregister(itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4)
itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4___New_orig__ = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4___New_orig__
itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_cast = _itkWaveletFrequencyFilterBankGeneratorPython.itkWaveletFrequencyFilterBankGeneratorICF4VowF4VD4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def wavelet_frequency_filter_bank_generator(*args,  high_pass_sub_bands: int=..., inverse_bank: bool=..., level: int=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for WaveletFrequencyFilterBankGenerator"""
    import itk

    kwarg_typehints = { 'high_pass_sub_bands':high_pass_sub_bands,'inverse_bank':inverse_bank,'level':level,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.WaveletFrequencyFilterBankGenerator.New(*args, **kwargs)
    return instance.__internal_call__()

def wavelet_frequency_filter_bank_generator_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.WaveletFrequencyFilterBankGenerator
    wavelet_frequency_filter_bank_generator.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    wavelet_frequency_filter_bank_generator.__doc__ = filter_object.__doc__





# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFrequencyExpandImageFilterPython
else:
    import _itkFrequencyExpandImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFrequencyExpandImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFrequencyExpandImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython

def itkFrequencyExpandImageFilterID2_New():
    return itkFrequencyExpandImageFilterID2.New()

class itkFrequencyExpandImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkFrequencyExpandImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandImageFilterPython.delete_itkFrequencyExpandImageFilterID2
    cast = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandImageFilterID2

        Create a new object of the class itkFrequencyExpandImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandImageFilterID2 in _itkFrequencyExpandImageFilterPython:
_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_swigregister(itkFrequencyExpandImageFilterID2)
itkFrequencyExpandImageFilterID2___New_orig__ = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2___New_orig__
itkFrequencyExpandImageFilterID2_cast = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID2_cast


def itkFrequencyExpandImageFilterID3_New():
    return itkFrequencyExpandImageFilterID3.New()

class itkFrequencyExpandImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkFrequencyExpandImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandImageFilterPython.delete_itkFrequencyExpandImageFilterID3
    cast = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandImageFilterID3

        Create a new object of the class itkFrequencyExpandImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandImageFilterID3 in _itkFrequencyExpandImageFilterPython:
_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_swigregister(itkFrequencyExpandImageFilterID3)
itkFrequencyExpandImageFilterID3___New_orig__ = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3___New_orig__
itkFrequencyExpandImageFilterID3_cast = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID3_cast


def itkFrequencyExpandImageFilterID4_New():
    return itkFrequencyExpandImageFilterID4.New()

class itkFrequencyExpandImageFilterID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkFrequencyExpandImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandImageFilterPython.delete_itkFrequencyExpandImageFilterID4
    cast = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandImageFilterID4

        Create a new object of the class itkFrequencyExpandImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandImageFilterID4 in _itkFrequencyExpandImageFilterPython:
_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_swigregister(itkFrequencyExpandImageFilterID4)
itkFrequencyExpandImageFilterID4___New_orig__ = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4___New_orig__
itkFrequencyExpandImageFilterID4_cast = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterID4_cast


def itkFrequencyExpandImageFilterIF2_New():
    return itkFrequencyExpandImageFilterIF2.New()

class itkFrequencyExpandImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkFrequencyExpandImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandImageFilterPython.delete_itkFrequencyExpandImageFilterIF2
    cast = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandImageFilterIF2

        Create a new object of the class itkFrequencyExpandImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandImageFilterIF2 in _itkFrequencyExpandImageFilterPython:
_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_swigregister(itkFrequencyExpandImageFilterIF2)
itkFrequencyExpandImageFilterIF2___New_orig__ = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2___New_orig__
itkFrequencyExpandImageFilterIF2_cast = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF2_cast


def itkFrequencyExpandImageFilterIF3_New():
    return itkFrequencyExpandImageFilterIF3.New()

class itkFrequencyExpandImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkFrequencyExpandImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandImageFilterPython.delete_itkFrequencyExpandImageFilterIF3
    cast = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandImageFilterIF3

        Create a new object of the class itkFrequencyExpandImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandImageFilterIF3 in _itkFrequencyExpandImageFilterPython:
_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_swigregister(itkFrequencyExpandImageFilterIF3)
itkFrequencyExpandImageFilterIF3___New_orig__ = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3___New_orig__
itkFrequencyExpandImageFilterIF3_cast = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF3_cast


def itkFrequencyExpandImageFilterIF4_New():
    return itkFrequencyExpandImageFilterIF4.New()

class itkFrequencyExpandImageFilterIF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkFrequencyExpandImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandImageFilterPython.delete_itkFrequencyExpandImageFilterIF4
    cast = _swig_new_static_method(_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandImageFilterIF4

        Create a new object of the class itkFrequencyExpandImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandImageFilterIF4 in _itkFrequencyExpandImageFilterPython:
_itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_swigregister(itkFrequencyExpandImageFilterIF4)
itkFrequencyExpandImageFilterIF4___New_orig__ = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4___New_orig__
itkFrequencyExpandImageFilterIF4_cast = _itkFrequencyExpandImageFilterPython.itkFrequencyExpandImageFilterIF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def frequency_expand_image_filter(*args: itkt.ImageLike,  expand_factors: Union[int, Sequence[int]]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FrequencyExpandImageFilter"""
    import itk

    kwarg_typehints = { 'expand_factors':expand_factors }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.FrequencyExpandImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def frequency_expand_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.FrequencyExpandImageFilter
    frequency_expand_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    frequency_expand_image_filter.__doc__ = filter_object.__doc__





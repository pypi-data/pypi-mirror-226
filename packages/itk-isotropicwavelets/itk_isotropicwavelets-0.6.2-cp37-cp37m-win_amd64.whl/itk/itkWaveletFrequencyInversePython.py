# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkWaveletFrequencyInversePython
else:
    import _itkWaveletFrequencyInversePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkWaveletFrequencyInversePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkWaveletFrequencyInversePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterBPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython

def itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_New():
    return itkWaveletFrequencyInverseICD2ICD2HeldD2VD2.New()

class itkWaveletFrequencyInverseICD2ICD2HeldD2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD2ICD2HeldD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD2ICD2HeldD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD2ICD2HeldD2VD2

        Create a new object of the class itkWaveletFrequencyInverseICD2ICD2HeldD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD2ICD2HeldD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD2ICD2HeldD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD2ICD2HeldD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD2ICD2HeldD2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_swigregister(itkWaveletFrequencyInverseICD2ICD2HeldD2VD2)
itkWaveletFrequencyInverseICD2ICD2HeldD2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2___New_orig__
itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldD2VD2_cast


def itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_New():
    return itkWaveletFrequencyInverseICD2ICD2HeldF2VD2.New()

class itkWaveletFrequencyInverseICD2ICD2HeldF2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD2ICD2HeldF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD2ICD2HeldF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD2ICD2HeldF2VD2

        Create a new object of the class itkWaveletFrequencyInverseICD2ICD2HeldF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD2ICD2HeldF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD2ICD2HeldF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD2ICD2HeldF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD2ICD2HeldF2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_swigregister(itkWaveletFrequencyInverseICD2ICD2HeldF2VD2)
itkWaveletFrequencyInverseICD2ICD2HeldF2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2___New_orig__
itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2HeldF2VD2_cast


def itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_New():
    return itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2.New()

class itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2

        Create a new object of the class itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_swigregister(itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2)
itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2___New_orig__
itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonD2VD2_cast


def itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_New():
    return itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2.New()

class itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2

        Create a new object of the class itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_swigregister(itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2)
itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2___New_orig__
itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2ShannonF2VD2_cast


def itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_New():
    return itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2.New()

class itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2

        Create a new object of the class itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_swigregister(itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2)
itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2___New_orig__
itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliD2VD2_cast


def itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_New():
    return itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2.New()

class itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2

        Create a new object of the class itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_swigregister(itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2)
itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2___New_orig__
itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2SimoncelliF2VD2_cast


def itkWaveletFrequencyInverseICD2ICD2VowD2VD2_New():
    return itkWaveletFrequencyInverseICD2ICD2VowD2VD2.New()

class itkWaveletFrequencyInverseICD2ICD2VowD2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD2ICD2VowD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD2ICD2VowD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD2ICD2VowD2VD2

        Create a new object of the class itkWaveletFrequencyInverseICD2ICD2VowD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD2ICD2VowD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD2ICD2VowD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD2ICD2VowD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD2ICD2VowD2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_swigregister(itkWaveletFrequencyInverseICD2ICD2VowD2VD2)
itkWaveletFrequencyInverseICD2ICD2VowD2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2___New_orig__
itkWaveletFrequencyInverseICD2ICD2VowD2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowD2VD2_cast


def itkWaveletFrequencyInverseICD2ICD2VowF2VD2_New():
    return itkWaveletFrequencyInverseICD2ICD2VowF2VD2.New()

class itkWaveletFrequencyInverseICD2ICD2VowF2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD2ICD2VowF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD2ICD2VowF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD2ICD2VowF2VD2

        Create a new object of the class itkWaveletFrequencyInverseICD2ICD2VowF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD2ICD2VowF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD2ICD2VowF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD2ICD2VowF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD2ICD2VowF2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_swigregister(itkWaveletFrequencyInverseICD2ICD2VowF2VD2)
itkWaveletFrequencyInverseICD2ICD2VowF2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2___New_orig__
itkWaveletFrequencyInverseICD2ICD2VowF2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD2ICD2VowF2VD2_cast


def itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_New():
    return itkWaveletFrequencyInverseICD3ICD3HeldD3VD3.New()

class itkWaveletFrequencyInverseICD3ICD3HeldD3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD3ICD3HeldD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD3ICD3HeldD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD3ICD3HeldD3VD3

        Create a new object of the class itkWaveletFrequencyInverseICD3ICD3HeldD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD3ICD3HeldD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD3ICD3HeldD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD3ICD3HeldD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD3ICD3HeldD3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_swigregister(itkWaveletFrequencyInverseICD3ICD3HeldD3VD3)
itkWaveletFrequencyInverseICD3ICD3HeldD3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3___New_orig__
itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldD3VD3_cast


def itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_New():
    return itkWaveletFrequencyInverseICD3ICD3HeldF3VD3.New()

class itkWaveletFrequencyInverseICD3ICD3HeldF3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD3ICD3HeldF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD3ICD3HeldF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD3ICD3HeldF3VD3

        Create a new object of the class itkWaveletFrequencyInverseICD3ICD3HeldF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD3ICD3HeldF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD3ICD3HeldF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD3ICD3HeldF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD3ICD3HeldF3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_swigregister(itkWaveletFrequencyInverseICD3ICD3HeldF3VD3)
itkWaveletFrequencyInverseICD3ICD3HeldF3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3___New_orig__
itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3HeldF3VD3_cast


def itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_New():
    return itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3.New()

class itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3

        Create a new object of the class itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_swigregister(itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3)
itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3___New_orig__
itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonD3VD3_cast


def itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_New():
    return itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3.New()

class itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3

        Create a new object of the class itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_swigregister(itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3)
itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3___New_orig__
itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3ShannonF3VD3_cast


def itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_New():
    return itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3.New()

class itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3

        Create a new object of the class itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_swigregister(itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3)
itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3___New_orig__
itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliD3VD3_cast


def itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_New():
    return itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3.New()

class itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3

        Create a new object of the class itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_swigregister(itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3)
itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3___New_orig__
itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3SimoncelliF3VD3_cast


def itkWaveletFrequencyInverseICD3ICD3VowD3VD3_New():
    return itkWaveletFrequencyInverseICD3ICD3VowD3VD3.New()

class itkWaveletFrequencyInverseICD3ICD3VowD3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD3ICD3VowD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD3ICD3VowD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD3ICD3VowD3VD3

        Create a new object of the class itkWaveletFrequencyInverseICD3ICD3VowD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD3ICD3VowD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD3ICD3VowD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD3ICD3VowD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD3ICD3VowD3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_swigregister(itkWaveletFrequencyInverseICD3ICD3VowD3VD3)
itkWaveletFrequencyInverseICD3ICD3VowD3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3___New_orig__
itkWaveletFrequencyInverseICD3ICD3VowD3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowD3VD3_cast


def itkWaveletFrequencyInverseICD3ICD3VowF3VD3_New():
    return itkWaveletFrequencyInverseICD3ICD3VowF3VD3.New()

class itkWaveletFrequencyInverseICD3ICD3VowF3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD3ICD3VowF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD3ICD3VowF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD3ICD3VowF3VD3

        Create a new object of the class itkWaveletFrequencyInverseICD3ICD3VowF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD3ICD3VowF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD3ICD3VowF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD3ICD3VowF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD3ICD3VowF3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_swigregister(itkWaveletFrequencyInverseICD3ICD3VowF3VD3)
itkWaveletFrequencyInverseICD3ICD3VowF3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3___New_orig__
itkWaveletFrequencyInverseICD3ICD3VowF3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD3ICD3VowF3VD3_cast


def itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_New():
    return itkWaveletFrequencyInverseICD4ICD4HeldD4VD4.New()

class itkWaveletFrequencyInverseICD4ICD4HeldD4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD4ICD4HeldD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD4ICD4HeldD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD4ICD4HeldD4VD4

        Create a new object of the class itkWaveletFrequencyInverseICD4ICD4HeldD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD4ICD4HeldD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD4ICD4HeldD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD4ICD4HeldD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD4ICD4HeldD4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_swigregister(itkWaveletFrequencyInverseICD4ICD4HeldD4VD4)
itkWaveletFrequencyInverseICD4ICD4HeldD4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4___New_orig__
itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldD4VD4_cast


def itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_New():
    return itkWaveletFrequencyInverseICD4ICD4HeldF4VD4.New()

class itkWaveletFrequencyInverseICD4ICD4HeldF4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD4ICD4HeldF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD4ICD4HeldF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD4ICD4HeldF4VD4

        Create a new object of the class itkWaveletFrequencyInverseICD4ICD4HeldF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD4ICD4HeldF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD4ICD4HeldF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD4ICD4HeldF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD4ICD4HeldF4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_swigregister(itkWaveletFrequencyInverseICD4ICD4HeldF4VD4)
itkWaveletFrequencyInverseICD4ICD4HeldF4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4___New_orig__
itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4HeldF4VD4_cast


def itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_New():
    return itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4.New()

class itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4

        Create a new object of the class itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_swigregister(itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4)
itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4___New_orig__
itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonD4VD4_cast


def itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_New():
    return itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4.New()

class itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4

        Create a new object of the class itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_swigregister(itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4)
itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4___New_orig__
itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4ShannonF4VD4_cast


def itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_New():
    return itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4.New()

class itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4

        Create a new object of the class itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_swigregister(itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4)
itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4___New_orig__
itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliD4VD4_cast


def itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_New():
    return itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4.New()

class itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4

        Create a new object of the class itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_swigregister(itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4)
itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4___New_orig__
itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4SimoncelliF4VD4_cast


def itkWaveletFrequencyInverseICD4ICD4VowD4VD4_New():
    return itkWaveletFrequencyInverseICD4ICD4VowD4VD4.New()

class itkWaveletFrequencyInverseICD4ICD4VowD4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD4ICD4VowD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD4ICD4VowD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD4ICD4VowD4VD4

        Create a new object of the class itkWaveletFrequencyInverseICD4ICD4VowD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD4ICD4VowD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD4ICD4VowD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD4ICD4VowD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD4ICD4VowD4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_swigregister(itkWaveletFrequencyInverseICD4ICD4VowD4VD4)
itkWaveletFrequencyInverseICD4ICD4VowD4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4___New_orig__
itkWaveletFrequencyInverseICD4ICD4VowD4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowD4VD4_cast


def itkWaveletFrequencyInverseICD4ICD4VowF4VD4_New():
    return itkWaveletFrequencyInverseICD4ICD4VowF4VD4.New()

class itkWaveletFrequencyInverseICD4ICD4VowF4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICD4ICD4VowF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICD4ICD4VowF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICD4ICD4VowF4VD4

        Create a new object of the class itkWaveletFrequencyInverseICD4ICD4VowF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICD4ICD4VowF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICD4ICD4VowF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICD4ICD4VowF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICD4ICD4VowF4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_swigregister(itkWaveletFrequencyInverseICD4ICD4VowF4VD4)
itkWaveletFrequencyInverseICD4ICD4VowF4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4___New_orig__
itkWaveletFrequencyInverseICD4ICD4VowF4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICD4ICD4VowF4VD4_cast


def itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_New():
    return itkWaveletFrequencyInverseICF2ICF2HeldD2VD2.New()

class itkWaveletFrequencyInverseICF2ICF2HeldD2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF2ICF2HeldD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF2ICF2HeldD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF2ICF2HeldD2VD2

        Create a new object of the class itkWaveletFrequencyInverseICF2ICF2HeldD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF2ICF2HeldD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF2ICF2HeldD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF2ICF2HeldD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF2ICF2HeldD2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_swigregister(itkWaveletFrequencyInverseICF2ICF2HeldD2VD2)
itkWaveletFrequencyInverseICF2ICF2HeldD2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2___New_orig__
itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldD2VD2_cast


def itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_New():
    return itkWaveletFrequencyInverseICF2ICF2HeldF2VD2.New()

class itkWaveletFrequencyInverseICF2ICF2HeldF2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF2ICF2HeldF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF2ICF2HeldF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF2ICF2HeldF2VD2

        Create a new object of the class itkWaveletFrequencyInverseICF2ICF2HeldF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF2ICF2HeldF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF2ICF2HeldF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF2ICF2HeldF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF2ICF2HeldF2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_swigregister(itkWaveletFrequencyInverseICF2ICF2HeldF2VD2)
itkWaveletFrequencyInverseICF2ICF2HeldF2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2___New_orig__
itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2HeldF2VD2_cast


def itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_New():
    return itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2.New()

class itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2

        Create a new object of the class itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_swigregister(itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2)
itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2___New_orig__
itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonD2VD2_cast


def itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_New():
    return itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2.New()

class itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2

        Create a new object of the class itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_swigregister(itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2)
itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2___New_orig__
itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2ShannonF2VD2_cast


def itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_New():
    return itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2.New()

class itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2

        Create a new object of the class itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_swigregister(itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2)
itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2___New_orig__
itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliD2VD2_cast


def itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_New():
    return itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2.New()

class itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2

        Create a new object of the class itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_swigregister(itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2)
itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2___New_orig__
itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2SimoncelliF2VD2_cast


def itkWaveletFrequencyInverseICF2ICF2VowD2VD2_New():
    return itkWaveletFrequencyInverseICF2ICF2VowD2VD2.New()

class itkWaveletFrequencyInverseICF2ICF2VowD2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF2ICF2VowD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF2ICF2VowD2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF2ICF2VowD2VD2

        Create a new object of the class itkWaveletFrequencyInverseICF2ICF2VowD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF2ICF2VowD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF2ICF2VowD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF2ICF2VowD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF2ICF2VowD2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_swigregister(itkWaveletFrequencyInverseICF2ICF2VowD2VD2)
itkWaveletFrequencyInverseICF2ICF2VowD2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2___New_orig__
itkWaveletFrequencyInverseICF2ICF2VowD2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowD2VD2_cast


def itkWaveletFrequencyInverseICF2ICF2VowF2VD2_New():
    return itkWaveletFrequencyInverseICF2ICF2VowF2VD2.New()

class itkWaveletFrequencyInverseICF2ICF2VowF2VD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF2ICF2VowF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF2ICF2VowF2VD2
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF2ICF2VowF2VD2

        Create a new object of the class itkWaveletFrequencyInverseICF2ICF2VowF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF2ICF2VowF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF2ICF2VowF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF2ICF2VowF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF2ICF2VowF2VD2 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_swigregister(itkWaveletFrequencyInverseICF2ICF2VowF2VD2)
itkWaveletFrequencyInverseICF2ICF2VowF2VD2___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2___New_orig__
itkWaveletFrequencyInverseICF2ICF2VowF2VD2_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF2ICF2VowF2VD2_cast


def itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_New():
    return itkWaveletFrequencyInverseICF3ICF3HeldD3VD3.New()

class itkWaveletFrequencyInverseICF3ICF3HeldD3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF3ICF3HeldD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF3ICF3HeldD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF3ICF3HeldD3VD3

        Create a new object of the class itkWaveletFrequencyInverseICF3ICF3HeldD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF3ICF3HeldD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF3ICF3HeldD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF3ICF3HeldD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF3ICF3HeldD3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_swigregister(itkWaveletFrequencyInverseICF3ICF3HeldD3VD3)
itkWaveletFrequencyInverseICF3ICF3HeldD3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3___New_orig__
itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldD3VD3_cast


def itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_New():
    return itkWaveletFrequencyInverseICF3ICF3HeldF3VD3.New()

class itkWaveletFrequencyInverseICF3ICF3HeldF3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF3ICF3HeldF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF3ICF3HeldF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF3ICF3HeldF3VD3

        Create a new object of the class itkWaveletFrequencyInverseICF3ICF3HeldF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF3ICF3HeldF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF3ICF3HeldF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF3ICF3HeldF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF3ICF3HeldF3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_swigregister(itkWaveletFrequencyInverseICF3ICF3HeldF3VD3)
itkWaveletFrequencyInverseICF3ICF3HeldF3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3___New_orig__
itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3HeldF3VD3_cast


def itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_New():
    return itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3.New()

class itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3

        Create a new object of the class itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_swigregister(itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3)
itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3___New_orig__
itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonD3VD3_cast


def itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_New():
    return itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3.New()

class itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3

        Create a new object of the class itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_swigregister(itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3)
itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3___New_orig__
itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3ShannonF3VD3_cast


def itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_New():
    return itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3.New()

class itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3

        Create a new object of the class itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_swigregister(itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3)
itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3___New_orig__
itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliD3VD3_cast


def itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_New():
    return itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3.New()

class itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3

        Create a new object of the class itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_swigregister(itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3)
itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3___New_orig__
itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3SimoncelliF3VD3_cast


def itkWaveletFrequencyInverseICF3ICF3VowD3VD3_New():
    return itkWaveletFrequencyInverseICF3ICF3VowD3VD3.New()

class itkWaveletFrequencyInverseICF3ICF3VowD3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF3ICF3VowD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF3ICF3VowD3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF3ICF3VowD3VD3

        Create a new object of the class itkWaveletFrequencyInverseICF3ICF3VowD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF3ICF3VowD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF3ICF3VowD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF3ICF3VowD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF3ICF3VowD3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_swigregister(itkWaveletFrequencyInverseICF3ICF3VowD3VD3)
itkWaveletFrequencyInverseICF3ICF3VowD3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3___New_orig__
itkWaveletFrequencyInverseICF3ICF3VowD3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowD3VD3_cast


def itkWaveletFrequencyInverseICF3ICF3VowF3VD3_New():
    return itkWaveletFrequencyInverseICF3ICF3VowF3VD3.New()

class itkWaveletFrequencyInverseICF3ICF3VowF3VD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF3ICF3VowF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF3ICF3VowF3VD3
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF3ICF3VowF3VD3

        Create a new object of the class itkWaveletFrequencyInverseICF3ICF3VowF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF3ICF3VowF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF3ICF3VowF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF3ICF3VowF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF3ICF3VowF3VD3 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_swigregister(itkWaveletFrequencyInverseICF3ICF3VowF3VD3)
itkWaveletFrequencyInverseICF3ICF3VowF3VD3___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3___New_orig__
itkWaveletFrequencyInverseICF3ICF3VowF3VD3_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF3ICF3VowF3VD3_cast


def itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_New():
    return itkWaveletFrequencyInverseICF4ICF4HeldD4VD4.New()

class itkWaveletFrequencyInverseICF4ICF4HeldD4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF4ICF4HeldD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF4ICF4HeldD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF4ICF4HeldD4VD4

        Create a new object of the class itkWaveletFrequencyInverseICF4ICF4HeldD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF4ICF4HeldD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF4ICF4HeldD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF4ICF4HeldD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF4ICF4HeldD4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_swigregister(itkWaveletFrequencyInverseICF4ICF4HeldD4VD4)
itkWaveletFrequencyInverseICF4ICF4HeldD4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4___New_orig__
itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldD4VD4_cast


def itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_New():
    return itkWaveletFrequencyInverseICF4ICF4HeldF4VD4.New()

class itkWaveletFrequencyInverseICF4ICF4HeldF4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF4ICF4HeldF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF4ICF4HeldF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF4ICF4HeldF4VD4

        Create a new object of the class itkWaveletFrequencyInverseICF4ICF4HeldF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF4ICF4HeldF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF4ICF4HeldF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF4ICF4HeldF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF4ICF4HeldF4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_swigregister(itkWaveletFrequencyInverseICF4ICF4HeldF4VD4)
itkWaveletFrequencyInverseICF4ICF4HeldF4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4___New_orig__
itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4HeldF4VD4_cast


def itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_New():
    return itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4.New()

class itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4

        Create a new object of the class itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_swigregister(itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4)
itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4___New_orig__
itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonD4VD4_cast


def itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_New():
    return itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4.New()

class itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4

        Create a new object of the class itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_swigregister(itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4)
itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4___New_orig__
itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4ShannonF4VD4_cast


def itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_New():
    return itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4.New()

class itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4

        Create a new object of the class itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_swigregister(itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4)
itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4___New_orig__
itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliD4VD4_cast


def itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_New():
    return itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4.New()

class itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4

        Create a new object of the class itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_swigregister(itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4)
itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4___New_orig__
itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4SimoncelliF4VD4_cast


def itkWaveletFrequencyInverseICF4ICF4VowD4VD4_New():
    return itkWaveletFrequencyInverseICF4ICF4VowD4VD4.New()

class itkWaveletFrequencyInverseICF4ICF4VowD4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF4ICF4VowD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF4ICF4VowD4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF4ICF4VowD4VD4

        Create a new object of the class itkWaveletFrequencyInverseICF4ICF4VowD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF4ICF4VowD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF4ICF4VowD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF4ICF4VowD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF4ICF4VowD4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_swigregister(itkWaveletFrequencyInverseICF4ICF4VowD4VD4)
itkWaveletFrequencyInverseICF4ICF4VowD4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4___New_orig__
itkWaveletFrequencyInverseICF4ICF4VowD4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowD4VD4_cast


def itkWaveletFrequencyInverseICF4ICF4VowF4VD4_New():
    return itkWaveletFrequencyInverseICF4ICF4VowF4VD4.New()

class itkWaveletFrequencyInverseICF4ICF4VowF4VD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkWaveletFrequencyInverseICF4ICF4VowF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_Clone)
    SetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_SetLevels)
    GetLevels = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_GetLevels)
    SetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_SetHighPassSubBands)
    GetHighPassSubBands = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_GetHighPassSubBands)
    GetTotalInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_GetTotalInputs)
    GetScaleFactor = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_GetScaleFactor)
    GetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_GetApplyReconstructionFactors)
    SetApplyReconstructionFactors = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_SetApplyReconstructionFactors)
    ApplyReconstructionFactorsOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_ApplyReconstructionFactorsOn)
    ApplyReconstructionFactorsOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_ApplyReconstructionFactorsOff)
    GetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_GetUseWaveletFilterBankPyramid)
    SetUseWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_SetUseWaveletFilterBankPyramid)
    UseWaveletFilterBankPyramidOn = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_UseWaveletFilterBankPyramidOn)
    UseWaveletFilterBankPyramidOff = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_UseWaveletFilterBankPyramidOff)
    SetWaveletFilterBankPyramid = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_SetWaveletFilterBankPyramid)
    InputIndexToLevelBand = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_InputIndexToLevelBand)
    SetInputs = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_SetInputs)
    SetInputLowPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_SetInputLowPass)
    SetInputsHighPass = _swig_new_instance_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_SetInputsHighPass)
    __swig_destroy__ = _itkWaveletFrequencyInversePython.delete_itkWaveletFrequencyInverseICF4ICF4VowF4VD4
    cast = _swig_new_static_method(_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkWaveletFrequencyInverseICF4ICF4VowF4VD4

        Create a new object of the class itkWaveletFrequencyInverseICF4ICF4VowF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWaveletFrequencyInverseICF4ICF4VowF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWaveletFrequencyInverseICF4ICF4VowF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWaveletFrequencyInverseICF4ICF4VowF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWaveletFrequencyInverseICF4ICF4VowF4VD4 in _itkWaveletFrequencyInversePython:
_itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_swigregister(itkWaveletFrequencyInverseICF4ICF4VowF4VD4)
itkWaveletFrequencyInverseICF4ICF4VowF4VD4___New_orig__ = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4___New_orig__
itkWaveletFrequencyInverseICF4ICF4VowF4VD4_cast = _itkWaveletFrequencyInversePython.itkWaveletFrequencyInverseICF4ICF4VowF4VD4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def wavelet_frequency_inverse(*args: itkt.ImageLike,  levels: int=..., high_pass_sub_bands: int=..., apply_reconstruction_factors: bool=..., use_wavelet_filter_bank_pyramid: bool=..., wavelet_filter_bank_pyramid=..., inputs=..., input_low_pass=..., inputs_high_pass=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for WaveletFrequencyInverse"""
    import itk

    kwarg_typehints = { 'levels':levels,'high_pass_sub_bands':high_pass_sub_bands,'apply_reconstruction_factors':apply_reconstruction_factors,'use_wavelet_filter_bank_pyramid':use_wavelet_filter_bank_pyramid,'wavelet_filter_bank_pyramid':wavelet_filter_bank_pyramid,'inputs':inputs,'input_low_pass':input_low_pass,'inputs_high_pass':inputs_high_pass }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.WaveletFrequencyInverse.New(*args, **kwargs)
    return instance.__internal_call__()

def wavelet_frequency_inverse_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.WaveletFrequencyInverse
    wavelet_frequency_inverse.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    wavelet_frequency_inverse.__doc__ = filter_object.__doc__





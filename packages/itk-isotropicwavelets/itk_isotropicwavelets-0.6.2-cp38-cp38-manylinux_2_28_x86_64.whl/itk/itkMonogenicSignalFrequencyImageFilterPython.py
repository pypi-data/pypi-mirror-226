# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMonogenicSignalFrequencyImageFilterPython
else:
    import _itkMonogenicSignalFrequencyImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMonogenicSignalFrequencyImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMonogenicSignalFrequencyImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageSourceCommonPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
class itkImageSourceVICD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD2_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD2_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD2_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD2_MakeOutput)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageSourceVICD2
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD2_cast)

# Register itkImageSourceVICD2 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD2_swigregister(itkImageSourceVICD2)
itkImageSourceVICD2_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD2_cast

class itkImageSourceVICD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD3_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD3_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD3_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD3_MakeOutput)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageSourceVICD3
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD3_cast)

# Register itkImageSourceVICD3 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD3_swigregister(itkImageSourceVICD3)
itkImageSourceVICD3_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD3_cast

class itkImageSourceVICD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD4_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD4_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD4_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD4_MakeOutput)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageSourceVICD4
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD4_cast)

# Register itkImageSourceVICD4 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD4_swigregister(itkImageSourceVICD4)
itkImageSourceVICD4_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICD4_cast

class itkImageSourceVICF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF2_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF2_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF2_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF2_MakeOutput)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageSourceVICF2
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF2_cast)

# Register itkImageSourceVICF2 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF2_swigregister(itkImageSourceVICF2)
itkImageSourceVICF2_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF2_cast

class itkImageSourceVICF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF3_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF3_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF3_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF3_MakeOutput)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageSourceVICF3
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF3_cast)

# Register itkImageSourceVICF3 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF3_swigregister(itkImageSourceVICF3)
itkImageSourceVICF3_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF3_cast

class itkImageSourceVICF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF4_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF4_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF4_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF4_MakeOutput)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageSourceVICF4
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF4_cast)

# Register itkImageSourceVICF4 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF4_swigregister(itkImageSourceVICF4)
itkImageSourceVICF4_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageSourceVICF4_cast

class itkImageToImageFilterICD2VICD2(itkImageSourceVICD2):
    r"""Proxy of C++ itkImageToImageFilterICD2VICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_SetInput)
    GetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_GetDirectionTolerance)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageToImageFilterICD2VICD2
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_cast)

# Register itkImageToImageFilterICD2VICD2 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_swigregister(itkImageToImageFilterICD2VICD2)
itkImageToImageFilterICD2VICD2_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD2VICD2_cast

class itkImageToImageFilterICD3VICD3(itkImageSourceVICD3):
    r"""Proxy of C++ itkImageToImageFilterICD3VICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_SetInput)
    GetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_GetDirectionTolerance)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageToImageFilterICD3VICD3
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_cast)

# Register itkImageToImageFilterICD3VICD3 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_swigregister(itkImageToImageFilterICD3VICD3)
itkImageToImageFilterICD3VICD3_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD3VICD3_cast

class itkImageToImageFilterICD4VICD4(itkImageSourceVICD4):
    r"""Proxy of C++ itkImageToImageFilterICD4VICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_SetInput)
    GetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_GetInput)
    PushBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_GetDirectionTolerance)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageToImageFilterICD4VICD4
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_cast)

# Register itkImageToImageFilterICD4VICD4 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_swigregister(itkImageToImageFilterICD4VICD4)
itkImageToImageFilterICD4VICD4_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICD4VICD4_cast

class itkImageToImageFilterICF2VICF2(itkImageSourceVICF2):
    r"""Proxy of C++ itkImageToImageFilterICF2VICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_GetDirectionTolerance)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageToImageFilterICF2VICF2
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_cast)

# Register itkImageToImageFilterICF2VICF2 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_swigregister(itkImageToImageFilterICF2VICF2)
itkImageToImageFilterICF2VICF2_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF2VICF2_cast

class itkImageToImageFilterICF3VICF3(itkImageSourceVICF3):
    r"""Proxy of C++ itkImageToImageFilterICF3VICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_GetDirectionTolerance)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageToImageFilterICF3VICF3
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_cast)

# Register itkImageToImageFilterICF3VICF3 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_swigregister(itkImageToImageFilterICF3VICF3)
itkImageToImageFilterICF3VICF3_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF3VICF3_cast

class itkImageToImageFilterICF4VICF4(itkImageSourceVICF4):
    r"""Proxy of C++ itkImageToImageFilterICF4VICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_SetInput)
    GetInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_GetInput)
    PushBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_GetDirectionTolerance)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkImageToImageFilterICF4VICF4
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_cast)

# Register itkImageToImageFilterICF4VICF4 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_swigregister(itkImageToImageFilterICF4VICF4)
itkImageToImageFilterICF4VICF4_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkImageToImageFilterICF4VICF4_cast


def itkMonogenicSignalFrequencyImageFilterICD2_New():
    return itkMonogenicSignalFrequencyImageFilterICD2.New()

class itkMonogenicSignalFrequencyImageFilterICD2(itkImageToImageFilterICD2VICD2):
    r"""Proxy of C++ itkMonogenicSignalFrequencyImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2_Clone)
    InputPixelTypeIsComplexAndFloatCheck = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2_InputPixelTypeIsComplexAndFloatCheck
    
    GetModifiableEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2_GetEvaluator)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkMonogenicSignalFrequencyImageFilterICD2
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2_cast)

    def New(*args, **kargs):
        """New() -> itkMonogenicSignalFrequencyImageFilterICD2

        Create a new object of the class itkMonogenicSignalFrequencyImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMonogenicSignalFrequencyImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMonogenicSignalFrequencyImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMonogenicSignalFrequencyImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMonogenicSignalFrequencyImageFilterICD2 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2_swigregister(itkMonogenicSignalFrequencyImageFilterICD2)
itkMonogenicSignalFrequencyImageFilterICD2___New_orig__ = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2___New_orig__
itkMonogenicSignalFrequencyImageFilterICD2_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD2_cast


def itkMonogenicSignalFrequencyImageFilterICD3_New():
    return itkMonogenicSignalFrequencyImageFilterICD3.New()

class itkMonogenicSignalFrequencyImageFilterICD3(itkImageToImageFilterICD3VICD3):
    r"""Proxy of C++ itkMonogenicSignalFrequencyImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3_Clone)
    InputPixelTypeIsComplexAndFloatCheck = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3_InputPixelTypeIsComplexAndFloatCheck
    
    GetModifiableEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3_GetEvaluator)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkMonogenicSignalFrequencyImageFilterICD3
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3_cast)

    def New(*args, **kargs):
        """New() -> itkMonogenicSignalFrequencyImageFilterICD3

        Create a new object of the class itkMonogenicSignalFrequencyImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMonogenicSignalFrequencyImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMonogenicSignalFrequencyImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMonogenicSignalFrequencyImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMonogenicSignalFrequencyImageFilterICD3 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3_swigregister(itkMonogenicSignalFrequencyImageFilterICD3)
itkMonogenicSignalFrequencyImageFilterICD3___New_orig__ = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3___New_orig__
itkMonogenicSignalFrequencyImageFilterICD3_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD3_cast


def itkMonogenicSignalFrequencyImageFilterICD4_New():
    return itkMonogenicSignalFrequencyImageFilterICD4.New()

class itkMonogenicSignalFrequencyImageFilterICD4(itkImageToImageFilterICD4VICD4):
    r"""Proxy of C++ itkMonogenicSignalFrequencyImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4_Clone)
    InputPixelTypeIsComplexAndFloatCheck = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4_InputPixelTypeIsComplexAndFloatCheck
    
    GetModifiableEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4_GetEvaluator)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkMonogenicSignalFrequencyImageFilterICD4
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4_cast)

    def New(*args, **kargs):
        """New() -> itkMonogenicSignalFrequencyImageFilterICD4

        Create a new object of the class itkMonogenicSignalFrequencyImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMonogenicSignalFrequencyImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMonogenicSignalFrequencyImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMonogenicSignalFrequencyImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMonogenicSignalFrequencyImageFilterICD4 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4_swigregister(itkMonogenicSignalFrequencyImageFilterICD4)
itkMonogenicSignalFrequencyImageFilterICD4___New_orig__ = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4___New_orig__
itkMonogenicSignalFrequencyImageFilterICD4_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICD4_cast


def itkMonogenicSignalFrequencyImageFilterICF2_New():
    return itkMonogenicSignalFrequencyImageFilterICF2.New()

class itkMonogenicSignalFrequencyImageFilterICF2(itkImageToImageFilterICF2VICF2):
    r"""Proxy of C++ itkMonogenicSignalFrequencyImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2_Clone)
    InputPixelTypeIsComplexAndFloatCheck = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2_InputPixelTypeIsComplexAndFloatCheck
    
    GetModifiableEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2_GetEvaluator)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkMonogenicSignalFrequencyImageFilterICF2
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkMonogenicSignalFrequencyImageFilterICF2

        Create a new object of the class itkMonogenicSignalFrequencyImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMonogenicSignalFrequencyImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMonogenicSignalFrequencyImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMonogenicSignalFrequencyImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMonogenicSignalFrequencyImageFilterICF2 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2_swigregister(itkMonogenicSignalFrequencyImageFilterICF2)
itkMonogenicSignalFrequencyImageFilterICF2___New_orig__ = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2___New_orig__
itkMonogenicSignalFrequencyImageFilterICF2_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF2_cast


def itkMonogenicSignalFrequencyImageFilterICF3_New():
    return itkMonogenicSignalFrequencyImageFilterICF3.New()

class itkMonogenicSignalFrequencyImageFilterICF3(itkImageToImageFilterICF3VICF3):
    r"""Proxy of C++ itkMonogenicSignalFrequencyImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3_Clone)
    InputPixelTypeIsComplexAndFloatCheck = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3_InputPixelTypeIsComplexAndFloatCheck
    
    GetModifiableEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3_GetEvaluator)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkMonogenicSignalFrequencyImageFilterICF3
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkMonogenicSignalFrequencyImageFilterICF3

        Create a new object of the class itkMonogenicSignalFrequencyImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMonogenicSignalFrequencyImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMonogenicSignalFrequencyImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMonogenicSignalFrequencyImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMonogenicSignalFrequencyImageFilterICF3 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3_swigregister(itkMonogenicSignalFrequencyImageFilterICF3)
itkMonogenicSignalFrequencyImageFilterICF3___New_orig__ = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3___New_orig__
itkMonogenicSignalFrequencyImageFilterICF3_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF3_cast


def itkMonogenicSignalFrequencyImageFilterICF4_New():
    return itkMonogenicSignalFrequencyImageFilterICF4.New()

class itkMonogenicSignalFrequencyImageFilterICF4(itkImageToImageFilterICF4VICF4):
    r"""Proxy of C++ itkMonogenicSignalFrequencyImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4_Clone)
    InputPixelTypeIsComplexAndFloatCheck = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4_InputPixelTypeIsComplexAndFloatCheck
    
    GetModifiableEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4_GetEvaluator)
    __swig_destroy__ = _itkMonogenicSignalFrequencyImageFilterPython.delete_itkMonogenicSignalFrequencyImageFilterICF4
    cast = _swig_new_static_method(_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4_cast)

    def New(*args, **kargs):
        """New() -> itkMonogenicSignalFrequencyImageFilterICF4

        Create a new object of the class itkMonogenicSignalFrequencyImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMonogenicSignalFrequencyImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMonogenicSignalFrequencyImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMonogenicSignalFrequencyImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMonogenicSignalFrequencyImageFilterICF4 in _itkMonogenicSignalFrequencyImageFilterPython:
_itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4_swigregister(itkMonogenicSignalFrequencyImageFilterICF4)
itkMonogenicSignalFrequencyImageFilterICF4___New_orig__ = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4___New_orig__
itkMonogenicSignalFrequencyImageFilterICF4_cast = _itkMonogenicSignalFrequencyImageFilterPython.itkMonogenicSignalFrequencyImageFilterICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def monogenic_signal_frequency_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MonogenicSignalFrequencyImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.MonogenicSignalFrequencyImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def monogenic_signal_frequency_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.MonogenicSignalFrequencyImageFilter
    monogenic_signal_frequency_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    monogenic_signal_frequency_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_source(*args, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageSource"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.ImageSource
    image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_source.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__





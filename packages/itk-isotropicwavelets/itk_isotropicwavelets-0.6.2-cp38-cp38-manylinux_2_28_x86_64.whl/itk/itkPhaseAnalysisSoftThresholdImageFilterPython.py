# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPhaseAnalysisSoftThresholdImageFilterPython
else:
    import _itkPhaseAnalysisSoftThresholdImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPhaseAnalysisSoftThresholdImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPhaseAnalysisSoftThresholdImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPhaseAnalysisImageFilterPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkImageToImageFilterCommonPython

def itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_New():
    return itkPhaseAnalysisSoftThresholdImageFilterVID2ID2.New()

class itkPhaseAnalysisSoftThresholdImageFilterVID2ID2(itk.itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2):
    r"""Proxy of C++ itkPhaseAnalysisSoftThresholdImageFilterVID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_Clone)
    SetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_SetApplySoftThreshold)
    GetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_GetApplySoftThreshold)
    ApplySoftThresholdOn = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_ApplySoftThresholdOn)
    ApplySoftThresholdOff = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_ApplySoftThresholdOff)
    SetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_SetNumOfSigmas)
    GetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_GetNumOfSigmas)
    GetMeanAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_GetMeanAmp)
    GetSigmaAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_GetSigmaAmp)
    GetThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_GetThreshold)
    GetOutputCosPhase = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_GetOutputCosPhase)
    __swig_destroy__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.delete_itkPhaseAnalysisSoftThresholdImageFilterVID2ID2
    cast = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisSoftThresholdImageFilterVID2ID2

        Create a new object of the class itkPhaseAnalysisSoftThresholdImageFilterVID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisSoftThresholdImageFilterVID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisSoftThresholdImageFilterVID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisSoftThresholdImageFilterVID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisSoftThresholdImageFilterVID2ID2 in _itkPhaseAnalysisSoftThresholdImageFilterPython:
_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_swigregister(itkPhaseAnalysisSoftThresholdImageFilterVID2ID2)
itkPhaseAnalysisSoftThresholdImageFilterVID2ID2___New_orig__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2___New_orig__
itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_cast = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID2ID2_cast


def itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_New():
    return itkPhaseAnalysisSoftThresholdImageFilterVID3ID3.New()

class itkPhaseAnalysisSoftThresholdImageFilterVID3ID3(itk.itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3):
    r"""Proxy of C++ itkPhaseAnalysisSoftThresholdImageFilterVID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_Clone)
    SetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_SetApplySoftThreshold)
    GetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_GetApplySoftThreshold)
    ApplySoftThresholdOn = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_ApplySoftThresholdOn)
    ApplySoftThresholdOff = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_ApplySoftThresholdOff)
    SetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_SetNumOfSigmas)
    GetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_GetNumOfSigmas)
    GetMeanAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_GetMeanAmp)
    GetSigmaAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_GetSigmaAmp)
    GetThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_GetThreshold)
    GetOutputCosPhase = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_GetOutputCosPhase)
    __swig_destroy__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.delete_itkPhaseAnalysisSoftThresholdImageFilterVID3ID3
    cast = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisSoftThresholdImageFilterVID3ID3

        Create a new object of the class itkPhaseAnalysisSoftThresholdImageFilterVID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisSoftThresholdImageFilterVID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisSoftThresholdImageFilterVID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisSoftThresholdImageFilterVID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisSoftThresholdImageFilterVID3ID3 in _itkPhaseAnalysisSoftThresholdImageFilterPython:
_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_swigregister(itkPhaseAnalysisSoftThresholdImageFilterVID3ID3)
itkPhaseAnalysisSoftThresholdImageFilterVID3ID3___New_orig__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3___New_orig__
itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_cast = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID3ID3_cast


def itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_New():
    return itkPhaseAnalysisSoftThresholdImageFilterVID4ID4.New()

class itkPhaseAnalysisSoftThresholdImageFilterVID4ID4(itk.itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4):
    r"""Proxy of C++ itkPhaseAnalysisSoftThresholdImageFilterVID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_Clone)
    SetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_SetApplySoftThreshold)
    GetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_GetApplySoftThreshold)
    ApplySoftThresholdOn = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_ApplySoftThresholdOn)
    ApplySoftThresholdOff = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_ApplySoftThresholdOff)
    SetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_SetNumOfSigmas)
    GetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_GetNumOfSigmas)
    GetMeanAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_GetMeanAmp)
    GetSigmaAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_GetSigmaAmp)
    GetThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_GetThreshold)
    GetOutputCosPhase = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_GetOutputCosPhase)
    __swig_destroy__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.delete_itkPhaseAnalysisSoftThresholdImageFilterVID4ID4
    cast = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisSoftThresholdImageFilterVID4ID4

        Create a new object of the class itkPhaseAnalysisSoftThresholdImageFilterVID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisSoftThresholdImageFilterVID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisSoftThresholdImageFilterVID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisSoftThresholdImageFilterVID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisSoftThresholdImageFilterVID4ID4 in _itkPhaseAnalysisSoftThresholdImageFilterPython:
_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_swigregister(itkPhaseAnalysisSoftThresholdImageFilterVID4ID4)
itkPhaseAnalysisSoftThresholdImageFilterVID4ID4___New_orig__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4___New_orig__
itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_cast = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVID4ID4_cast


def itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_New():
    return itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2.New()

class itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2(itk.itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2):
    r"""Proxy of C++ itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_Clone)
    SetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_SetApplySoftThreshold)
    GetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_GetApplySoftThreshold)
    ApplySoftThresholdOn = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_ApplySoftThresholdOn)
    ApplySoftThresholdOff = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_ApplySoftThresholdOff)
    SetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_SetNumOfSigmas)
    GetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_GetNumOfSigmas)
    GetMeanAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_GetMeanAmp)
    GetSigmaAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_GetSigmaAmp)
    GetThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_GetThreshold)
    GetOutputCosPhase = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_GetOutputCosPhase)
    __swig_destroy__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.delete_itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2
    cast = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2

        Create a new object of the class itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2 in _itkPhaseAnalysisSoftThresholdImageFilterPython:
_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_swigregister(itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2)
itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2___New_orig__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2___New_orig__
itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_cast = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF2IF2_cast


def itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_New():
    return itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3.New()

class itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3(itk.itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3):
    r"""Proxy of C++ itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_Clone)
    SetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_SetApplySoftThreshold)
    GetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_GetApplySoftThreshold)
    ApplySoftThresholdOn = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_ApplySoftThresholdOn)
    ApplySoftThresholdOff = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_ApplySoftThresholdOff)
    SetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_SetNumOfSigmas)
    GetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_GetNumOfSigmas)
    GetMeanAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_GetMeanAmp)
    GetSigmaAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_GetSigmaAmp)
    GetThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_GetThreshold)
    GetOutputCosPhase = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_GetOutputCosPhase)
    __swig_destroy__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.delete_itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3
    cast = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3

        Create a new object of the class itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3 in _itkPhaseAnalysisSoftThresholdImageFilterPython:
_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_swigregister(itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3)
itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3___New_orig__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3___New_orig__
itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_cast = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF3IF3_cast


def itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_New():
    return itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4.New()

class itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4(itk.itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4):
    r"""Proxy of C++ itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_Clone)
    SetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_SetApplySoftThreshold)
    GetApplySoftThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_GetApplySoftThreshold)
    ApplySoftThresholdOn = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_ApplySoftThresholdOn)
    ApplySoftThresholdOff = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_ApplySoftThresholdOff)
    SetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_SetNumOfSigmas)
    GetNumOfSigmas = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_GetNumOfSigmas)
    GetMeanAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_GetMeanAmp)
    GetSigmaAmp = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_GetSigmaAmp)
    GetThreshold = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_GetThreshold)
    GetOutputCosPhase = _swig_new_instance_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_GetOutputCosPhase)
    __swig_destroy__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.delete_itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4
    cast = _swig_new_static_method(_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4

        Create a new object of the class itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4 in _itkPhaseAnalysisSoftThresholdImageFilterPython:
_itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_swigregister(itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4)
itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4___New_orig__ = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4___New_orig__
itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_cast = _itkPhaseAnalysisSoftThresholdImageFilterPython.itkPhaseAnalysisSoftThresholdImageFilterVIF4IF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def phase_analysis_soft_threshold_image_filter(*args: itkt.ImageLike,  apply_soft_threshold: bool=..., num_of_sigmas: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for PhaseAnalysisSoftThresholdImageFilter"""
    import itk

    kwarg_typehints = { 'apply_soft_threshold':apply_soft_threshold,'num_of_sigmas':num_of_sigmas }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.PhaseAnalysisSoftThresholdImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def phase_analysis_soft_threshold_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.PhaseAnalysisSoftThresholdImageFilter
    phase_analysis_soft_threshold_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    phase_analysis_soft_threshold_image_filter.__doc__ = filter_object.__doc__





# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFrequencyShrinkImageFilterPython
else:
    import _itkFrequencyShrinkImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFrequencyShrinkImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFrequencyShrinkImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkFrequencyBandImageFilterPython
import itk.itkUnaryFrequencyDomainFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkFrequencyShrinkImageFilterICD2_New():
    return itkFrequencyShrinkImageFilterICD2.New()

class itkFrequencyShrinkImageFilterICD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkFrequencyShrinkImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_ImageTypeHasNumericTraitsCheck
    
    GetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_GetApplyBandFilter)
    SetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_SetApplyBandFilter)
    ApplyBandFilterOn = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_ApplyBandFilterOn)
    ApplyBandFilterOff = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_ApplyBandFilterOff)
    GetFrequencyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_GetFrequencyBandFilter)
    __swig_destroy__ = _itkFrequencyShrinkImageFilterPython.delete_itkFrequencyShrinkImageFilterICD2
    cast = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkImageFilterICD2

        Create a new object of the class itkFrequencyShrinkImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkImageFilterICD2 in _itkFrequencyShrinkImageFilterPython:
_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_swigregister(itkFrequencyShrinkImageFilterICD2)
itkFrequencyShrinkImageFilterICD2___New_orig__ = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2___New_orig__
itkFrequencyShrinkImageFilterICD2_cast = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD2_cast


def itkFrequencyShrinkImageFilterICD3_New():
    return itkFrequencyShrinkImageFilterICD3.New()

class itkFrequencyShrinkImageFilterICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkFrequencyShrinkImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_ImageTypeHasNumericTraitsCheck
    
    GetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_GetApplyBandFilter)
    SetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_SetApplyBandFilter)
    ApplyBandFilterOn = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_ApplyBandFilterOn)
    ApplyBandFilterOff = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_ApplyBandFilterOff)
    GetFrequencyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_GetFrequencyBandFilter)
    __swig_destroy__ = _itkFrequencyShrinkImageFilterPython.delete_itkFrequencyShrinkImageFilterICD3
    cast = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkImageFilterICD3

        Create a new object of the class itkFrequencyShrinkImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkImageFilterICD3 in _itkFrequencyShrinkImageFilterPython:
_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_swigregister(itkFrequencyShrinkImageFilterICD3)
itkFrequencyShrinkImageFilterICD3___New_orig__ = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3___New_orig__
itkFrequencyShrinkImageFilterICD3_cast = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD3_cast


def itkFrequencyShrinkImageFilterICD4_New():
    return itkFrequencyShrinkImageFilterICD4.New()

class itkFrequencyShrinkImageFilterICD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkFrequencyShrinkImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_ImageTypeHasNumericTraitsCheck
    
    GetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_GetApplyBandFilter)
    SetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_SetApplyBandFilter)
    ApplyBandFilterOn = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_ApplyBandFilterOn)
    ApplyBandFilterOff = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_ApplyBandFilterOff)
    GetFrequencyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_GetFrequencyBandFilter)
    __swig_destroy__ = _itkFrequencyShrinkImageFilterPython.delete_itkFrequencyShrinkImageFilterICD4
    cast = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkImageFilterICD4

        Create a new object of the class itkFrequencyShrinkImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkImageFilterICD4 in _itkFrequencyShrinkImageFilterPython:
_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_swigregister(itkFrequencyShrinkImageFilterICD4)
itkFrequencyShrinkImageFilterICD4___New_orig__ = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4___New_orig__
itkFrequencyShrinkImageFilterICD4_cast = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICD4_cast


def itkFrequencyShrinkImageFilterICF2_New():
    return itkFrequencyShrinkImageFilterICF2.New()

class itkFrequencyShrinkImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkFrequencyShrinkImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_ImageTypeHasNumericTraitsCheck
    
    GetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_GetApplyBandFilter)
    SetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_SetApplyBandFilter)
    ApplyBandFilterOn = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_ApplyBandFilterOn)
    ApplyBandFilterOff = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_ApplyBandFilterOff)
    GetFrequencyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_GetFrequencyBandFilter)
    __swig_destroy__ = _itkFrequencyShrinkImageFilterPython.delete_itkFrequencyShrinkImageFilterICF2
    cast = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkImageFilterICF2

        Create a new object of the class itkFrequencyShrinkImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkImageFilterICF2 in _itkFrequencyShrinkImageFilterPython:
_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_swigregister(itkFrequencyShrinkImageFilterICF2)
itkFrequencyShrinkImageFilterICF2___New_orig__ = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2___New_orig__
itkFrequencyShrinkImageFilterICF2_cast = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF2_cast


def itkFrequencyShrinkImageFilterICF3_New():
    return itkFrequencyShrinkImageFilterICF3.New()

class itkFrequencyShrinkImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkFrequencyShrinkImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_ImageTypeHasNumericTraitsCheck
    
    GetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_GetApplyBandFilter)
    SetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_SetApplyBandFilter)
    ApplyBandFilterOn = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_ApplyBandFilterOn)
    ApplyBandFilterOff = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_ApplyBandFilterOff)
    GetFrequencyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_GetFrequencyBandFilter)
    __swig_destroy__ = _itkFrequencyShrinkImageFilterPython.delete_itkFrequencyShrinkImageFilterICF3
    cast = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkImageFilterICF3

        Create a new object of the class itkFrequencyShrinkImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkImageFilterICF3 in _itkFrequencyShrinkImageFilterPython:
_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_swigregister(itkFrequencyShrinkImageFilterICF3)
itkFrequencyShrinkImageFilterICF3___New_orig__ = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3___New_orig__
itkFrequencyShrinkImageFilterICF3_cast = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF3_cast


def itkFrequencyShrinkImageFilterICF4_New():
    return itkFrequencyShrinkImageFilterICF4.New()

class itkFrequencyShrinkImageFilterICF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkFrequencyShrinkImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_ImageTypeHasNumericTraitsCheck
    
    GetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_GetApplyBandFilter)
    SetApplyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_SetApplyBandFilter)
    ApplyBandFilterOn = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_ApplyBandFilterOn)
    ApplyBandFilterOff = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_ApplyBandFilterOff)
    GetFrequencyBandFilter = _swig_new_instance_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_GetFrequencyBandFilter)
    __swig_destroy__ = _itkFrequencyShrinkImageFilterPython.delete_itkFrequencyShrinkImageFilterICF4
    cast = _swig_new_static_method(_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkImageFilterICF4

        Create a new object of the class itkFrequencyShrinkImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkImageFilterICF4 in _itkFrequencyShrinkImageFilterPython:
_itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_swigregister(itkFrequencyShrinkImageFilterICF4)
itkFrequencyShrinkImageFilterICF4___New_orig__ = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4___New_orig__
itkFrequencyShrinkImageFilterICF4_cast = _itkFrequencyShrinkImageFilterPython.itkFrequencyShrinkImageFilterICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def frequency_shrink_image_filter(*args: itkt.ImageLike,  shrink_factors: Union[Sequence[int], int]=..., shrink_factor: int=..., apply_band_filter: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FrequencyShrinkImageFilter"""
    import itk

    kwarg_typehints = { 'shrink_factors':shrink_factors,'shrink_factor':shrink_factor,'apply_band_filter':apply_band_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.FrequencyShrinkImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def frequency_shrink_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.FrequencyShrinkImageFilter
    frequency_shrink_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    frequency_shrink_image_filter.__doc__ = filter_object.__doc__





# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPhaseAnalysisImageFilterPython
else:
    import _itkPhaseAnalysisImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPhaseAnalysisImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPhaseAnalysisImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkPhaseAnalysisImageFilterVID2ID2_New():
    return itkPhaseAnalysisImageFilterVID2ID2.New()

class itkPhaseAnalysisImageFilterVID2ID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVID2ID2):
    r"""Proxy of C++ itkPhaseAnalysisImageFilterVID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2_Clone)
    OutputPixelTypeIsFloatCheck = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2_OutputPixelTypeIsFloatCheck
    
    GetOutputPhase = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2_GetOutputPhase)
    GetOutputAmplitude = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2_GetOutputAmplitude)
    __swig_destroy__ = _itkPhaseAnalysisImageFilterPython.delete_itkPhaseAnalysisImageFilterVID2ID2
    cast = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisImageFilterVID2ID2

        Create a new object of the class itkPhaseAnalysisImageFilterVID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisImageFilterVID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisImageFilterVID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisImageFilterVID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisImageFilterVID2ID2 in _itkPhaseAnalysisImageFilterPython:
_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2_swigregister(itkPhaseAnalysisImageFilterVID2ID2)
itkPhaseAnalysisImageFilterVID2ID2___New_orig__ = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2___New_orig__
itkPhaseAnalysisImageFilterVID2ID2_cast = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID2ID2_cast


def itkPhaseAnalysisImageFilterVID3ID3_New():
    return itkPhaseAnalysisImageFilterVID3ID3.New()

class itkPhaseAnalysisImageFilterVID3ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVID3ID3):
    r"""Proxy of C++ itkPhaseAnalysisImageFilterVID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3_Clone)
    OutputPixelTypeIsFloatCheck = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3_OutputPixelTypeIsFloatCheck
    
    GetOutputPhase = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3_GetOutputPhase)
    GetOutputAmplitude = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3_GetOutputAmplitude)
    __swig_destroy__ = _itkPhaseAnalysisImageFilterPython.delete_itkPhaseAnalysisImageFilterVID3ID3
    cast = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisImageFilterVID3ID3

        Create a new object of the class itkPhaseAnalysisImageFilterVID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisImageFilterVID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisImageFilterVID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisImageFilterVID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisImageFilterVID3ID3 in _itkPhaseAnalysisImageFilterPython:
_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3_swigregister(itkPhaseAnalysisImageFilterVID3ID3)
itkPhaseAnalysisImageFilterVID3ID3___New_orig__ = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3___New_orig__
itkPhaseAnalysisImageFilterVID3ID3_cast = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID3ID3_cast


def itkPhaseAnalysisImageFilterVID4ID4_New():
    return itkPhaseAnalysisImageFilterVID4ID4.New()

class itkPhaseAnalysisImageFilterVID4ID4(itk.itkImageToImageFilterBPython.itkImageToImageFilterVID4ID4):
    r"""Proxy of C++ itkPhaseAnalysisImageFilterVID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4_Clone)
    OutputPixelTypeIsFloatCheck = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4_OutputPixelTypeIsFloatCheck
    
    GetOutputPhase = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4_GetOutputPhase)
    GetOutputAmplitude = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4_GetOutputAmplitude)
    __swig_destroy__ = _itkPhaseAnalysisImageFilterPython.delete_itkPhaseAnalysisImageFilterVID4ID4
    cast = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisImageFilterVID4ID4

        Create a new object of the class itkPhaseAnalysisImageFilterVID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisImageFilterVID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisImageFilterVID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisImageFilterVID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisImageFilterVID4ID4 in _itkPhaseAnalysisImageFilterPython:
_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4_swigregister(itkPhaseAnalysisImageFilterVID4ID4)
itkPhaseAnalysisImageFilterVID4ID4___New_orig__ = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4___New_orig__
itkPhaseAnalysisImageFilterVID4ID4_cast = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVID4ID4_cast


def itkPhaseAnalysisImageFilterVIF2IF2_New():
    return itkPhaseAnalysisImageFilterVIF2IF2.New()

class itkPhaseAnalysisImageFilterVIF2IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIF2IF2):
    r"""Proxy of C++ itkPhaseAnalysisImageFilterVIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2_Clone)
    OutputPixelTypeIsFloatCheck = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2_OutputPixelTypeIsFloatCheck
    
    GetOutputPhase = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2_GetOutputPhase)
    GetOutputAmplitude = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2_GetOutputAmplitude)
    __swig_destroy__ = _itkPhaseAnalysisImageFilterPython.delete_itkPhaseAnalysisImageFilterVIF2IF2
    cast = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisImageFilterVIF2IF2

        Create a new object of the class itkPhaseAnalysisImageFilterVIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisImageFilterVIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisImageFilterVIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisImageFilterVIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisImageFilterVIF2IF2 in _itkPhaseAnalysisImageFilterPython:
_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2_swigregister(itkPhaseAnalysisImageFilterVIF2IF2)
itkPhaseAnalysisImageFilterVIF2IF2___New_orig__ = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2___New_orig__
itkPhaseAnalysisImageFilterVIF2IF2_cast = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF2IF2_cast


def itkPhaseAnalysisImageFilterVIF3IF3_New():
    return itkPhaseAnalysisImageFilterVIF3IF3.New()

class itkPhaseAnalysisImageFilterVIF3IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIF3IF3):
    r"""Proxy of C++ itkPhaseAnalysisImageFilterVIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3_Clone)
    OutputPixelTypeIsFloatCheck = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3_OutputPixelTypeIsFloatCheck
    
    GetOutputPhase = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3_GetOutputPhase)
    GetOutputAmplitude = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3_GetOutputAmplitude)
    __swig_destroy__ = _itkPhaseAnalysisImageFilterPython.delete_itkPhaseAnalysisImageFilterVIF3IF3
    cast = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisImageFilterVIF3IF3

        Create a new object of the class itkPhaseAnalysisImageFilterVIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisImageFilterVIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisImageFilterVIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisImageFilterVIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisImageFilterVIF3IF3 in _itkPhaseAnalysisImageFilterPython:
_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3_swigregister(itkPhaseAnalysisImageFilterVIF3IF3)
itkPhaseAnalysisImageFilterVIF3IF3___New_orig__ = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3___New_orig__
itkPhaseAnalysisImageFilterVIF3IF3_cast = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF3IF3_cast


def itkPhaseAnalysisImageFilterVIF4IF4_New():
    return itkPhaseAnalysisImageFilterVIF4IF4.New()

class itkPhaseAnalysisImageFilterVIF4IF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterVIF4IF4):
    r"""Proxy of C++ itkPhaseAnalysisImageFilterVIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4_Clone)
    OutputPixelTypeIsFloatCheck = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4_OutputPixelTypeIsFloatCheck
    
    GetOutputPhase = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4_GetOutputPhase)
    GetOutputAmplitude = _swig_new_instance_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4_GetOutputAmplitude)
    __swig_destroy__ = _itkPhaseAnalysisImageFilterPython.delete_itkPhaseAnalysisImageFilterVIF4IF4
    cast = _swig_new_static_method(_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseAnalysisImageFilterVIF4IF4

        Create a new object of the class itkPhaseAnalysisImageFilterVIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseAnalysisImageFilterVIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseAnalysisImageFilterVIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseAnalysisImageFilterVIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseAnalysisImageFilterVIF4IF4 in _itkPhaseAnalysisImageFilterPython:
_itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4_swigregister(itkPhaseAnalysisImageFilterVIF4IF4)
itkPhaseAnalysisImageFilterVIF4IF4___New_orig__ = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4___New_orig__
itkPhaseAnalysisImageFilterVIF4IF4_cast = _itkPhaseAnalysisImageFilterPython.itkPhaseAnalysisImageFilterVIF4IF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def phase_analysis_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for PhaseAnalysisImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.PhaseAnalysisImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def phase_analysis_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.PhaseAnalysisImageFilter
    phase_analysis_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    phase_analysis_image_filter.__doc__ = filter_object.__doc__





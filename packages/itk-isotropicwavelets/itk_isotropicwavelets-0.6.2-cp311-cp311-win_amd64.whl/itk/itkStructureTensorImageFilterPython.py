# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkStructureTensorImageFilterPython
else:
    import _itkStructureTensorImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkStructureTensorImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkStructureTensorImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkParametricImageSourcePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkGenerateImageSourcePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVariableSizeMatrixPython
class vectoritkImageVSM2(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVSM2_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___bool__)
    __len__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___len__)
    __getslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2___setitem__)
    pop = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_pop)
    append = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_append)
    empty = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_empty)
    size = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_size)
    swap = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_swap)
    begin = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_begin)
    end = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_end)
    rbegin = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_rbegin)
    rend = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_rend)
    clear = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_clear)
    get_allocator = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_get_allocator)
    pop_back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_pop_back)
    erase = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVSM2
        __init__(self, other) -> vectoritkImageVSM2

        Parameters
        ----------
        other: std::vector< itkImageVSM2_Pointer > const &

        __init__(self, size) -> vectoritkImageVSM2

        Parameters
        ----------
        size: std::vector< itkImageVSM2_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVSM2

        Parameters
        ----------
        size: std::vector< itkImageVSM2_Pointer >::size_type
        value: std::vector< itkImageVSM2_Pointer >::value_type const &

        """
        _itkStructureTensorImageFilterPython.vectoritkImageVSM2_swiginit(self, _itkStructureTensorImageFilterPython.new_vectoritkImageVSM2(*args))
    push_back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_push_back)
    front = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_front)
    back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_back)
    assign = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_assign)
    resize = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_resize)
    insert = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_insert)
    reserve = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_reserve)
    capacity = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM2_capacity)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_vectoritkImageVSM2

# Register vectoritkImageVSM2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.vectoritkImageVSM2_swigregister(vectoritkImageVSM2)

class vectoritkImageVSM3(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVSM3_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___bool__)
    __len__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___len__)
    __getslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3___setitem__)
    pop = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_pop)
    append = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_append)
    empty = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_empty)
    size = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_size)
    swap = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_swap)
    begin = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_begin)
    end = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_end)
    rbegin = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_rbegin)
    rend = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_rend)
    clear = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_clear)
    get_allocator = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_get_allocator)
    pop_back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_pop_back)
    erase = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVSM3
        __init__(self, other) -> vectoritkImageVSM3

        Parameters
        ----------
        other: std::vector< itkImageVSM3_Pointer > const &

        __init__(self, size) -> vectoritkImageVSM3

        Parameters
        ----------
        size: std::vector< itkImageVSM3_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVSM3

        Parameters
        ----------
        size: std::vector< itkImageVSM3_Pointer >::size_type
        value: std::vector< itkImageVSM3_Pointer >::value_type const &

        """
        _itkStructureTensorImageFilterPython.vectoritkImageVSM3_swiginit(self, _itkStructureTensorImageFilterPython.new_vectoritkImageVSM3(*args))
    push_back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_push_back)
    front = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_front)
    back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_back)
    assign = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_assign)
    resize = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_resize)
    insert = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_insert)
    reserve = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_reserve)
    capacity = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM3_capacity)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_vectoritkImageVSM3

# Register vectoritkImageVSM3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.vectoritkImageVSM3_swigregister(vectoritkImageVSM3)

class vectoritkImageVSM4(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVSM4_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___bool__)
    __len__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___len__)
    __getslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4___setitem__)
    pop = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_pop)
    append = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_append)
    empty = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_empty)
    size = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_size)
    swap = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_swap)
    begin = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_begin)
    end = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_end)
    rbegin = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_rbegin)
    rend = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_rend)
    clear = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_clear)
    get_allocator = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_get_allocator)
    pop_back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_pop_back)
    erase = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVSM4
        __init__(self, other) -> vectoritkImageVSM4

        Parameters
        ----------
        other: std::vector< itkImageVSM4_Pointer > const &

        __init__(self, size) -> vectoritkImageVSM4

        Parameters
        ----------
        size: std::vector< itkImageVSM4_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVSM4

        Parameters
        ----------
        size: std::vector< itkImageVSM4_Pointer >::size_type
        value: std::vector< itkImageVSM4_Pointer >::value_type const &

        """
        _itkStructureTensorImageFilterPython.vectoritkImageVSM4_swiginit(self, _itkStructureTensorImageFilterPython.new_vectoritkImageVSM4(*args))
    push_back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_push_back)
    front = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_front)
    back = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_back)
    assign = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_assign)
    resize = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_resize)
    insert = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_insert)
    reserve = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_reserve)
    capacity = _swig_new_instance_method(_itkStructureTensorImageFilterPython.vectoritkImageVSM4_capacity)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_vectoritkImageVSM4

# Register vectoritkImageVSM4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.vectoritkImageVSM4_swigregister(vectoritkImageVSM4)


def itkGaussianImageSourceID2_New():
    return itkGaussianImageSourceID2.New()

class itkGaussianImageSourceID2(itk.itkParametricImageSourcePython.itkParametricImageSourceID2):
    r"""Proxy of C++ itkGaussianImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_Clone)
    SetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_SetScale)
    GetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_GetScale)
    SetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_SetNormalized)
    GetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_GetNormalized)
    NormalizedOn = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_NormalizedOn)
    NormalizedOff = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_NormalizedOff)
    SetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_GetSigma)
    SetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_SetMean)
    GetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_GetMean)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkGaussianImageSourceID2
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceID2

        Create a new object of the class itkGaussianImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceID2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_swigregister(itkGaussianImageSourceID2)
itkGaussianImageSourceID2___New_orig__ = _itkStructureTensorImageFilterPython.itkGaussianImageSourceID2___New_orig__
itkGaussianImageSourceID2_cast = _itkStructureTensorImageFilterPython.itkGaussianImageSourceID2_cast


def itkGaussianImageSourceID3_New():
    return itkGaussianImageSourceID3.New()

class itkGaussianImageSourceID3(itk.itkParametricImageSourcePython.itkParametricImageSourceID3):
    r"""Proxy of C++ itkGaussianImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_Clone)
    SetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_SetScale)
    GetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_GetScale)
    SetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_SetNormalized)
    GetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_GetNormalized)
    NormalizedOn = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_NormalizedOn)
    NormalizedOff = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_NormalizedOff)
    SetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_GetSigma)
    SetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_SetMean)
    GetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_GetMean)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkGaussianImageSourceID3
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceID3

        Create a new object of the class itkGaussianImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceID3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_swigregister(itkGaussianImageSourceID3)
itkGaussianImageSourceID3___New_orig__ = _itkStructureTensorImageFilterPython.itkGaussianImageSourceID3___New_orig__
itkGaussianImageSourceID3_cast = _itkStructureTensorImageFilterPython.itkGaussianImageSourceID3_cast


def itkGaussianImageSourceID4_New():
    return itkGaussianImageSourceID4.New()

class itkGaussianImageSourceID4(itk.itkParametricImageSourcePython.itkParametricImageSourceID4):
    r"""Proxy of C++ itkGaussianImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_Clone)
    SetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_SetScale)
    GetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_GetScale)
    SetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_SetNormalized)
    GetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_GetNormalized)
    NormalizedOn = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_NormalizedOn)
    NormalizedOff = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_NormalizedOff)
    SetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_SetSigma)
    GetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_GetSigma)
    SetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_SetMean)
    GetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_GetMean)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkGaussianImageSourceID4
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceID4

        Create a new object of the class itkGaussianImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceID4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_swigregister(itkGaussianImageSourceID4)
itkGaussianImageSourceID4___New_orig__ = _itkStructureTensorImageFilterPython.itkGaussianImageSourceID4___New_orig__
itkGaussianImageSourceID4_cast = _itkStructureTensorImageFilterPython.itkGaussianImageSourceID4_cast


def itkGaussianImageSourceIF2_New():
    return itkGaussianImageSourceIF2.New()

class itkGaussianImageSourceIF2(itk.itkParametricImageSourcePython.itkParametricImageSourceIF2):
    r"""Proxy of C++ itkGaussianImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_Clone)
    SetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_SetScale)
    GetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_GetScale)
    SetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_SetNormalized)
    GetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_GetNormalized)
    NormalizedOn = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_NormalizedOn)
    NormalizedOff = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_NormalizedOff)
    SetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_GetSigma)
    SetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_SetMean)
    GetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_GetMean)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkGaussianImageSourceIF2
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIF2

        Create a new object of the class itkGaussianImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIF2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_swigregister(itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2___New_orig__ = _itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2___New_orig__
itkGaussianImageSourceIF2_cast = _itkStructureTensorImageFilterPython.itkGaussianImageSourceIF2_cast


def itkGaussianImageSourceIF3_New():
    return itkGaussianImageSourceIF3.New()

class itkGaussianImageSourceIF3(itk.itkParametricImageSourcePython.itkParametricImageSourceIF3):
    r"""Proxy of C++ itkGaussianImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_Clone)
    SetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_SetScale)
    GetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_GetScale)
    SetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_SetNormalized)
    GetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_GetNormalized)
    NormalizedOn = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_NormalizedOn)
    NormalizedOff = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_NormalizedOff)
    SetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_GetSigma)
    SetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_SetMean)
    GetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_GetMean)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkGaussianImageSourceIF3
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIF3

        Create a new object of the class itkGaussianImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIF3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_swigregister(itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3___New_orig__ = _itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3___New_orig__
itkGaussianImageSourceIF3_cast = _itkStructureTensorImageFilterPython.itkGaussianImageSourceIF3_cast


def itkGaussianImageSourceIF4_New():
    return itkGaussianImageSourceIF4.New()

class itkGaussianImageSourceIF4(itk.itkParametricImageSourcePython.itkParametricImageSourceIF4):
    r"""Proxy of C++ itkGaussianImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_Clone)
    SetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_SetScale)
    GetScale = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_GetScale)
    SetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_SetNormalized)
    GetNormalized = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_GetNormalized)
    NormalizedOn = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_NormalizedOn)
    NormalizedOff = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_NormalizedOff)
    SetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_SetSigma)
    GetSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_GetSigma)
    SetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_SetMean)
    GetMean = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_GetMean)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkGaussianImageSourceIF4
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_cast)

    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIF4

        Create a new object of the class itkGaussianImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaussianImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaussianImageSourceIF4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_swigregister(itkGaussianImageSourceIF4)
itkGaussianImageSourceIF4___New_orig__ = _itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4___New_orig__
itkGaussianImageSourceIF4_cast = _itkStructureTensorImageFilterPython.itkGaussianImageSourceIF4_cast

class itkImageSourceVSM2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVSM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM2_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM2_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM2_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM2_MakeOutput)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageSourceVSM2
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM2_cast)

# Register itkImageSourceVSM2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageSourceVSM2_swigregister(itkImageSourceVSM2)
itkImageSourceVSM2_cast = _itkStructureTensorImageFilterPython.itkImageSourceVSM2_cast

class itkImageSourceVSM3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVSM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM3_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM3_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM3_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM3_MakeOutput)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageSourceVSM3
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM3_cast)

# Register itkImageSourceVSM3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageSourceVSM3_swigregister(itkImageSourceVSM3)
itkImageSourceVSM3_cast = _itkStructureTensorImageFilterPython.itkImageSourceVSM3_cast

class itkImageSourceVSM4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceVSM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM4_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM4_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM4_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM4_MakeOutput)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageSourceVSM4
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageSourceVSM4_cast)

# Register itkImageSourceVSM4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageSourceVSM4_swigregister(itkImageSourceVSM4)
itkImageSourceVSM4_cast = _itkStructureTensorImageFilterPython.itkImageSourceVSM4_cast

class itkImageToImageFilterID2VSM2(itkImageSourceVSM2):
    r"""Proxy of C++ itkImageToImageFilterID2VSM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_SetInput)
    GetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_GetDirectionTolerance)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageToImageFilterID2VSM2
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_cast)

# Register itkImageToImageFilterID2VSM2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_swigregister(itkImageToImageFilterID2VSM2)
itkImageToImageFilterID2VSM2_cast = _itkStructureTensorImageFilterPython.itkImageToImageFilterID2VSM2_cast

class itkImageToImageFilterID3VSM3(itkImageSourceVSM3):
    r"""Proxy of C++ itkImageToImageFilterID3VSM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_SetInput)
    GetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_GetDirectionTolerance)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageToImageFilterID3VSM3
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_cast)

# Register itkImageToImageFilterID3VSM3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_swigregister(itkImageToImageFilterID3VSM3)
itkImageToImageFilterID3VSM3_cast = _itkStructureTensorImageFilterPython.itkImageToImageFilterID3VSM3_cast

class itkImageToImageFilterID4VSM4(itkImageSourceVSM4):
    r"""Proxy of C++ itkImageToImageFilterID4VSM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_SetInput)
    GetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_GetInput)
    PushBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_GetDirectionTolerance)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageToImageFilterID4VSM4
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_cast)

# Register itkImageToImageFilterID4VSM4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_swigregister(itkImageToImageFilterID4VSM4)
itkImageToImageFilterID4VSM4_cast = _itkStructureTensorImageFilterPython.itkImageToImageFilterID4VSM4_cast

class itkImageToImageFilterIF2VSM2(itkImageSourceVSM2):
    r"""Proxy of C++ itkImageToImageFilterIF2VSM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_SetInput)
    GetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_GetDirectionTolerance)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageToImageFilterIF2VSM2
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_cast)

# Register itkImageToImageFilterIF2VSM2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_swigregister(itkImageToImageFilterIF2VSM2)
itkImageToImageFilterIF2VSM2_cast = _itkStructureTensorImageFilterPython.itkImageToImageFilterIF2VSM2_cast

class itkImageToImageFilterIF3VSM3(itkImageSourceVSM3):
    r"""Proxy of C++ itkImageToImageFilterIF3VSM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_SetInput)
    GetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_GetDirectionTolerance)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageToImageFilterIF3VSM3
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_cast)

# Register itkImageToImageFilterIF3VSM3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_swigregister(itkImageToImageFilterIF3VSM3)
itkImageToImageFilterIF3VSM3_cast = _itkStructureTensorImageFilterPython.itkImageToImageFilterIF3VSM3_cast

class itkImageToImageFilterIF4VSM4(itkImageSourceVSM4):
    r"""Proxy of C++ itkImageToImageFilterIF4VSM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_SetInput)
    GetInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_GetInput)
    PushBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_GetDirectionTolerance)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageToImageFilterIF4VSM4
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_cast)

# Register itkImageToImageFilterIF4VSM4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_swigregister(itkImageToImageFilterIF4VSM4)
itkImageToImageFilterIF4VSM4_cast = _itkStructureTensorImageFilterPython.itkImageToImageFilterIF4VSM4_cast


def itkImageVSM2_New():
    return itkImageVSM2.New()

class itkImageVSM2(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageVSM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageVSM2___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_Clone)
    Allocate = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_Allocate)
    FillBuffer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_SetPixel)
    GetPixel = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM2_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageVSM2
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageVSM2_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVSM2

        Create a new object of the class itkImageVSM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVSM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVSM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVSM2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVSM2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageVSM2_swigregister(itkImageVSM2)
itkImageVSM2___New_orig__ = _itkStructureTensorImageFilterPython.itkImageVSM2___New_orig__
itkImageVSM2_cast = _itkStructureTensorImageFilterPython.itkImageVSM2_cast


def itkImageVSM3_New():
    return itkImageVSM3.New()

class itkImageVSM3(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageVSM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageVSM3___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_Clone)
    Allocate = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_Allocate)
    FillBuffer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_SetPixel)
    GetPixel = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM3_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageVSM3
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageVSM3_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVSM3

        Create a new object of the class itkImageVSM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVSM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVSM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVSM3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVSM3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageVSM3_swigregister(itkImageVSM3)
itkImageVSM3___New_orig__ = _itkStructureTensorImageFilterPython.itkImageVSM3___New_orig__
itkImageVSM3_cast = _itkStructureTensorImageFilterPython.itkImageVSM3_cast


def itkImageVSM4_New():
    return itkImageVSM4.New()

class itkImageVSM4(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageVSM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageVSM4___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_Clone)
    Allocate = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_Allocate)
    FillBuffer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_SetPixel)
    GetPixel = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkImageVSM4_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkImageVSM4
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkImageVSM4_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVSM4

        Create a new object of the class itkImageVSM4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVSM4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVSM4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVSM4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVSM4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkImageVSM4_swigregister(itkImageVSM4)
itkImageVSM4___New_orig__ = _itkStructureTensorImageFilterPython.itkImageVSM4___New_orig__
itkImageVSM4_cast = _itkStructureTensorImageFilterPython.itkImageVSM4_cast


def itkStructureTensorImageFilterID2VSM2_New():
    return itkStructureTensorImageFilterID2VSM2.New()

class itkStructureTensorImageFilterID2VSM2(itkImageToImageFilterID2VSM2):
    r"""Proxy of C++ itkStructureTensorImageFilterID2VSM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_Clone)
    InputPixelTypeIsFloatCheck = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_InputPixelTypeIsFloatCheck
    
    SetInputs = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_SetInputs)
    SetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_SetGaussianWindowRadius)
    GetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_GetGaussianWindowRadius)
    SetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_SetGaussianWindowSigma)
    GetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_GetGaussianWindowSigma)
    GetModifiableGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_GetModifiableGaussianSource)
    GetGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_GetGaussianSource)
    ComputeProjectionImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_ComputeProjectionImage)
    ComputeProjectionImageWithLargestResponse = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_ComputeProjectionImageWithLargestResponse)
    ComputeCoherencyImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_ComputeCoherencyImage)
    GetRotationMatrixFromOutputMatrix = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_GetRotationMatrixFromOutputMatrix)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkStructureTensorImageFilterID2VSM2
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_cast)

    def New(*args, **kargs):
        """New() -> itkStructureTensorImageFilterID2VSM2

        Create a new object of the class itkStructureTensorImageFilterID2VSM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStructureTensorImageFilterID2VSM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStructureTensorImageFilterID2VSM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStructureTensorImageFilterID2VSM2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStructureTensorImageFilterID2VSM2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_swigregister(itkStructureTensorImageFilterID2VSM2)
itkStructureTensorImageFilterID2VSM2___New_orig__ = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2___New_orig__
itkStructureTensorImageFilterID2VSM2_cast = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID2VSM2_cast


def itkStructureTensorImageFilterID3VSM3_New():
    return itkStructureTensorImageFilterID3VSM3.New()

class itkStructureTensorImageFilterID3VSM3(itkImageToImageFilterID3VSM3):
    r"""Proxy of C++ itkStructureTensorImageFilterID3VSM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_Clone)
    InputPixelTypeIsFloatCheck = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_InputPixelTypeIsFloatCheck
    
    SetInputs = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_SetInputs)
    SetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_SetGaussianWindowRadius)
    GetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_GetGaussianWindowRadius)
    SetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_SetGaussianWindowSigma)
    GetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_GetGaussianWindowSigma)
    GetModifiableGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_GetModifiableGaussianSource)
    GetGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_GetGaussianSource)
    ComputeProjectionImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_ComputeProjectionImage)
    ComputeProjectionImageWithLargestResponse = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_ComputeProjectionImageWithLargestResponse)
    ComputeCoherencyImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_ComputeCoherencyImage)
    GetRotationMatrixFromOutputMatrix = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_GetRotationMatrixFromOutputMatrix)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkStructureTensorImageFilterID3VSM3
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_cast)

    def New(*args, **kargs):
        """New() -> itkStructureTensorImageFilterID3VSM3

        Create a new object of the class itkStructureTensorImageFilterID3VSM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStructureTensorImageFilterID3VSM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStructureTensorImageFilterID3VSM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStructureTensorImageFilterID3VSM3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStructureTensorImageFilterID3VSM3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_swigregister(itkStructureTensorImageFilterID3VSM3)
itkStructureTensorImageFilterID3VSM3___New_orig__ = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3___New_orig__
itkStructureTensorImageFilterID3VSM3_cast = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID3VSM3_cast


def itkStructureTensorImageFilterID4VSM4_New():
    return itkStructureTensorImageFilterID4VSM4.New()

class itkStructureTensorImageFilterID4VSM4(itkImageToImageFilterID4VSM4):
    r"""Proxy of C++ itkStructureTensorImageFilterID4VSM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_Clone)
    InputPixelTypeIsFloatCheck = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_InputPixelTypeIsFloatCheck
    
    SetInputs = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_SetInputs)
    SetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_SetGaussianWindowRadius)
    GetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_GetGaussianWindowRadius)
    SetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_SetGaussianWindowSigma)
    GetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_GetGaussianWindowSigma)
    GetModifiableGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_GetModifiableGaussianSource)
    GetGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_GetGaussianSource)
    ComputeProjectionImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_ComputeProjectionImage)
    ComputeProjectionImageWithLargestResponse = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_ComputeProjectionImageWithLargestResponse)
    ComputeCoherencyImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_ComputeCoherencyImage)
    GetRotationMatrixFromOutputMatrix = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_GetRotationMatrixFromOutputMatrix)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkStructureTensorImageFilterID4VSM4
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_cast)

    def New(*args, **kargs):
        """New() -> itkStructureTensorImageFilterID4VSM4

        Create a new object of the class itkStructureTensorImageFilterID4VSM4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStructureTensorImageFilterID4VSM4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStructureTensorImageFilterID4VSM4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStructureTensorImageFilterID4VSM4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStructureTensorImageFilterID4VSM4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_swigregister(itkStructureTensorImageFilterID4VSM4)
itkStructureTensorImageFilterID4VSM4___New_orig__ = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4___New_orig__
itkStructureTensorImageFilterID4VSM4_cast = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterID4VSM4_cast


def itkStructureTensorImageFilterIF2VSM2_New():
    return itkStructureTensorImageFilterIF2VSM2.New()

class itkStructureTensorImageFilterIF2VSM2(itkImageToImageFilterIF2VSM2):
    r"""Proxy of C++ itkStructureTensorImageFilterIF2VSM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_Clone)
    InputPixelTypeIsFloatCheck = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_InputPixelTypeIsFloatCheck
    
    SetInputs = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_SetInputs)
    SetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_SetGaussianWindowRadius)
    GetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_GetGaussianWindowRadius)
    SetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_SetGaussianWindowSigma)
    GetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_GetGaussianWindowSigma)
    GetModifiableGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_GetModifiableGaussianSource)
    GetGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_GetGaussianSource)
    ComputeProjectionImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_ComputeProjectionImage)
    ComputeProjectionImageWithLargestResponse = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_ComputeProjectionImageWithLargestResponse)
    ComputeCoherencyImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_ComputeCoherencyImage)
    GetRotationMatrixFromOutputMatrix = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_GetRotationMatrixFromOutputMatrix)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkStructureTensorImageFilterIF2VSM2
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_cast)

    def New(*args, **kargs):
        """New() -> itkStructureTensorImageFilterIF2VSM2

        Create a new object of the class itkStructureTensorImageFilterIF2VSM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStructureTensorImageFilterIF2VSM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStructureTensorImageFilterIF2VSM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStructureTensorImageFilterIF2VSM2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStructureTensorImageFilterIF2VSM2 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_swigregister(itkStructureTensorImageFilterIF2VSM2)
itkStructureTensorImageFilterIF2VSM2___New_orig__ = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2___New_orig__
itkStructureTensorImageFilterIF2VSM2_cast = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF2VSM2_cast


def itkStructureTensorImageFilterIF3VSM3_New():
    return itkStructureTensorImageFilterIF3VSM3.New()

class itkStructureTensorImageFilterIF3VSM3(itkImageToImageFilterIF3VSM3):
    r"""Proxy of C++ itkStructureTensorImageFilterIF3VSM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_Clone)
    InputPixelTypeIsFloatCheck = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_InputPixelTypeIsFloatCheck
    
    SetInputs = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_SetInputs)
    SetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_SetGaussianWindowRadius)
    GetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_GetGaussianWindowRadius)
    SetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_SetGaussianWindowSigma)
    GetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_GetGaussianWindowSigma)
    GetModifiableGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_GetModifiableGaussianSource)
    GetGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_GetGaussianSource)
    ComputeProjectionImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_ComputeProjectionImage)
    ComputeProjectionImageWithLargestResponse = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_ComputeProjectionImageWithLargestResponse)
    ComputeCoherencyImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_ComputeCoherencyImage)
    GetRotationMatrixFromOutputMatrix = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_GetRotationMatrixFromOutputMatrix)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkStructureTensorImageFilterIF3VSM3
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_cast)

    def New(*args, **kargs):
        """New() -> itkStructureTensorImageFilterIF3VSM3

        Create a new object of the class itkStructureTensorImageFilterIF3VSM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStructureTensorImageFilterIF3VSM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStructureTensorImageFilterIF3VSM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStructureTensorImageFilterIF3VSM3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStructureTensorImageFilterIF3VSM3 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_swigregister(itkStructureTensorImageFilterIF3VSM3)
itkStructureTensorImageFilterIF3VSM3___New_orig__ = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3___New_orig__
itkStructureTensorImageFilterIF3VSM3_cast = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF3VSM3_cast


def itkStructureTensorImageFilterIF4VSM4_New():
    return itkStructureTensorImageFilterIF4VSM4.New()

class itkStructureTensorImageFilterIF4VSM4(itkImageToImageFilterIF4VSM4):
    r"""Proxy of C++ itkStructureTensorImageFilterIF4VSM4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4___New_orig__)
    Clone = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_Clone)
    InputPixelTypeIsFloatCheck = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_InputPixelTypeIsFloatCheck
    
    SetInputs = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_SetInputs)
    SetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_SetGaussianWindowRadius)
    GetGaussianWindowRadius = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_GetGaussianWindowRadius)
    SetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_SetGaussianWindowSigma)
    GetGaussianWindowSigma = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_GetGaussianWindowSigma)
    GetModifiableGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_GetModifiableGaussianSource)
    GetGaussianSource = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_GetGaussianSource)
    ComputeProjectionImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_ComputeProjectionImage)
    ComputeProjectionImageWithLargestResponse = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_ComputeProjectionImageWithLargestResponse)
    ComputeCoherencyImage = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_ComputeCoherencyImage)
    GetRotationMatrixFromOutputMatrix = _swig_new_instance_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_GetRotationMatrixFromOutputMatrix)
    __swig_destroy__ = _itkStructureTensorImageFilterPython.delete_itkStructureTensorImageFilterIF4VSM4
    cast = _swig_new_static_method(_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_cast)

    def New(*args, **kargs):
        """New() -> itkStructureTensorImageFilterIF4VSM4

        Create a new object of the class itkStructureTensorImageFilterIF4VSM4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStructureTensorImageFilterIF4VSM4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStructureTensorImageFilterIF4VSM4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStructureTensorImageFilterIF4VSM4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStructureTensorImageFilterIF4VSM4 in _itkStructureTensorImageFilterPython:
_itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_swigregister(itkStructureTensorImageFilterIF4VSM4)
itkStructureTensorImageFilterIF4VSM4___New_orig__ = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4___New_orig__
itkStructureTensorImageFilterIF4VSM4_cast = _itkStructureTensorImageFilterPython.itkStructureTensorImageFilterIF4VSM4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def structure_tensor_image_filter(*args: itkt.ImageLike,  inputs=..., gaussian_window_radius: float=..., gaussian_window_sigma: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for StructureTensorImageFilter"""
    import itk

    kwarg_typehints = { 'inputs':inputs,'gaussian_window_radius':gaussian_window_radius,'gaussian_window_sigma':gaussian_window_sigma }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.StructureTensorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def structure_tensor_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.StructureTensorImageFilter
    structure_tensor_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    structure_tensor_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def gaussian_image_source(*args,  scale: float=..., normalized: bool=..., sigma: Sequence[float]=..., mean: Sequence[float]=..., parameters: Union[Sequence[float], Sequence[float]]=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for GaussianImageSource"""
    import itk

    kwarg_typehints = { 'scale':scale,'normalized':normalized,'sigma':sigma,'mean':mean,'parameters':parameters,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.GaussianImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def gaussian_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.GaussianImageSource
    gaussian_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    gaussian_image_source.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_source(*args, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageSource"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.ImageSource
    image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_source.__doc__ = filter_object.__doc__





# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMatrixComplexPython
else:
    import _itkMatrixComplexPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMatrixComplexPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMatrixComplexPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython

def itkMatrixCD22_New():
  return itkMatrixCD22.New()


def itkMatrixCF22_New():
  return itkMatrixCF22.New()


def itkMatrixCD33_New():
  return itkMatrixCD33.New()


def itkMatrixCF33_New():
  return itkMatrixCF33.New()

class itkMatrixCD22(object):
    r"""Proxy of C++ itkMatrixCD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixComplexPython.itkMatrixCD22___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixComplexPython.itkMatrixCD22___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixComplexPython.itkMatrixCD22_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD22_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixCD22

        Parameters
        ----------
        matrix: vnl_matrixCD const &

        __init__(self, matrix) -> itkMatrixCD22

        Parameters
        ----------
        matrix: vnl_matrix_fixed< std::complex< double >,2,2 > const &

        __init__(self) -> itkMatrixCD22
        __init__(self, arg0) -> itkMatrixCD22

        Parameters
        ----------
        arg0: itkMatrixCD22 const &

        """
        _itkMatrixComplexPython.itkMatrixCD22_swiginit(self, _itkMatrixComplexPython.new_itkMatrixCD22(*args))
    __swig_destroy__ = _itkMatrixComplexPython.delete_itkMatrixCD22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixCD22 in _itkMatrixComplexPython:
_itkMatrixComplexPython.itkMatrixCD22_swigregister(itkMatrixCD22)
itkMatrixCD22_GetIdentity = _itkMatrixComplexPython.itkMatrixCD22_GetIdentity

class itkMatrixCD33(object):
    r"""Proxy of C++ itkMatrixCD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixComplexPython.itkMatrixCD33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixComplexPython.itkMatrixCD33___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixComplexPython.itkMatrixCD33_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCD33_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixCD33

        Parameters
        ----------
        matrix: vnl_matrixCD const &

        __init__(self, matrix) -> itkMatrixCD33

        Parameters
        ----------
        matrix: vnl_matrix_fixed< std::complex< double >,3,3 > const &

        __init__(self) -> itkMatrixCD33
        __init__(self, arg0) -> itkMatrixCD33

        Parameters
        ----------
        arg0: itkMatrixCD33 const &

        """
        _itkMatrixComplexPython.itkMatrixCD33_swiginit(self, _itkMatrixComplexPython.new_itkMatrixCD33(*args))
    __swig_destroy__ = _itkMatrixComplexPython.delete_itkMatrixCD33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixCD33 in _itkMatrixComplexPython:
_itkMatrixComplexPython.itkMatrixCD33_swigregister(itkMatrixCD33)
itkMatrixCD33_GetIdentity = _itkMatrixComplexPython.itkMatrixCD33_GetIdentity

class itkMatrixCF22(object):
    r"""Proxy of C++ itkMatrixCF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixComplexPython.itkMatrixCF22___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixComplexPython.itkMatrixCF22___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixComplexPython.itkMatrixCF22_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF22_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixCF22

        Parameters
        ----------
        matrix: vnl_matrixCF const &

        __init__(self, matrix) -> itkMatrixCF22

        Parameters
        ----------
        matrix: vnl_matrix_fixed< std::complex< float >,2,2 > const &

        __init__(self) -> itkMatrixCF22
        __init__(self, arg0) -> itkMatrixCF22

        Parameters
        ----------
        arg0: itkMatrixCF22 const &

        """
        _itkMatrixComplexPython.itkMatrixCF22_swiginit(self, _itkMatrixComplexPython.new_itkMatrixCF22(*args))
    __swig_destroy__ = _itkMatrixComplexPython.delete_itkMatrixCF22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixCF22 in _itkMatrixComplexPython:
_itkMatrixComplexPython.itkMatrixCF22_swigregister(itkMatrixCF22)
itkMatrixCF22_GetIdentity = _itkMatrixComplexPython.itkMatrixCF22_GetIdentity

class itkMatrixCF33(object):
    r"""Proxy of C++ itkMatrixCF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixComplexPython.itkMatrixCF33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixComplexPython.itkMatrixCF33___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixComplexPython.itkMatrixCF33_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixComplexPython.itkMatrixCF33_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixCF33

        Parameters
        ----------
        matrix: vnl_matrixCF const &

        __init__(self, matrix) -> itkMatrixCF33

        Parameters
        ----------
        matrix: vnl_matrix_fixed< std::complex< float >,3,3 > const &

        __init__(self) -> itkMatrixCF33
        __init__(self, arg0) -> itkMatrixCF33

        Parameters
        ----------
        arg0: itkMatrixCF33 const &

        """
        _itkMatrixComplexPython.itkMatrixCF33_swiginit(self, _itkMatrixComplexPython.new_itkMatrixCF33(*args))
    __swig_destroy__ = _itkMatrixComplexPython.delete_itkMatrixCF33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixCF33 in _itkMatrixComplexPython:
_itkMatrixComplexPython.itkMatrixCF33_swigregister(itkMatrixCF33)
itkMatrixCF33_GetIdentity = _itkMatrixComplexPython.itkMatrixCF33_GetIdentity




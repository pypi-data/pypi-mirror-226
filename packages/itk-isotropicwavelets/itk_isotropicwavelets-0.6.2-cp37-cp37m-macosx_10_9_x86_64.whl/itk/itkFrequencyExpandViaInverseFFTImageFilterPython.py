# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFrequencyExpandViaInverseFFTImageFilterPython
else:
    import _itkFrequencyExpandViaInverseFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFrequencyExpandViaInverseFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFrequencyExpandViaInverseFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkFrequencyExpandViaInverseFFTImageFilterICD2_New():
    return itkFrequencyExpandViaInverseFFTImageFilterICD2.New()

class itkFrequencyExpandViaInverseFFTImageFilterICD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkFrequencyExpandViaInverseFFTImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.delete_itkFrequencyExpandViaInverseFFTImageFilterICD2
    cast = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandViaInverseFFTImageFilterICD2

        Create a new object of the class itkFrequencyExpandViaInverseFFTImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandViaInverseFFTImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandViaInverseFFTImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandViaInverseFFTImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandViaInverseFFTImageFilterICD2 in _itkFrequencyExpandViaInverseFFTImageFilterPython:
_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_swigregister(itkFrequencyExpandViaInverseFFTImageFilterICD2)
itkFrequencyExpandViaInverseFFTImageFilterICD2___New_orig__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2___New_orig__
itkFrequencyExpandViaInverseFFTImageFilterICD2_cast = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD2_cast


def itkFrequencyExpandViaInverseFFTImageFilterICD3_New():
    return itkFrequencyExpandViaInverseFFTImageFilterICD3.New()

class itkFrequencyExpandViaInverseFFTImageFilterICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkFrequencyExpandViaInverseFFTImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.delete_itkFrequencyExpandViaInverseFFTImageFilterICD3
    cast = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandViaInverseFFTImageFilterICD3

        Create a new object of the class itkFrequencyExpandViaInverseFFTImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandViaInverseFFTImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandViaInverseFFTImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandViaInverseFFTImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandViaInverseFFTImageFilterICD3 in _itkFrequencyExpandViaInverseFFTImageFilterPython:
_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_swigregister(itkFrequencyExpandViaInverseFFTImageFilterICD3)
itkFrequencyExpandViaInverseFFTImageFilterICD3___New_orig__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3___New_orig__
itkFrequencyExpandViaInverseFFTImageFilterICD3_cast = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD3_cast


def itkFrequencyExpandViaInverseFFTImageFilterICD4_New():
    return itkFrequencyExpandViaInverseFFTImageFilterICD4.New()

class itkFrequencyExpandViaInverseFFTImageFilterICD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkFrequencyExpandViaInverseFFTImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.delete_itkFrequencyExpandViaInverseFFTImageFilterICD4
    cast = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandViaInverseFFTImageFilterICD4

        Create a new object of the class itkFrequencyExpandViaInverseFFTImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandViaInverseFFTImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandViaInverseFFTImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandViaInverseFFTImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandViaInverseFFTImageFilterICD4 in _itkFrequencyExpandViaInverseFFTImageFilterPython:
_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_swigregister(itkFrequencyExpandViaInverseFFTImageFilterICD4)
itkFrequencyExpandViaInverseFFTImageFilterICD4___New_orig__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4___New_orig__
itkFrequencyExpandViaInverseFFTImageFilterICD4_cast = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICD4_cast


def itkFrequencyExpandViaInverseFFTImageFilterICF2_New():
    return itkFrequencyExpandViaInverseFFTImageFilterICF2.New()

class itkFrequencyExpandViaInverseFFTImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkFrequencyExpandViaInverseFFTImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.delete_itkFrequencyExpandViaInverseFFTImageFilterICF2
    cast = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandViaInverseFFTImageFilterICF2

        Create a new object of the class itkFrequencyExpandViaInverseFFTImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandViaInverseFFTImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandViaInverseFFTImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandViaInverseFFTImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandViaInverseFFTImageFilterICF2 in _itkFrequencyExpandViaInverseFFTImageFilterPython:
_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_swigregister(itkFrequencyExpandViaInverseFFTImageFilterICF2)
itkFrequencyExpandViaInverseFFTImageFilterICF2___New_orig__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2___New_orig__
itkFrequencyExpandViaInverseFFTImageFilterICF2_cast = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF2_cast


def itkFrequencyExpandViaInverseFFTImageFilterICF3_New():
    return itkFrequencyExpandViaInverseFFTImageFilterICF3.New()

class itkFrequencyExpandViaInverseFFTImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkFrequencyExpandViaInverseFFTImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.delete_itkFrequencyExpandViaInverseFFTImageFilterICF3
    cast = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandViaInverseFFTImageFilterICF3

        Create a new object of the class itkFrequencyExpandViaInverseFFTImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandViaInverseFFTImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandViaInverseFFTImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandViaInverseFFTImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandViaInverseFFTImageFilterICF3 in _itkFrequencyExpandViaInverseFFTImageFilterPython:
_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_swigregister(itkFrequencyExpandViaInverseFFTImageFilterICF3)
itkFrequencyExpandViaInverseFFTImageFilterICF3___New_orig__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3___New_orig__
itkFrequencyExpandViaInverseFFTImageFilterICF3_cast = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF3_cast


def itkFrequencyExpandViaInverseFFTImageFilterICF4_New():
    return itkFrequencyExpandViaInverseFFTImageFilterICF4.New()

class itkFrequencyExpandViaInverseFFTImageFilterICF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkFrequencyExpandViaInverseFFTImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_Clone)
    SetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.delete_itkFrequencyExpandViaInverseFFTImageFilterICF4
    cast = _swig_new_static_method(_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyExpandViaInverseFFTImageFilterICF4

        Create a new object of the class itkFrequencyExpandViaInverseFFTImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyExpandViaInverseFFTImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyExpandViaInverseFFTImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyExpandViaInverseFFTImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyExpandViaInverseFFTImageFilterICF4 in _itkFrequencyExpandViaInverseFFTImageFilterPython:
_itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_swigregister(itkFrequencyExpandViaInverseFFTImageFilterICF4)
itkFrequencyExpandViaInverseFFTImageFilterICF4___New_orig__ = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4___New_orig__
itkFrequencyExpandViaInverseFFTImageFilterICF4_cast = _itkFrequencyExpandViaInverseFFTImageFilterPython.itkFrequencyExpandViaInverseFFTImageFilterICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def frequency_expand_via_inverse_fft_image_filter(*args: itkt.ImageLike,  expand_factors: Union[int, Sequence[int]]=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FrequencyExpandViaInverseFFTImageFilter"""
    import itk

    kwarg_typehints = { 'expand_factors':expand_factors }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.FrequencyExpandViaInverseFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def frequency_expand_via_inverse_fft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.FrequencyExpandViaInverseFFTImageFilter
    frequency_expand_via_inverse_fft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    frequency_expand_via_inverse_fft_image_filter.__doc__ = filter_object.__doc__





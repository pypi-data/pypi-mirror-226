# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorInverseFFTImageFilterPython
else:
    import _itkVectorInverseFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVectorInverseFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVectorInverseFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkVectorImagePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
class itkImageToImageFilterVICD2VID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""Proxy of C++ itkImageToImageFilterVICD2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_SetInput)
    GetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_GetDirectionTolerance)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkImageToImageFilterVICD2VID2
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_cast)

# Register itkImageToImageFilterVICD2VID2 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_swigregister(itkImageToImageFilterVICD2VID2)
itkImageToImageFilterVICD2VID2_cast = _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD2VID2_cast

class itkImageToImageFilterVICD3VID3(itk.itkImageSourcePython.itkImageSourceVID3):
    r"""Proxy of C++ itkImageToImageFilterVICD3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_SetInput)
    GetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_GetDirectionTolerance)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkImageToImageFilterVICD3VID3
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_cast)

# Register itkImageToImageFilterVICD3VID3 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_swigregister(itkImageToImageFilterVICD3VID3)
itkImageToImageFilterVICD3VID3_cast = _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD3VID3_cast

class itkImageToImageFilterVICD4VID4(itk.itkImageSourcePython.itkImageSourceVID4):
    r"""Proxy of C++ itkImageToImageFilterVICD4VID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_SetInput)
    GetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_GetInput)
    PushBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_GetDirectionTolerance)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkImageToImageFilterVICD4VID4
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_cast)

# Register itkImageToImageFilterVICD4VID4 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_swigregister(itkImageToImageFilterVICD4VID4)
itkImageToImageFilterVICD4VID4_cast = _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICD4VID4_cast

class itkImageToImageFilterVICF2VIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""Proxy of C++ itkImageToImageFilterVICF2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_GetInput)
    PushBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_GetDirectionTolerance)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkImageToImageFilterVICF2VIF2
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_cast)

# Register itkImageToImageFilterVICF2VIF2 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_swigregister(itkImageToImageFilterVICF2VIF2)
itkImageToImageFilterVICF2VIF2_cast = _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF2VIF2_cast

class itkImageToImageFilterVICF3VIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""Proxy of C++ itkImageToImageFilterVICF3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_GetInput)
    PushBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_GetDirectionTolerance)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkImageToImageFilterVICF3VIF3
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_cast)

# Register itkImageToImageFilterVICF3VIF3 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_swigregister(itkImageToImageFilterVICF3VIF3)
itkImageToImageFilterVICF3VIF3_cast = _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF3VIF3_cast

class itkImageToImageFilterVICF4VIF4(itk.itkImageSourcePython.itkImageSourceVIF4):
    r"""Proxy of C++ itkImageToImageFilterVICF4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_SetInput)
    GetInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_GetInput)
    PushBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_GetDirectionTolerance)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkImageToImageFilterVICF4VIF4
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_cast)

# Register itkImageToImageFilterVICF4VIF4 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_swigregister(itkImageToImageFilterVICF4VIF4)
itkImageToImageFilterVICF4VIF4_cast = _itkVectorInverseFFTImageFilterPython.itkImageToImageFilterVICF4VIF4_cast


def itkVectorInverseFFTImageFilterVICD2VID2_New():
    return itkVectorInverseFFTImageFilterVICD2VID2.New()

class itkVectorInverseFFTImageFilterVICD2VID2(itkImageToImageFilterVICD2VID2):
    r"""Proxy of C++ itkVectorInverseFFTImageFilterVICD2VID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD2VID2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD2VID2_Clone)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkVectorInverseFFTImageFilterVICD2VID2
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD2VID2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorInverseFFTImageFilterVICD2VID2

        Create a new object of the class itkVectorInverseFFTImageFilterVICD2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorInverseFFTImageFilterVICD2VID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorInverseFFTImageFilterVICD2VID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorInverseFFTImageFilterVICD2VID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorInverseFFTImageFilterVICD2VID2 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD2VID2_swigregister(itkVectorInverseFFTImageFilterVICD2VID2)
itkVectorInverseFFTImageFilterVICD2VID2___New_orig__ = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD2VID2___New_orig__
itkVectorInverseFFTImageFilterVICD2VID2_cast = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD2VID2_cast


def itkVectorInverseFFTImageFilterVICD3VID3_New():
    return itkVectorInverseFFTImageFilterVICD3VID3.New()

class itkVectorInverseFFTImageFilterVICD3VID3(itkImageToImageFilterVICD3VID3):
    r"""Proxy of C++ itkVectorInverseFFTImageFilterVICD3VID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD3VID3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD3VID3_Clone)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkVectorInverseFFTImageFilterVICD3VID3
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD3VID3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorInverseFFTImageFilterVICD3VID3

        Create a new object of the class itkVectorInverseFFTImageFilterVICD3VID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorInverseFFTImageFilterVICD3VID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorInverseFFTImageFilterVICD3VID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorInverseFFTImageFilterVICD3VID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorInverseFFTImageFilterVICD3VID3 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD3VID3_swigregister(itkVectorInverseFFTImageFilterVICD3VID3)
itkVectorInverseFFTImageFilterVICD3VID3___New_orig__ = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD3VID3___New_orig__
itkVectorInverseFFTImageFilterVICD3VID3_cast = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD3VID3_cast


def itkVectorInverseFFTImageFilterVICD4VID4_New():
    return itkVectorInverseFFTImageFilterVICD4VID4.New()

class itkVectorInverseFFTImageFilterVICD4VID4(itkImageToImageFilterVICD4VID4):
    r"""Proxy of C++ itkVectorInverseFFTImageFilterVICD4VID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD4VID4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD4VID4_Clone)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkVectorInverseFFTImageFilterVICD4VID4
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD4VID4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorInverseFFTImageFilterVICD4VID4

        Create a new object of the class itkVectorInverseFFTImageFilterVICD4VID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorInverseFFTImageFilterVICD4VID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorInverseFFTImageFilterVICD4VID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorInverseFFTImageFilterVICD4VID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorInverseFFTImageFilterVICD4VID4 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD4VID4_swigregister(itkVectorInverseFFTImageFilterVICD4VID4)
itkVectorInverseFFTImageFilterVICD4VID4___New_orig__ = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD4VID4___New_orig__
itkVectorInverseFFTImageFilterVICD4VID4_cast = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICD4VID4_cast


def itkVectorInverseFFTImageFilterVICF2VIF2_New():
    return itkVectorInverseFFTImageFilterVICF2VIF2.New()

class itkVectorInverseFFTImageFilterVICF2VIF2(itkImageToImageFilterVICF2VIF2):
    r"""Proxy of C++ itkVectorInverseFFTImageFilterVICF2VIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2VIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2VIF2_Clone)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkVectorInverseFFTImageFilterVICF2VIF2
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2VIF2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorInverseFFTImageFilterVICF2VIF2

        Create a new object of the class itkVectorInverseFFTImageFilterVICF2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorInverseFFTImageFilterVICF2VIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorInverseFFTImageFilterVICF2VIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorInverseFFTImageFilterVICF2VIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorInverseFFTImageFilterVICF2VIF2 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2VIF2_swigregister(itkVectorInverseFFTImageFilterVICF2VIF2)
itkVectorInverseFFTImageFilterVICF2VIF2___New_orig__ = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2VIF2___New_orig__
itkVectorInverseFFTImageFilterVICF2VIF2_cast = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF2VIF2_cast


def itkVectorInverseFFTImageFilterVICF3VIF3_New():
    return itkVectorInverseFFTImageFilterVICF3VIF3.New()

class itkVectorInverseFFTImageFilterVICF3VIF3(itkImageToImageFilterVICF3VIF3):
    r"""Proxy of C++ itkVectorInverseFFTImageFilterVICF3VIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3VIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3VIF3_Clone)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkVectorInverseFFTImageFilterVICF3VIF3
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3VIF3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorInverseFFTImageFilterVICF3VIF3

        Create a new object of the class itkVectorInverseFFTImageFilterVICF3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorInverseFFTImageFilterVICF3VIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorInverseFFTImageFilterVICF3VIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorInverseFFTImageFilterVICF3VIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorInverseFFTImageFilterVICF3VIF3 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3VIF3_swigregister(itkVectorInverseFFTImageFilterVICF3VIF3)
itkVectorInverseFFTImageFilterVICF3VIF3___New_orig__ = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3VIF3___New_orig__
itkVectorInverseFFTImageFilterVICF3VIF3_cast = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF3VIF3_cast


def itkVectorInverseFFTImageFilterVICF4VIF4_New():
    return itkVectorInverseFFTImageFilterVICF4VIF4.New()

class itkVectorInverseFFTImageFilterVICF4VIF4(itkImageToImageFilterVICF4VIF4):
    r"""Proxy of C++ itkVectorInverseFFTImageFilterVICF4VIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF4VIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF4VIF4_Clone)
    __swig_destroy__ = _itkVectorInverseFFTImageFilterPython.delete_itkVectorInverseFFTImageFilterVICF4VIF4
    cast = _swig_new_static_method(_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF4VIF4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorInverseFFTImageFilterVICF4VIF4

        Create a new object of the class itkVectorInverseFFTImageFilterVICF4VIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorInverseFFTImageFilterVICF4VIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorInverseFFTImageFilterVICF4VIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorInverseFFTImageFilterVICF4VIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorInverseFFTImageFilterVICF4VIF4 in _itkVectorInverseFFTImageFilterPython:
_itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF4VIF4_swigregister(itkVectorInverseFFTImageFilterVICF4VIF4)
itkVectorInverseFFTImageFilterVICF4VIF4___New_orig__ = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF4VIF4___New_orig__
itkVectorInverseFFTImageFilterVICF4VIF4_cast = _itkVectorInverseFFTImageFilterPython.itkVectorInverseFFTImageFilterVICF4VIF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def vector_inverse_fft_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for VectorInverseFFTImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.VectorInverseFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vector_inverse_fft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.VectorInverseFFTImageFilter
    vector_inverse_fft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vector_inverse_fft_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_to_image_filter(*args: itkt.ImageLike, **kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ImageToImageFilter"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.ImageToImageFilter
    image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__





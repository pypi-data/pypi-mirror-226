# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFrequencyShrinkViaInverseFFTImageFilterPython
else:
    import _itkFrequencyShrinkViaInverseFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFrequencyShrinkViaInverseFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFrequencyShrinkViaInverseFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterBPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkFrequencyShrinkViaInverseFFTImageFilterICD2_New():
    return itkFrequencyShrinkViaInverseFFTImageFilterICD2.New()

class itkFrequencyShrinkViaInverseFFTImageFilterICD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkFrequencyShrinkViaInverseFFTImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.delete_itkFrequencyShrinkViaInverseFFTImageFilterICD2
    cast = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkViaInverseFFTImageFilterICD2

        Create a new object of the class itkFrequencyShrinkViaInverseFFTImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkViaInverseFFTImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkViaInverseFFTImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkViaInverseFFTImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkViaInverseFFTImageFilterICD2 in _itkFrequencyShrinkViaInverseFFTImageFilterPython:
_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_swigregister(itkFrequencyShrinkViaInverseFFTImageFilterICD2)
itkFrequencyShrinkViaInverseFFTImageFilterICD2___New_orig__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2___New_orig__
itkFrequencyShrinkViaInverseFFTImageFilterICD2_cast = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD2_cast


def itkFrequencyShrinkViaInverseFFTImageFilterICD3_New():
    return itkFrequencyShrinkViaInverseFFTImageFilterICD3.New()

class itkFrequencyShrinkViaInverseFFTImageFilterICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkFrequencyShrinkViaInverseFFTImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.delete_itkFrequencyShrinkViaInverseFFTImageFilterICD3
    cast = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkViaInverseFFTImageFilterICD3

        Create a new object of the class itkFrequencyShrinkViaInverseFFTImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkViaInverseFFTImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkViaInverseFFTImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkViaInverseFFTImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkViaInverseFFTImageFilterICD3 in _itkFrequencyShrinkViaInverseFFTImageFilterPython:
_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_swigregister(itkFrequencyShrinkViaInverseFFTImageFilterICD3)
itkFrequencyShrinkViaInverseFFTImageFilterICD3___New_orig__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3___New_orig__
itkFrequencyShrinkViaInverseFFTImageFilterICD3_cast = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD3_cast


def itkFrequencyShrinkViaInverseFFTImageFilterICD4_New():
    return itkFrequencyShrinkViaInverseFFTImageFilterICD4.New()

class itkFrequencyShrinkViaInverseFFTImageFilterICD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkFrequencyShrinkViaInverseFFTImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.delete_itkFrequencyShrinkViaInverseFFTImageFilterICD4
    cast = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkViaInverseFFTImageFilterICD4

        Create a new object of the class itkFrequencyShrinkViaInverseFFTImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkViaInverseFFTImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkViaInverseFFTImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkViaInverseFFTImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkViaInverseFFTImageFilterICD4 in _itkFrequencyShrinkViaInverseFFTImageFilterPython:
_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_swigregister(itkFrequencyShrinkViaInverseFFTImageFilterICD4)
itkFrequencyShrinkViaInverseFFTImageFilterICD4___New_orig__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4___New_orig__
itkFrequencyShrinkViaInverseFFTImageFilterICD4_cast = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICD4_cast


def itkFrequencyShrinkViaInverseFFTImageFilterICF2_New():
    return itkFrequencyShrinkViaInverseFFTImageFilterICF2.New()

class itkFrequencyShrinkViaInverseFFTImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkFrequencyShrinkViaInverseFFTImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.delete_itkFrequencyShrinkViaInverseFFTImageFilterICF2
    cast = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkViaInverseFFTImageFilterICF2

        Create a new object of the class itkFrequencyShrinkViaInverseFFTImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkViaInverseFFTImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkViaInverseFFTImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkViaInverseFFTImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkViaInverseFFTImageFilterICF2 in _itkFrequencyShrinkViaInverseFFTImageFilterPython:
_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_swigregister(itkFrequencyShrinkViaInverseFFTImageFilterICF2)
itkFrequencyShrinkViaInverseFFTImageFilterICF2___New_orig__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2___New_orig__
itkFrequencyShrinkViaInverseFFTImageFilterICF2_cast = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF2_cast


def itkFrequencyShrinkViaInverseFFTImageFilterICF3_New():
    return itkFrequencyShrinkViaInverseFFTImageFilterICF3.New()

class itkFrequencyShrinkViaInverseFFTImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkFrequencyShrinkViaInverseFFTImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.delete_itkFrequencyShrinkViaInverseFFTImageFilterICF3
    cast = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkViaInverseFFTImageFilterICF3

        Create a new object of the class itkFrequencyShrinkViaInverseFFTImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkViaInverseFFTImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkViaInverseFFTImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkViaInverseFFTImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkViaInverseFFTImageFilterICF3 in _itkFrequencyShrinkViaInverseFFTImageFilterPython:
_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_swigregister(itkFrequencyShrinkViaInverseFFTImageFilterICF3)
itkFrequencyShrinkViaInverseFFTImageFilterICF3___New_orig__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3___New_orig__
itkFrequencyShrinkViaInverseFFTImageFilterICF3_cast = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF3_cast


def itkFrequencyShrinkViaInverseFFTImageFilterICF4_New():
    return itkFrequencyShrinkViaInverseFFTImageFilterICF4.New()

class itkFrequencyShrinkViaInverseFFTImageFilterICF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkFrequencyShrinkViaInverseFFTImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_Clone)
    SetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_SetShrinkFactors)
    SetShrinkFactor = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_SetShrinkFactor)
    GetShrinkFactors = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_GetShrinkFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_GenerateInputRequestedRegion)
    ImageTypeHasNumericTraitsCheck = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_ImageTypeHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.delete_itkFrequencyShrinkViaInverseFFTImageFilterICF4
    cast = _swig_new_static_method(_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_cast)

    def New(*args, **kargs):
        """New() -> itkFrequencyShrinkViaInverseFFTImageFilterICF4

        Create a new object of the class itkFrequencyShrinkViaInverseFFTImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFrequencyShrinkViaInverseFFTImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFrequencyShrinkViaInverseFFTImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFrequencyShrinkViaInverseFFTImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFrequencyShrinkViaInverseFFTImageFilterICF4 in _itkFrequencyShrinkViaInverseFFTImageFilterPython:
_itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_swigregister(itkFrequencyShrinkViaInverseFFTImageFilterICF4)
itkFrequencyShrinkViaInverseFFTImageFilterICF4___New_orig__ = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4___New_orig__
itkFrequencyShrinkViaInverseFFTImageFilterICF4_cast = _itkFrequencyShrinkViaInverseFFTImageFilterPython.itkFrequencyShrinkViaInverseFFTImageFilterICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def frequency_shrink_via_inverse_fft_image_filter(*args: itkt.ImageLike,  shrink_factors: Union[Sequence[int], int]=..., shrink_factor: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FrequencyShrinkViaInverseFFTImageFilter"""
    import itk

    kwarg_typehints = { 'shrink_factors':shrink_factors,'shrink_factor':shrink_factor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.FrequencyShrinkViaInverseFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def frequency_shrink_via_inverse_fft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.FrequencyShrinkViaInverseFFTImageFilter
    frequency_shrink_via_inverse_fft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    frequency_shrink_via_inverse_fft_image_filter.__doc__ = filter_object.__doc__





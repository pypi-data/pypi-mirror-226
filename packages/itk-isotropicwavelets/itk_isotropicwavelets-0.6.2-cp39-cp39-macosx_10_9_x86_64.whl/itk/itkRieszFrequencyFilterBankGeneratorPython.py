# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRieszFrequencyFilterBankGeneratorPython
else:
    import _itkRieszFrequencyFilterBankGeneratorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkRieszFrequencyFilterBankGeneratorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkRieszFrequencyFilterBankGeneratorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkGenerateImageSourcePython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython

def itkRieszFrequencyFilterBankGeneratorICD2_New():
    return itkRieszFrequencyFilterBankGeneratorICD2.New()

class itkRieszFrequencyFilterBankGeneratorICD2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD2):
    r"""Proxy of C++ itkRieszFrequencyFilterBankGeneratorICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_Clone)
    GetOutputs = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_GetOutputs)
    SetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_GetOrder)
    GetModifiableEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_GetEvaluator)
    __swig_destroy__ = _itkRieszFrequencyFilterBankGeneratorPython.delete_itkRieszFrequencyFilterBankGeneratorICD2
    cast = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_cast)

    def New(*args, **kargs):
        """New() -> itkRieszFrequencyFilterBankGeneratorICD2

        Create a new object of the class itkRieszFrequencyFilterBankGeneratorICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRieszFrequencyFilterBankGeneratorICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRieszFrequencyFilterBankGeneratorICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRieszFrequencyFilterBankGeneratorICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRieszFrequencyFilterBankGeneratorICD2 in _itkRieszFrequencyFilterBankGeneratorPython:
_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_swigregister(itkRieszFrequencyFilterBankGeneratorICD2)
itkRieszFrequencyFilterBankGeneratorICD2___New_orig__ = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2___New_orig__
itkRieszFrequencyFilterBankGeneratorICD2_cast = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD2_cast


def itkRieszFrequencyFilterBankGeneratorICD3_New():
    return itkRieszFrequencyFilterBankGeneratorICD3.New()

class itkRieszFrequencyFilterBankGeneratorICD3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD3):
    r"""Proxy of C++ itkRieszFrequencyFilterBankGeneratorICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_Clone)
    GetOutputs = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_GetOutputs)
    SetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_GetOrder)
    GetModifiableEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_GetEvaluator)
    __swig_destroy__ = _itkRieszFrequencyFilterBankGeneratorPython.delete_itkRieszFrequencyFilterBankGeneratorICD3
    cast = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_cast)

    def New(*args, **kargs):
        """New() -> itkRieszFrequencyFilterBankGeneratorICD3

        Create a new object of the class itkRieszFrequencyFilterBankGeneratorICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRieszFrequencyFilterBankGeneratorICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRieszFrequencyFilterBankGeneratorICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRieszFrequencyFilterBankGeneratorICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRieszFrequencyFilterBankGeneratorICD3 in _itkRieszFrequencyFilterBankGeneratorPython:
_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_swigregister(itkRieszFrequencyFilterBankGeneratorICD3)
itkRieszFrequencyFilterBankGeneratorICD3___New_orig__ = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3___New_orig__
itkRieszFrequencyFilterBankGeneratorICD3_cast = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD3_cast


def itkRieszFrequencyFilterBankGeneratorICD4_New():
    return itkRieszFrequencyFilterBankGeneratorICD4.New()

class itkRieszFrequencyFilterBankGeneratorICD4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICD4):
    r"""Proxy of C++ itkRieszFrequencyFilterBankGeneratorICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_Clone)
    GetOutputs = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_GetOutputs)
    SetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_SetOrder)
    GetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_GetOrder)
    GetModifiableEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_GetEvaluator)
    __swig_destroy__ = _itkRieszFrequencyFilterBankGeneratorPython.delete_itkRieszFrequencyFilterBankGeneratorICD4
    cast = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_cast)

    def New(*args, **kargs):
        """New() -> itkRieszFrequencyFilterBankGeneratorICD4

        Create a new object of the class itkRieszFrequencyFilterBankGeneratorICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRieszFrequencyFilterBankGeneratorICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRieszFrequencyFilterBankGeneratorICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRieszFrequencyFilterBankGeneratorICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRieszFrequencyFilterBankGeneratorICD4 in _itkRieszFrequencyFilterBankGeneratorPython:
_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_swigregister(itkRieszFrequencyFilterBankGeneratorICD4)
itkRieszFrequencyFilterBankGeneratorICD4___New_orig__ = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4___New_orig__
itkRieszFrequencyFilterBankGeneratorICD4_cast = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICD4_cast


def itkRieszFrequencyFilterBankGeneratorICF2_New():
    return itkRieszFrequencyFilterBankGeneratorICF2.New()

class itkRieszFrequencyFilterBankGeneratorICF2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF2):
    r"""Proxy of C++ itkRieszFrequencyFilterBankGeneratorICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_Clone)
    GetOutputs = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_GetOutputs)
    SetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_GetOrder)
    GetModifiableEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_GetEvaluator)
    __swig_destroy__ = _itkRieszFrequencyFilterBankGeneratorPython.delete_itkRieszFrequencyFilterBankGeneratorICF2
    cast = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_cast)

    def New(*args, **kargs):
        """New() -> itkRieszFrequencyFilterBankGeneratorICF2

        Create a new object of the class itkRieszFrequencyFilterBankGeneratorICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRieszFrequencyFilterBankGeneratorICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRieszFrequencyFilterBankGeneratorICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRieszFrequencyFilterBankGeneratorICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRieszFrequencyFilterBankGeneratorICF2 in _itkRieszFrequencyFilterBankGeneratorPython:
_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_swigregister(itkRieszFrequencyFilterBankGeneratorICF2)
itkRieszFrequencyFilterBankGeneratorICF2___New_orig__ = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2___New_orig__
itkRieszFrequencyFilterBankGeneratorICF2_cast = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF2_cast


def itkRieszFrequencyFilterBankGeneratorICF3_New():
    return itkRieszFrequencyFilterBankGeneratorICF3.New()

class itkRieszFrequencyFilterBankGeneratorICF3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF3):
    r"""Proxy of C++ itkRieszFrequencyFilterBankGeneratorICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_Clone)
    GetOutputs = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_GetOutputs)
    SetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_GetOrder)
    GetModifiableEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_GetEvaluator)
    __swig_destroy__ = _itkRieszFrequencyFilterBankGeneratorPython.delete_itkRieszFrequencyFilterBankGeneratorICF3
    cast = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_cast)

    def New(*args, **kargs):
        """New() -> itkRieszFrequencyFilterBankGeneratorICF3

        Create a new object of the class itkRieszFrequencyFilterBankGeneratorICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRieszFrequencyFilterBankGeneratorICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRieszFrequencyFilterBankGeneratorICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRieszFrequencyFilterBankGeneratorICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRieszFrequencyFilterBankGeneratorICF3 in _itkRieszFrequencyFilterBankGeneratorPython:
_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_swigregister(itkRieszFrequencyFilterBankGeneratorICF3)
itkRieszFrequencyFilterBankGeneratorICF3___New_orig__ = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3___New_orig__
itkRieszFrequencyFilterBankGeneratorICF3_cast = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF3_cast


def itkRieszFrequencyFilterBankGeneratorICF4_New():
    return itkRieszFrequencyFilterBankGeneratorICF4.New()

class itkRieszFrequencyFilterBankGeneratorICF4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceICF4):
    r"""Proxy of C++ itkRieszFrequencyFilterBankGeneratorICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_Clone)
    GetOutputs = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_GetOutputs)
    SetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_SetOrder)
    GetOrder = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_GetOrder)
    GetModifiableEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_GetModifiableEvaluator)
    GetEvaluator = _swig_new_instance_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_GetEvaluator)
    __swig_destroy__ = _itkRieszFrequencyFilterBankGeneratorPython.delete_itkRieszFrequencyFilterBankGeneratorICF4
    cast = _swig_new_static_method(_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_cast)

    def New(*args, **kargs):
        """New() -> itkRieszFrequencyFilterBankGeneratorICF4

        Create a new object of the class itkRieszFrequencyFilterBankGeneratorICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRieszFrequencyFilterBankGeneratorICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRieszFrequencyFilterBankGeneratorICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRieszFrequencyFilterBankGeneratorICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRieszFrequencyFilterBankGeneratorICF4 in _itkRieszFrequencyFilterBankGeneratorPython:
_itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_swigregister(itkRieszFrequencyFilterBankGeneratorICF4)
itkRieszFrequencyFilterBankGeneratorICF4___New_orig__ = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4___New_orig__
itkRieszFrequencyFilterBankGeneratorICF4_cast = _itkRieszFrequencyFilterBankGeneratorPython.itkRieszFrequencyFilterBankGeneratorICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def riesz_frequency_filter_bank_generator(*args,  order: int=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for RieszFrequencyFilterBankGenerator"""
    import itk

    kwarg_typehints = { 'order':order,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.RieszFrequencyFilterBankGenerator.New(*args, **kwargs)
    return instance.__internal_call__()

def riesz_frequency_filter_bank_generator_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.IsotropicWavelets.RieszFrequencyFilterBankGenerator
    riesz_frequency_filter_bank_generator.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    riesz_frequency_filter_bank_generator.__doc__ = filter_object.__doc__





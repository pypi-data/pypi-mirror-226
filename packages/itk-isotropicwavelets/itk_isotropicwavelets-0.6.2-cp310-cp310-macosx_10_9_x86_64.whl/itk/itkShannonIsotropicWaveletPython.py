# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkShannonIsotropicWaveletPython
else:
    import _itkShannonIsotropicWaveletPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkShannonIsotropicWaveletPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkShannonIsotropicWaveletPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIsotropicWaveletFrequencyFunctionPython
import itk.itkIsotropicFrequencyFunctionPython
import itk.itkFrequencyFunctionPython

def itkShannonIsotropicWaveletD2VD2_New():
    return itkShannonIsotropicWaveletD2VD2.New()

class itkShannonIsotropicWaveletD2VD2(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2VD2):
    r"""Proxy of C++ itkShannonIsotropicWaveletD2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD2VD2_Clone)
    __swig_destroy__ = _itkShannonIsotropicWaveletPython.delete_itkShannonIsotropicWaveletD2VD2
    cast = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkShannonIsotropicWaveletD2VD2

        Create a new object of the class itkShannonIsotropicWaveletD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShannonIsotropicWaveletD2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShannonIsotropicWaveletD2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShannonIsotropicWaveletD2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShannonIsotropicWaveletD2VD2 in _itkShannonIsotropicWaveletPython:
_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD2VD2_swigregister(itkShannonIsotropicWaveletD2VD2)
itkShannonIsotropicWaveletD2VD2___New_orig__ = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD2VD2___New_orig__
itkShannonIsotropicWaveletD2VD2_cast = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD2VD2_cast


def itkShannonIsotropicWaveletD3VD3_New():
    return itkShannonIsotropicWaveletD3VD3.New()

class itkShannonIsotropicWaveletD3VD3(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3VD3):
    r"""Proxy of C++ itkShannonIsotropicWaveletD3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD3VD3_Clone)
    __swig_destroy__ = _itkShannonIsotropicWaveletPython.delete_itkShannonIsotropicWaveletD3VD3
    cast = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkShannonIsotropicWaveletD3VD3

        Create a new object of the class itkShannonIsotropicWaveletD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShannonIsotropicWaveletD3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShannonIsotropicWaveletD3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShannonIsotropicWaveletD3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShannonIsotropicWaveletD3VD3 in _itkShannonIsotropicWaveletPython:
_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD3VD3_swigregister(itkShannonIsotropicWaveletD3VD3)
itkShannonIsotropicWaveletD3VD3___New_orig__ = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD3VD3___New_orig__
itkShannonIsotropicWaveletD3VD3_cast = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD3VD3_cast


def itkShannonIsotropicWaveletD4VD4_New():
    return itkShannonIsotropicWaveletD4VD4.New()

class itkShannonIsotropicWaveletD4VD4(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4VD4):
    r"""Proxy of C++ itkShannonIsotropicWaveletD4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD4VD4_Clone)
    __swig_destroy__ = _itkShannonIsotropicWaveletPython.delete_itkShannonIsotropicWaveletD4VD4
    cast = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkShannonIsotropicWaveletD4VD4

        Create a new object of the class itkShannonIsotropicWaveletD4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShannonIsotropicWaveletD4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShannonIsotropicWaveletD4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShannonIsotropicWaveletD4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShannonIsotropicWaveletD4VD4 in _itkShannonIsotropicWaveletPython:
_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD4VD4_swigregister(itkShannonIsotropicWaveletD4VD4)
itkShannonIsotropicWaveletD4VD4___New_orig__ = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD4VD4___New_orig__
itkShannonIsotropicWaveletD4VD4_cast = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletD4VD4_cast


def itkShannonIsotropicWaveletF2VD2_New():
    return itkShannonIsotropicWaveletF2VD2.New()

class itkShannonIsotropicWaveletF2VD2(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2VD2):
    r"""Proxy of C++ itkShannonIsotropicWaveletF2VD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF2VD2___New_orig__)
    Clone = _swig_new_instance_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF2VD2_Clone)
    __swig_destroy__ = _itkShannonIsotropicWaveletPython.delete_itkShannonIsotropicWaveletF2VD2
    cast = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF2VD2_cast)

    def New(*args, **kargs):
        """New() -> itkShannonIsotropicWaveletF2VD2

        Create a new object of the class itkShannonIsotropicWaveletF2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShannonIsotropicWaveletF2VD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShannonIsotropicWaveletF2VD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShannonIsotropicWaveletF2VD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShannonIsotropicWaveletF2VD2 in _itkShannonIsotropicWaveletPython:
_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF2VD2_swigregister(itkShannonIsotropicWaveletF2VD2)
itkShannonIsotropicWaveletF2VD2___New_orig__ = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF2VD2___New_orig__
itkShannonIsotropicWaveletF2VD2_cast = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF2VD2_cast


def itkShannonIsotropicWaveletF3VD3_New():
    return itkShannonIsotropicWaveletF3VD3.New()

class itkShannonIsotropicWaveletF3VD3(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3VD3):
    r"""Proxy of C++ itkShannonIsotropicWaveletF3VD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF3VD3___New_orig__)
    Clone = _swig_new_instance_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF3VD3_Clone)
    __swig_destroy__ = _itkShannonIsotropicWaveletPython.delete_itkShannonIsotropicWaveletF3VD3
    cast = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF3VD3_cast)

    def New(*args, **kargs):
        """New() -> itkShannonIsotropicWaveletF3VD3

        Create a new object of the class itkShannonIsotropicWaveletF3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShannonIsotropicWaveletF3VD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShannonIsotropicWaveletF3VD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShannonIsotropicWaveletF3VD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShannonIsotropicWaveletF3VD3 in _itkShannonIsotropicWaveletPython:
_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF3VD3_swigregister(itkShannonIsotropicWaveletF3VD3)
itkShannonIsotropicWaveletF3VD3___New_orig__ = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF3VD3___New_orig__
itkShannonIsotropicWaveletF3VD3_cast = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF3VD3_cast


def itkShannonIsotropicWaveletF4VD4_New():
    return itkShannonIsotropicWaveletF4VD4.New()

class itkShannonIsotropicWaveletF4VD4(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4VD4):
    r"""Proxy of C++ itkShannonIsotropicWaveletF4VD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF4VD4___New_orig__)
    Clone = _swig_new_instance_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF4VD4_Clone)
    __swig_destroy__ = _itkShannonIsotropicWaveletPython.delete_itkShannonIsotropicWaveletF4VD4
    cast = _swig_new_static_method(_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF4VD4_cast)

    def New(*args, **kargs):
        """New() -> itkShannonIsotropicWaveletF4VD4

        Create a new object of the class itkShannonIsotropicWaveletF4VD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShannonIsotropicWaveletF4VD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShannonIsotropicWaveletF4VD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShannonIsotropicWaveletF4VD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShannonIsotropicWaveletF4VD4 in _itkShannonIsotropicWaveletPython:
_itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF4VD4_swigregister(itkShannonIsotropicWaveletF4VD4)
itkShannonIsotropicWaveletF4VD4___New_orig__ = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF4VD4___New_orig__
itkShannonIsotropicWaveletF4VD4_cast = _itkShannonIsotropicWaveletPython.itkShannonIsotropicWaveletF4VD4_cast




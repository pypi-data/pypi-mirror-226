#!/usr/bin/env python

# Generate an observing file for a mosaic

# RLM 19 Jan 2017 
# cam 12 June 2017 - adding utstart

import re,  sys, string
import numpy as np 
from optparse import OptionParser
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.time import Time

from datetime import *
from time import localtime, strftime

usage = 'Generates .sch observing file for mosaicing imaging wide fields'
vers = "1.0"

def get_args():
	parser = OptionParser(description='Program %prog',version = vers, usage=usage)
	parser.add_option('-N', dest = 'field_name', metavar = 'Field name', action ='store', default = 'Field', help = 'Field name')
	parser.add_option('-c', dest = 'coords', metavar='Coords', action = 'store', help = 'J2000 coords of field center:  hh:mm:ss, dd:mm:ss') 
	parser.add_option('-l', dest = 'overlap', metavar='Overlap', action = 'store', default = 2, type = float, help = 'Overlap (arcmin)') 
	parser.add_option('-F', dest = 'fov', metavar='Field of view ', action = 'store', default = '27.5,27.5', help = 'Camera FOV (arcmin, arcmin)') 
	parser.add_option('-m', dest = 'ngrid', metavar='mosaic grid', action = 'store', default = '3,3', help = 'Mosaic gridsize, default 3,3') 
	parser.add_option('-f', dest = 'filters', metavar='Filters', action = 'store', default = '', help = 'Filters e.g. b,g,h') 
	parser.add_option('-d', dest = 'duration', metavar='Duration', default ='', action = 'store', help = 'Durations e.g. 10,20,60') 
	parser.add_option('-r', dest = 'repeat', metavar='Repeat', default = 1, type=float, action = 'store', help = 'Repeat count') 
	parser.add_option('-O', dest = 'obscode', metavar = 'Observer code', action ='store', default = 'frm', help = 'Observer code name e.g. gaa')
	parser.add_option('-o', dest = 'observer', metavar = 'Observer name', action ='store', default = '', help = 'Observer name')
	parser.add_option('-u', dest = 'utstime', metavar = 'UTSTART Time', action = 'store', default = '', help = 'UTSTART time hh:mm:ss')
	return parser.parse_args()


# Main program

# useful constants
arcmin = np.pi/(180.*60.)
deg = np.pi/180.


# Crack parser values, add to astropy coords, time structures
(opts, args) = get_args()

field_name = opts.field_name
fov_ra,fov_dec = [float(x)/60. for x in opts.fov.split(',')]
overlap = opts.overlap / 60.
nra, ndec = [int(x) for x in opts.ngrid.split(',')]
ra,dec= opts.coords.split(',')
coords = '%s %s' % (ra, dec)
c = SkyCoord(coords, unit=(u.hourangle, u.deg))
filters =  opts.filters.split(',')
durations = [float(x) for x in opts.duration.split(',')]
repeat = int(opts.repeat)
obscode = opts.obscode
obsname = opts.observer
if opts.utstime == '':
        utstart = ''
else:
        utstart = 'utstart ' + opts.utstime + ' '


# Write header info 
doy = strftime("%j",localtime())
fn = '%s%s.sch'% (obscode,doy)
obsfile = open(fn,'w')
obsfile.write('Title \'Mosaic imaging of %s\'\n' % field_name)
obsfile.write('Observer \'%s\'\n' % obsname)
obsfile.write('Comment \'Schedule generated by mk-mosaic-sched\'\n')
filter_str    = ','.join(map(str, filters))
duration_str  = ','.join(map(str, durations))
obsfile.write('Filter %s Duration %s Epoch 2000\n' % (filter_str, duration_str) )

# Generate coords of field centers
ra0 = c.ra.deg; dec0 = c.dec.deg
dra = (fov_ra - overlap) / np.cos(dec0 *deg) ; ddec = fov_dec - overlap
ra_list =  np.linspace(ra0 -  (nra-1)  * dra/2. ,  ra0 + (nra-1)  * dra/2. , nra)
dec_list = np.linspace(dec0 - (ndec-1) * ddec/2., dec0 + (ndec-1) * ddec/2., ndec)

# write grid coordinates to .sch file
for i in range(nra):
	for j in range(ndec):
		coords = '%7.3f %7.3f' % ( ra_list[i], dec_list[j] )
		c = SkyCoord(coords, unit=(u.deg, u.deg))
		source = '%s_%i%i' % (field_name,i,j)
		ra_str, dec_str  = c.to_string(style ='hmsdms', precision=1, sep=':', decimal =False).split()
		obsfile.write('source %s  ra %s  dec %s repeat %i %s/\n' % (source, ra_str, dec_str, repeat, utstart) )
obsfile.close()

# compute total observing time
dwell = 10 # estimated dwell time between images
tsum = 0
for t in durations:
		tsum += int(t)
tsum += dwell*len(filters)
ttot = ((nra)*(ndec)*repeat*tsum)/3600.
nimage = repeat*(nra)*(ndec)*len(filters)
print("============================================================")
print("Mosaic of %s" % field_name)
print("%i filters, %.0f minutes per filter sequence" % (len(filters), tsum/60.))
print('Repeat each filter sequence %i times' % repeat)
print("%i by %i fields, %i fields total" % (nra,ndec,(nra)*(ndec)))
print("%i images, Total observing time %0.1f hours" % (nimage,ttot))
print("Output schedule file: %s" % fn)
print("============================================================")

# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseRunExecution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'arguments': 'V1RunArgument',
        'artifacts': 'dict[str, ResponseActualArtifacts]',
        'create_dt': 'datetime',
        'id': 'int',
        'pipeline_step_execution': 'ResponseReducedPipelineStepExecution',
        'run_spec': 'ResponseRunSpec',
        'status': 'str',
        'status_last_updated': 'datetime',
        'volume_info_list': 'list[ResponseVolumeInfo]',
        'workload': 'ResponseWorkloadInfo'
    }

    attribute_map = {
        'arguments': 'arguments',
        'artifacts': 'artifacts',
        'create_dt': 'create_dt',
        'id': 'id',
        'pipeline_step_execution': 'pipeline_step_execution',
        'run_spec': 'run_spec',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'volume_info_list': 'volume_info_list',
        'workload': 'workload'
    }

    def __init__(self, arguments=None, artifacts=None, create_dt=None, id=None, pipeline_step_execution=None, run_spec=None, status=None, status_last_updated=None, volume_info_list=None, workload=None, local_vars_configuration=None):  # noqa: E501
        """ResponseRunExecution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._arguments = None
        self._artifacts = None
        self._create_dt = None
        self._id = None
        self._pipeline_step_execution = None
        self._run_spec = None
        self._status = None
        self._status_last_updated = None
        self._volume_info_list = None
        self._workload = None
        self.discriminator = None

        if arguments is not None:
            self.arguments = arguments
        if artifacts is not None:
            self.artifacts = artifacts
        if create_dt is not None:
            self.create_dt = create_dt
        if id is not None:
            self.id = id
        if pipeline_step_execution is not None:
            self.pipeline_step_execution = pipeline_step_execution
        if run_spec is not None:
            self.run_spec = run_spec
        if status is not None:
            self.status = status
        if status_last_updated is not None:
            self.status_last_updated = status_last_updated
        if volume_info_list is not None:
            self.volume_info_list = volume_info_list
        if workload is not None:
            self.workload = workload

    @property
    def arguments(self):
        """Gets the arguments of this ResponseRunExecution.  # noqa: E501


        :return: The arguments of this ResponseRunExecution.  # noqa: E501
        :rtype: V1RunArgument
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ResponseRunExecution.


        :param arguments: The arguments of this ResponseRunExecution.  # noqa: E501
        :type arguments: V1RunArgument
        """

        self._arguments = arguments

    @property
    def artifacts(self):
        """Gets the artifacts of this ResponseRunExecution.  # noqa: E501


        :return: The artifacts of this ResponseRunExecution.  # noqa: E501
        :rtype: dict[str, ResponseActualArtifacts]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ResponseRunExecution.


        :param artifacts: The artifacts of this ResponseRunExecution.  # noqa: E501
        :type artifacts: dict[str, ResponseActualArtifacts]
        """

        self._artifacts = artifacts

    @property
    def create_dt(self):
        """Gets the create_dt of this ResponseRunExecution.  # noqa: E501


        :return: The create_dt of this ResponseRunExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._create_dt

    @create_dt.setter
    def create_dt(self, create_dt):
        """Sets the create_dt of this ResponseRunExecution.


        :param create_dt: The create_dt of this ResponseRunExecution.  # noqa: E501
        :type create_dt: datetime
        """

        self._create_dt = create_dt

    @property
    def id(self):
        """Gets the id of this ResponseRunExecution.  # noqa: E501


        :return: The id of this ResponseRunExecution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseRunExecution.


        :param id: The id of this ResponseRunExecution.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def pipeline_step_execution(self):
        """Gets the pipeline_step_execution of this ResponseRunExecution.  # noqa: E501


        :return: The pipeline_step_execution of this ResponseRunExecution.  # noqa: E501
        :rtype: ResponseReducedPipelineStepExecution
        """
        return self._pipeline_step_execution

    @pipeline_step_execution.setter
    def pipeline_step_execution(self, pipeline_step_execution):
        """Sets the pipeline_step_execution of this ResponseRunExecution.


        :param pipeline_step_execution: The pipeline_step_execution of this ResponseRunExecution.  # noqa: E501
        :type pipeline_step_execution: ResponseReducedPipelineStepExecution
        """

        self._pipeline_step_execution = pipeline_step_execution

    @property
    def run_spec(self):
        """Gets the run_spec of this ResponseRunExecution.  # noqa: E501


        :return: The run_spec of this ResponseRunExecution.  # noqa: E501
        :rtype: ResponseRunSpec
        """
        return self._run_spec

    @run_spec.setter
    def run_spec(self, run_spec):
        """Sets the run_spec of this ResponseRunExecution.


        :param run_spec: The run_spec of this ResponseRunExecution.  # noqa: E501
        :type run_spec: ResponseRunSpec
        """

        self._run_spec = run_spec

    @property
    def status(self):
        """Gets the status of this ResponseRunExecution.  # noqa: E501


        :return: The status of this ResponseRunExecution.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseRunExecution.


        :param status: The status of this ResponseRunExecution.  # noqa: E501
        :type status: str
        """
        allowed_values = ["queued", "pending", "running", "failed", "completed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this ResponseRunExecution.  # noqa: E501


        :return: The status_last_updated of this ResponseRunExecution.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this ResponseRunExecution.


        :param status_last_updated: The status_last_updated of this ResponseRunExecution.  # noqa: E501
        :type status_last_updated: datetime
        """

        self._status_last_updated = status_last_updated

    @property
    def volume_info_list(self):
        """Gets the volume_info_list of this ResponseRunExecution.  # noqa: E501


        :return: The volume_info_list of this ResponseRunExecution.  # noqa: E501
        :rtype: list[ResponseVolumeInfo]
        """
        return self._volume_info_list

    @volume_info_list.setter
    def volume_info_list(self, volume_info_list):
        """Sets the volume_info_list of this ResponseRunExecution.


        :param volume_info_list: The volume_info_list of this ResponseRunExecution.  # noqa: E501
        :type volume_info_list: list[ResponseVolumeInfo]
        """

        self._volume_info_list = volume_info_list

    @property
    def workload(self):
        """Gets the workload of this ResponseRunExecution.  # noqa: E501


        :return: The workload of this ResponseRunExecution.  # noqa: E501
        :rtype: ResponseWorkloadInfo
        """
        return self._workload

    @workload.setter
    def workload(self, workload):
        """Sets the workload of this ResponseRunExecution.


        :param workload: The workload of this ResponseRunExecution.  # noqa: E501
        :type workload: ResponseWorkloadInfo
        """

        self._workload = workload

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseRunExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseRunExecution):
            return True

        return self.to_dict() != other.to_dict()

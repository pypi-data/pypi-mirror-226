# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmRunExecutionEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token': 'OrmAccessToken',
        'local_experiment': 'OrmExperiment',
        'pipeline_step_execution': 'OrmPipelineStepExecution',
        'run_spec': 'OrmRunSpec',
        'volume': 'list[OrmVolume]',
        'workload': 'OrmWorkload'
    }

    attribute_map = {
        'access_token': 'access_token',
        'local_experiment': 'local_experiment',
        'pipeline_step_execution': 'pipeline_step_execution',
        'run_spec': 'run_spec',
        'volume': 'volume',
        'workload': 'workload'
    }

    def __init__(self, access_token=None, local_experiment=None, pipeline_step_execution=None, run_spec=None, volume=None, workload=None, local_vars_configuration=None):  # noqa: E501
        """OrmRunExecutionEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_token = None
        self._local_experiment = None
        self._pipeline_step_execution = None
        self._run_spec = None
        self._volume = None
        self._workload = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if local_experiment is not None:
            self.local_experiment = local_experiment
        if pipeline_step_execution is not None:
            self.pipeline_step_execution = pipeline_step_execution
        if run_spec is not None:
            self.run_spec = run_spec
        if volume is not None:
            self.volume = volume
        if workload is not None:
            self.workload = workload

    @property
    def access_token(self):
        """Gets the access_token of this OrmRunExecutionEdges.  # noqa: E501


        :return: The access_token of this OrmRunExecutionEdges.  # noqa: E501
        :rtype: OrmAccessToken
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this OrmRunExecutionEdges.


        :param access_token: The access_token of this OrmRunExecutionEdges.  # noqa: E501
        :type access_token: OrmAccessToken
        """

        self._access_token = access_token

    @property
    def local_experiment(self):
        """Gets the local_experiment of this OrmRunExecutionEdges.  # noqa: E501


        :return: The local_experiment of this OrmRunExecutionEdges.  # noqa: E501
        :rtype: OrmExperiment
        """
        return self._local_experiment

    @local_experiment.setter
    def local_experiment(self, local_experiment):
        """Sets the local_experiment of this OrmRunExecutionEdges.


        :param local_experiment: The local_experiment of this OrmRunExecutionEdges.  # noqa: E501
        :type local_experiment: OrmExperiment
        """

        self._local_experiment = local_experiment

    @property
    def pipeline_step_execution(self):
        """Gets the pipeline_step_execution of this OrmRunExecutionEdges.  # noqa: E501


        :return: The pipeline_step_execution of this OrmRunExecutionEdges.  # noqa: E501
        :rtype: OrmPipelineStepExecution
        """
        return self._pipeline_step_execution

    @pipeline_step_execution.setter
    def pipeline_step_execution(self, pipeline_step_execution):
        """Sets the pipeline_step_execution of this OrmRunExecutionEdges.


        :param pipeline_step_execution: The pipeline_step_execution of this OrmRunExecutionEdges.  # noqa: E501
        :type pipeline_step_execution: OrmPipelineStepExecution
        """

        self._pipeline_step_execution = pipeline_step_execution

    @property
    def run_spec(self):
        """Gets the run_spec of this OrmRunExecutionEdges.  # noqa: E501


        :return: The run_spec of this OrmRunExecutionEdges.  # noqa: E501
        :rtype: OrmRunSpec
        """
        return self._run_spec

    @run_spec.setter
    def run_spec(self, run_spec):
        """Sets the run_spec of this OrmRunExecutionEdges.


        :param run_spec: The run_spec of this OrmRunExecutionEdges.  # noqa: E501
        :type run_spec: OrmRunSpec
        """

        self._run_spec = run_spec

    @property
    def volume(self):
        """Gets the volume of this OrmRunExecutionEdges.  # noqa: E501


        :return: The volume of this OrmRunExecutionEdges.  # noqa: E501
        :rtype: list[OrmVolume]
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this OrmRunExecutionEdges.


        :param volume: The volume of this OrmRunExecutionEdges.  # noqa: E501
        :type volume: list[OrmVolume]
        """

        self._volume = volume

    @property
    def workload(self):
        """Gets the workload of this OrmRunExecutionEdges.  # noqa: E501


        :return: The workload of this OrmRunExecutionEdges.  # noqa: E501
        :rtype: OrmWorkload
        """
        return self._workload

    @workload.setter
    def workload(self, workload):
        """Sets the workload of this OrmRunExecutionEdges.


        :param workload: The workload of this OrmRunExecutionEdges.  # noqa: E501
        :type workload: OrmWorkload
        """

        self._workload = workload

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmRunExecutionEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmRunExecutionEdges):
            return True

        return self.to_dict() != other.to_dict()

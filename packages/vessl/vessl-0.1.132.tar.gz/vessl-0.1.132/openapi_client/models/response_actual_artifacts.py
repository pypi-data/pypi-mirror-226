# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseActualArtifacts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifacts': 'list[ResponseArtifact]',
        'mount_name': 'str',
        'mount_path': 'str',
        'volume_id': 'int'
    }

    attribute_map = {
        'artifacts': 'artifacts',
        'mount_name': 'mount_name',
        'mount_path': 'mount_path',
        'volume_id': 'volume_id'
    }

    def __init__(self, artifacts=None, mount_name=None, mount_path=None, volume_id=None, local_vars_configuration=None):  # noqa: E501
        """ResponseActualArtifacts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._artifacts = None
        self._mount_name = None
        self._mount_path = None
        self._volume_id = None
        self.discriminator = None

        if artifacts is not None:
            self.artifacts = artifacts
        if mount_name is not None:
            self.mount_name = mount_name
        if mount_path is not None:
            self.mount_path = mount_path
        self.volume_id = volume_id

    @property
    def artifacts(self):
        """Gets the artifacts of this ResponseActualArtifacts.  # noqa: E501


        :return: The artifacts of this ResponseActualArtifacts.  # noqa: E501
        :rtype: list[ResponseArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ResponseActualArtifacts.


        :param artifacts: The artifacts of this ResponseActualArtifacts.  # noqa: E501
        :type artifacts: list[ResponseArtifact]
        """

        self._artifacts = artifacts

    @property
    def mount_name(self):
        """Gets the mount_name of this ResponseActualArtifacts.  # noqa: E501


        :return: The mount_name of this ResponseActualArtifacts.  # noqa: E501
        :rtype: str
        """
        return self._mount_name

    @mount_name.setter
    def mount_name(self, mount_name):
        """Sets the mount_name of this ResponseActualArtifacts.


        :param mount_name: The mount_name of this ResponseActualArtifacts.  # noqa: E501
        :type mount_name: str
        """

        self._mount_name = mount_name

    @property
    def mount_path(self):
        """Gets the mount_path of this ResponseActualArtifacts.  # noqa: E501


        :return: The mount_path of this ResponseActualArtifacts.  # noqa: E501
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """Sets the mount_path of this ResponseActualArtifacts.


        :param mount_path: The mount_path of this ResponseActualArtifacts.  # noqa: E501
        :type mount_path: str
        """

        self._mount_path = mount_path

    @property
    def volume_id(self):
        """Gets the volume_id of this ResponseActualArtifacts.  # noqa: E501


        :return: The volume_id of this ResponseActualArtifacts.  # noqa: E501
        :rtype: int
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this ResponseActualArtifacts.


        :param volume_id: The volume_id of this ResponseActualArtifacts.  # noqa: E501
        :type volume_id: int
        """

        self._volume_id = volume_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseActualArtifacts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseActualArtifacts):
            return True

        return self.to_dict() != other.to_dict()

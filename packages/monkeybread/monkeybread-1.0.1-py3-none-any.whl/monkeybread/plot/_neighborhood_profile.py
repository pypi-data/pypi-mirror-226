from typing import Dict, Optional, Union, List, Tuple
import matplotlib as mpl
from matplotlib import pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd
from anndata import AnnData

def neighbors_profile_matrixplot(
        adata_neighbors: AnnData,
        niche_key: str,
        include_niches: Optional[List[str]]=None,
        show: Optional[bool]=True,
        clustermap_kwargs: Optional[Dict]=None
    ):
    """Heatmap plotting the mean, normalized neighbor count of each cell type within each 
    niche.

    Parameters
    ----------
    adata
        Annotated data matrix storing the neighborhood profiles. This data structure is
        generated by :func:`monkeybread.calc.neighborhood_profile` or by 
        :func:`monkeybread.calc.cellular_niches`
    niche_key
        Column name in `adata_neighbors.obs` storing the niche assigned to each cell
    include_niches
        List of niche IDs (values in `adata_neighbors.obs[niche_key]`) to include
        in the plot
    show
        If True, show the figure
    clustermap_kwargs
        Keyword arguments passed to `seaborn.clustermap`

    Returns
    -------
    A `seaborn.ClusterGrid` instance
    

    Example
    -------
    .. image:: https://raw.githubusercontent.com/immunitastx/monkeybread/main/docs/_static/neighbors_profile_matrixplot.png
    """

    if clustermap_kwargs is None:
        clustermap_kwargs = {}

    # Restrict to only specific niches
    if include_niches is not None:
        adata_plot = adata_neighbors[
            adata_neighbors.obs[niche_key].isin(include_niches)
        ]
    else:
        adata_plot = adata_neighbors
    adata_plot = adata_plot[:,sorted(adata_plot.var_names)]

    # Calculate the mean enrichment score
    X_means = []
    niches = []
    for niche in sorted(set(adata_plot.obs[niche_key])):
        X_niche = adata_plot[adata_plot.obs[niche_key] == niche].X
        mean_niche = np.mean(X_niche, axis=0)
        X_means.append(mean_niche)
        niches.append(niche)
    X_means = np.array(X_means)
    X_means.shape

    # Draw clustermap
    cg = sns.clustermap(
        data=pd.DataFrame(
            data=X_means,
            index=niches,
            columns=adata_plot.var_names
        ),
        **clustermap_kwargs
    )
    if show:
        plt.show()

    return cg

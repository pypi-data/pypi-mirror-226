Metadata-Version: 2.1
Name: fysh
Version: 0.0.1.8
Summary: Command Line Interface tool for flockfysh.
Home-page: https://github.com/flockfysh/ffysh
License: MIT
Keywords: files,manipulation,data science
Author: Ansh
Author-email: teamnebulaco@gmail.com
Requires-Python: >=3.8,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Provides-Extra: torch
Requires-Dist: aiofiles (>=23.2.1,<24.0.0)
Requires-Dist: aiohttp (>=3.8.5,<4.0.0)
Requires-Dist: aiosignal (>=1.3.1,<2.0.0)
Requires-Dist: async-timeout (>=4.0.3,<5.0.0)
Requires-Dist: attrs (>=23.1.0,<24.0.0)
Requires-Dist: build (>=0.10.0,<0.11.0)
Requires-Dist: cachecontrol (>=0.13.1,<0.14.0)
Requires-Dist: certifi (>=2023.7.22,<2024.0.0)
Requires-Dist: cffi (>=1.15.1,<2.0.0)
Requires-Dist: charset-normalizer (>=3.2.0,<4.0.0)
Requires-Dist: click (>=8.1.7,<9.0.0)
Requires-Dist: cmake (>=3.27.2,<4.0.0)
Requires-Dist: crashtest (>=0.4.1,<0.5.0)
Requires-Dist: cryptography (>=41.0.3,<42.0.0)
Requires-Dist: distlib (>=0.3.7,<0.4.0)
Requires-Dist: docopt (>=0.6.2,<0.7.0)
Requires-Dist: dulwich (>=0.21.5,<0.22.0)
Requires-Dist: exceptiongroup (>=1.1.3,<2.0.0)
Requires-Dist: filelock (>=3.12.2,<4.0.0)
Requires-Dist: frozenlist (>=1.4.0,<2.0.0)
Requires-Dist: gitdb (>=4.0.10,<5.0.0)
Requires-Dist: html5lib (>=1.1,<2.0)
Requires-Dist: idna (>=3.4,<4.0)
Requires-Dist: importlib-metadata (>=6.8.0,<7.0.0)
Requires-Dist: importlib-resources (>=6.0.1,<7.0.0)
Requires-Dist: iniconfig (>=2.0.0,<3.0.0)
Requires-Dist: installer (>=0.7.0,<0.8.0)
Requires-Dist: jaraco-classes (>=3.3.0,<4.0.0)
Requires-Dist: jeepney (>=0.8.0,<0.9.0)
Requires-Dist: jinja2 (>=3.1.2,<4.0.0)
Requires-Dist: jsonschema (>=4.19.0,<5.0.0)
Requires-Dist: jsonschema-specifications (>=2023.7.1,<2024.0.0)
Requires-Dist: keyring (>=24.2.0,<25.0.0)
Requires-Dist: lit (>=16.0.6,<17.0.0)
Requires-Dist: lockfile (>=0.12.2,<0.13.0)
Requires-Dist: markupsafe (>=2.1.3,<3.0.0)
Requires-Dist: more-itertools (>=10.1.0,<11.0.0)
Requires-Dist: mpmath (>=1.3.0,<2.0.0)
Requires-Dist: msgpack (>=1.0.5,<2.0.0)
Requires-Dist: multidict (>=6.0.4,<7.0.0)
Requires-Dist: networkx (>=3.1,<4.0)
Requires-Dist: ordered-set (>=4.1.0,<5.0.0)
Requires-Dist: packaging (>=23.1,<24.0)
Requires-Dist: pexpect (>=4.8.0,<5.0.0)
Requires-Dist: pip (>=23.2.1,<24.0.0)
Requires-Dist: pipreqs (>=0.4.13,<0.5.0)
Requires-Dist: pkginfo (>=1.9.6,<2.0.0)
Requires-Dist: pkgutil-resolve-name (>=1.3.10,<2.0.0)
Requires-Dist: platformdirs (>=3.10.0,<4.0.0)
Requires-Dist: pluggy (>=1.2.0,<2.0.0)
Requires-Dist: psutil (>=5.9.5,<6.0.0)
Requires-Dist: ptyprocess (>=0.7.0,<0.8.0)
Requires-Dist: pycparser (>=2.21,<3.0)
Requires-Dist: pyproject-hooks (>=1.0.0,<2.0.0)
Requires-Dist: pytest (>=7.4.0,<8.0.0)
Requires-Dist: python-dateutil (>=2.8.2,<3.0.0)
Requires-Dist: pytz (>=2023.3,<2024.0)
Requires-Dist: rapidfuzz (>=3.2.0,<4.0.0)
Requires-Dist: referencing (>=0.30.2,<0.31.0)
Requires-Dist: refyre (>=0.0.1.5.2,<0.0.2.0.0)
Requires-Dist: requests (>=2.31.0,<3.0.0)
Requires-Dist: requests-toolbelt (>=1.0.0,<2.0.0)
Requires-Dist: rpds-py (>=0.9.2,<0.10.0)
Requires-Dist: secretstorage (>=3.3.3,<4.0.0)
Requires-Dist: setuptools (>=68.1.2,<69.0.0)
Requires-Dist: shellingham (>=1.5.3,<2.0.0)
Requires-Dist: six (>=1.16.0,<2.0.0)
Requires-Dist: smmap (>=5.0.0,<6.0.0)
Requires-Dist: sympy (>=1.12,<2.0)
Requires-Dist: tomli (>=2.0.1,<3.0.0)
Requires-Dist: tomlkit (>=0.12.1,<0.13.0)
Requires-Dist: trove-classifiers (>=2023.8.7,<2024.0.0)
Requires-Dist: typing-extensions (>=4.7.1,<5.0.0)
Requires-Dist: tzdata (>=2023.3,<2024.0)
Requires-Dist: urllib3 (>=2.0.4,<3.0.0)
Requires-Dist: webencodings (>=0.5.1,<0.6.0)
Requires-Dist: wheel (>=0.41.1,<0.42.0)
Requires-Dist: yarg (>=0.1.9,<0.2.0)
Requires-Dist: yarl (>=1.9.2,<2.0.0)
Requires-Dist: zipp (>=3.16.2,<4.0.0)
Project-URL: Repository, https://github.com/flockfysh/ffysh
Description-Content-Type: text/markdown

# Build and upload to PyPI

To build the package: 
```shell
pip install build
python -m build
```

To upload the package: 
```shell
pip install twine
python -m twine upload --repository pypi dist/*
```


<!-- # ffysh

[Download example dataset (**DO NOT EXTRACT
**)](https://drive.google.com/file/d/1oEETaG6Ra_Ajq5j2awcEXdwmYbW4d2zg/view?usp=sharing) -->


# General use

Everything you need is stored in the ffysh import or in the ffysh CLI - you don't need to worry about its submodules.

## Create a project and log in to Flockfysh

1. Ensure your current working directory is correct.
2. From the terminal, run these two commands:
    ```shell
    ffysh init
    ffysh login
    ```
3. Log in to Flockfysh using the new browser window and click `Approve` to allow ffysh to use your account.

## Datasets

1. You'll first need to create a Dataset object first, using the 24-character ID of the dataset you want.
   If the dataset does not exist, an error will be thrown.

   ```python
   from ffysh import Dataset
   
   dataset = Dataset("some_dataset_id")
   ```

2. From there, you can create a stream object.
   ```python
   stream = dataset.create_stream()
   ```

Additional dataset attributes and methods:

```python
# Print dataset ID.
print(dataset.dataset_id)
```

## Streams

Streams are the basic unit of operation in ffysh.
Each stream is a lazy-loaded snapshot of a dataset, and it expands as much as the user needs.
Alternatively, you can use it as if it is a Python list.

1. First, store the ID of the stream for later use.

   ```python
   with open("stream_id.json", "w") as file:
       json.dump({"id": stream.stream_id}, file)
   ```

2. This allows the stream to reload from disk.

   ```python
   from ffysh import Stream
   
   with open("stream_id.json", "w") as file:
      stream = Stream.load(json.load(file)["id"]
   ```

   Note that each stream instance can only be created or loaded once, and if it is load twice, the old stream instance
   will be returned.

   ```python
   with open("stream_id.json", "w") as file:
      stream2 = Stream.load(json.load(file)["id"]
   
   print(stream is stream2) # True
   ```

3. Stream methods:
   ```python
   from ffysh import Stream
   
   with open("stream_id.json", "w") as file:
       stream = Stream.load(json.load(file)["id"]
   
   # Iteration
   for asset in stream:
       print(asset)
   
   # Stream indexing and slicing
   print(stream[0:5:2])
   
   # Loads the next 5 items that has not been loaded yet 
   # into the cache, and return them. If the stream ends, 
   # an empty list is returned, and any more calls will raise 
   # a StopIteration exception.
   stream.next_assets(5)
   
   # Expands the stream until the stream ends or is at least 100 
   # items long by loading more items from the cache.
   stream.expand(100)
   
   # Expands the stream until the end.
   stream.expand()
   
   # Convert the entire stream to a PyTorch zip.
   stream.to_pytorch("./dataset.zip", confidence_level=0.6)
   ```

## Limitations
1. You must not use a stream in 2 Python programs at a time. If you want to, create a second 
stream or quit the first program. Although you still have to re-download labels, images will be 
cached in a separate directory, so that multiple streams can access the same asset.
2. Even if assets and their labels are deleted remotely, they will stay intact locally.
We'll introduce a way to discard unused streams and purge redundant images in the future.


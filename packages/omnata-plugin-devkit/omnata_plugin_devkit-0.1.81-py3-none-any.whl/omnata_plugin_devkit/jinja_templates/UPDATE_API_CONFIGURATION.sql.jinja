create or replace procedure PLUGIN.UPDATE_API_CONFIGURATION(APP_DATABASE VARCHAR,
                                                EXTERNAL_ACCESS_INTEGRATION_NAMES ARRAY,
                                                OAUTH_SECRETS ARRAY,
                                                OTHER_SECRETS ARRAY)
   returns object
   language javascript
   execute as owner
as
$$
// snowflake object automatically injected by Snowpark

try{
    if (APP_DATABASE===undefined){
      throw "App must provide a database name";
    }
    var appsResults = snowflake.createStatement( {
        sqlText: `select 
                    APPLICATION_NAME,
                    EXTERNAL_ACCESS_INTEGRATION_NAMES,
                    OAUTH_SECRETS,
                    OTHER_SECRETS
                from DATA.OMNATA_REGISTRATION`,
        binds:[]
    } ).execute();
    if (!appsResults.next())  {
         if (EXTERNAL_ACCESS_INTEGRATION_NAMES===undefined){
            EXTERNAL_ACCESS_INTEGRATION_NAMES = [];
         }
         if (OAUTH_SECRETS===undefined){
            OAUTH_SECRETS = [];
         }
         if (OTHER_SECRETS===undefined){
            OTHER_SECRETS = [];
         }
         snowflake.createStatement( {
            sqlText: `insert into DATA.OMNATA_REGISTRATION(
                        APPLICATION_NAME,
                        EXTERNAL_ACCESS_INTEGRATION_NAMES,
                        OAUTH_SECRETS,
                        OTHER_SECRETS)
                        select ?,PARSE_JSON(?),PARSE_JSON(?),PARSE_JSON(?)`,
            binds:[APP_DATABASE,JSON.stringify(EXTERNAL_ACCESS_INTEGRATION_NAMES),JSON.stringify(OAUTH_SECRETS),JSON.stringify(OTHER_SECRETS)]
         } ).execute();
    }
    else{
      var currentApplicationName = appsResults.getColumnValue(1);
      if (currentApplicationName !== APP_DATABASE){
         throw `Plugin is already registered to Application ${currentApplicationName}. Reinstall the plugin in order for it to be managed by a different Application`;
      }
      if (EXTERNAL_ACCESS_INTEGRATION_NAMES===undefined){
         EXTERNAL_ACCESS_INTEGRATION_NAMES = appsResults.getColumnValue(2);
      }
      if (OAUTH_SECRETS===undefined){
         OAUTH_SECRETS = appsResults.getColumnValue(3);
      }
      if (OTHER_SECRETS===undefined){
         OTHER_SECRETS= appsResults.getColumnValue(4);
      }
      snowflake.createStatement( {
            sqlText: `update DATA.OMNATA_REGISTRATION
                        set EXTERNAL_ACCESS_INTEGRATION_NAMES = PARSE_JSON(?),
                        OAUTH_SECRETS = PARSE_JSON(?),
                        OTHER_SECRETS = PARSE_JSON(?)
                        where APPLICATION_NAME = ?`,
            binds:[JSON.stringify(EXTERNAL_ACCESS_INTEGRATION_NAMES),JSON.stringify(OAUTH_SECRETS),JSON.stringify(OTHER_SECRETS),APP_DATABASE]
         } ).execute();
    }
    var results = snowflake.createStatement( {
         sqlText: `call CONFIGURE_APIS()`,
         binds:[]
      } ).execute();
   results.next();
   var procResult = results.getColumnValue(1);
   if (procResult.success===false){
      throw procResult.error;
   }

    return {
        "success": true,
        "data": null
    }
}
catch(e){
   return {
      "success": false,
      "error": `UPDATE_API_CONFIGURATION: ${String(e)}`
   }
}
$$
;

grant usage on procedure PLUGIN.UPDATE_API_CONFIGURATION(VARCHAR,
                                                ARRAY,
                                                ARRAY,
                                                ARRAY)
to application role OMNATA_MANAGEMENT;


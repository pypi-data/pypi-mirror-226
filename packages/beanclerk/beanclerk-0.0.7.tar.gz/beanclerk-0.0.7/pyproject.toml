[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "beanclerk"
dynamic = ["version"]
authors = [{ name = "Petr Beranek", email = "petrberanek.mail@gmail.com" }]
license = { file = "LICENSE" }
description = "Automation for Beancount"
readme = "README.md"
requires-python = ">=3.11"
keywords = ["accounting", "finance", "beancount", "automation", "API"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.11",
  "Topic :: Office/Business :: Financial :: Accounting",
]
# TODO: Try out https://github.com/renovatebot/renovate. It might work well
# with pipenv (instead of using a custom script and unlocked deps).
# Always sync with additional dependencies for Mypy in pyproject.toml
dependencies = [
  "PyYAML~=6.0",
  "beancount~=2.3",
  "click~=8.1",
  "creditas==1.0.0.*",      # https://github.com/peberanek/creditas/blob/main/README.md#versioning
  "fio-banka~=2.0",
  "lxml~=4.9",
  "pydantic-settings~=2.0",
  "pydantic~=2.0",
  "rich~=13.4",
]

[project.optional-dependencies]
devel = ["pre-commit~=3.3", "pytest~=7.4"]

[project.scripts]
bean-clerk = "beanclerk.cli:cli"

[tool.setuptools_scm]

[tool.pytest.ini_options]
testpaths = ["tests"]

# TODO: Use https://docs.pydantic.dev/dev-v2/integrations/mypy/
[tool.mypy]
ignore_missing_imports = true

[tool.ruff]
# https://beta.ruff.rs/docs/rules/
select = [
  "F",   # pyflakes
  "E",   # pycodestyle
  "C90", # mccabe
  "I",   # isort
  "N",   # pep8-naming
  "D",   # pydocstyle
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  "S",   # flake8-bandit
  "BLE", # flake8-blind-except
  "FBT", # flake8-boolean-trap
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "COM", # flake8-commas
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "T20", # flake8-print
  "PT",  # flake8-pytest-style
  "Q",   # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "PGH", # pygrep-hooks
  "PL",  # pylint
  "TRY", # tryceptors
  "FLY", # flynt
  "RUF", # Ruff-specific rules
]
ignore = ["TRY003"]
unfixable = [
  # These may break temporarily commented-out code
  "F401",
  "F841",
]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "D",
  "S",
  "ARG001", # pytest fixtures and mock functions often violate this
]

[tool.ruff.pylint]
max-args = 7

[tool.ruff.pydocstyle]
convention = "google"

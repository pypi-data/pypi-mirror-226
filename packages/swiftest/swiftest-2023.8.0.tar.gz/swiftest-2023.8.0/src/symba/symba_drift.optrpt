Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _symba_classes.s_symba_drift._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_symba_classes.s_symba_drift._) [1/3=33.3%] symba_drift.f90(1,29)


    Report from: Code generation optimizations [cg]

symba_drift.f90(1,29):remark #34051: REGISTER ALLOCATION : [_symba_classes.s_symba_drift._] symba_drift.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SYMBA_CLASSES@S_SYMBA_DRIFT::SYMBA_DRIFT_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SYMBA_CLASSES@S_SYMBA_DRIFT::SYMBA_DRIFT_PL) [2/3=66.7%] symba_drift.f90(5,22)
  -> EXTERN: (18,22) _strcmp
  -> EXTERN: (21,18) HELIO_DRIFT_BODY


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at symba_drift.f90(18,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at symba_drift.f90(20,13)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at symba_drift.f90(20,13)
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.607
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 5.300 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at symba_drift.f90(20,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at symba_drift.f90(22,13)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at symba_drift.f90(22,13)
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.812
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 4.910 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at symba_drift.f90(22,13)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

symba_drift.f90(5,22):remark #34051: REGISTER ALLOCATION : [_symba_classes_mp_symba_drift_pl_] symba_drift.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     125
            Global    :      55
            Local     :      70
        Regenerable   :      13
        Spilled       :      16
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      14 [2.47e+00 ~ 2.5%]
        Spills        :      88 bytes*
            Reads     :      21 [2.70e+00 ~ 2.7%]
            Writes    :      17 [2.16e+00 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SYMBA_CLASSES@S_SYMBA_DRIFT::SYMBA_DRIFT_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SYMBA_CLASSES@S_SYMBA_DRIFT::SYMBA_DRIFT_TP) [3/3=100.0%] symba_drift.f90(30,22)
  -> EXTERN: (43,22) _strcmp
  -> EXTERN: (46,18) HELIO_DRIFT_BODY


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at symba_drift.f90(43,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at symba_drift.f90(45,13)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at symba_drift.f90(45,13)
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.607
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 5.300 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at symba_drift.f90(45,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at symba_drift.f90(47,13)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at symba_drift.f90(47,13)
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.812
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 4.910 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at symba_drift.f90(47,13)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

symba_drift.f90(30,22):remark #34051: REGISTER ALLOCATION : [_symba_classes_mp_symba_drift_tp_] symba_drift.f90:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     125
            Global    :      55
            Local     :      70
        Regenerable   :      13
        Spilled       :      16
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      14 [2.47e+00 ~ 2.5%]
        Spills        :      88 bytes*
            Reads     :      21 [2.70e+00 ~ 2.7%]
            Writes    :      17 [2.16e+00 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

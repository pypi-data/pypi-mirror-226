Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _symba_classes.s_symba_setup._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_symba_classes.s_symba_setup._) [1/6=16.7%] symba_setup.f90(1,26)


    Report from: Code generation optimizations [cg]

symba_setup.f90(1,26):remark #34051: REGISTER ALLOCATION : [_symba_classes.s_symba_setup._] symba_setup.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_MERGER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_MERGER) [2/6=33.3%] symba_setup.f90(30,22)
  -> (45,12) SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_PL (isz = 2715) (sz = 2724)
     [[ Inlining would exceed -inline-max-total-size value (2715>2000) <1>]]
  -> EXTERN: (48,34) _for_dealloc_allocatable
  -> EXTERN: (52,7) _for_alloc_allocatable
  -> EXTERN: (52,7) _for_check_mult_overflow64


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at symba_setup.f90(53,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(53,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(53,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

symba_setup.f90(53,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(53,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(30,22):remark #34051: REGISTER ALLOCATION : [_symba_classes_mp_symba_setup_merger_] symba_setup.f90:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     127
            Global    :      22
            Local     :     105
        Regenerable   :      17
        Spilled       :       4
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [1.03e-01 ~ 0.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_PL) [3/6=50.0%] symba_setup.f90(59,22)
  -> EXTERN: (74,12) SETUP_PL
  -> EXTERN: (77,39) _for_dealloc_allocatable
  -> EXTERN: (78,39) _for_dealloc_allocatable
  -> EXTERN: (79,35) _for_dealloc_allocatable
  -> EXTERN: (80,35) _for_dealloc_allocatable
  -> EXTERN: (81,35) _for_dealloc_allocatable
  -> EXTERN: (82,35) _for_dealloc_allocatable
  -> EXTERN: (83,35) _for_dealloc_allocatable
  -> EXTERN: (84,35) _for_dealloc_allocatable
  -> EXTERN: (85,33) _for_dealloc_allocatable
  -> EXTERN: (86,32) _for_dealloc_allocatable
  -> EXTERN: (87,32) _for_deallocate_all
  -> EXTERN: (91,7) _for_check_mult_overflow64
  -> EXTERN: (91,7) _for_alloc_allocatable
  -> EXTERN: (92,7) _for_alloc_allocatable
  -> EXTERN: (92,7) _for_check_mult_overflow64
  -> EXTERN: (93,7) _for_alloc_allocatable
  -> EXTERN: (93,7) _for_check_mult_overflow64
  -> EXTERN: (94,7) _for_check_mult_overflow64
  -> EXTERN: (94,7) _for_alloc_allocatable
  -> EXTERN: (95,7) _for_check_mult_overflow64
  -> EXTERN: (95,7) _for_alloc_allocatable
  -> EXTERN: (96,7) _for_check_mult_overflow64
  -> EXTERN: (96,7) _for_alloc_allocatable
  -> EXTERN: (97,7) _for_alloc_allocatable
  -> EXTERN: (97,7) _for_check_mult_overflow64
  -> EXTERN: (98,7) _for_check_mult_overflow64
  -> EXTERN: (98,7) _for_alloc_allocatable
  -> EXTERN: (99,7) _for_check_mult_overflow64
  -> EXTERN: (99,7) _for_alloc_and_init
  -> EXTERN: (100,7) _for_check_mult_overflow64
  -> EXTERN: (100,7) _for_alloc_and_init
  -> EXTERN: (101,7) _for_check_mult_overflow64
  -> EXTERN: (101,7) _for_alloc_allocatable
  -> INDIRECT-: (113,12)  (*((P64*) *((P64*) (_symba_classes_mp_symba_setup_pl_$SELF_V$f58c.0.4 + 56(SI64)))))[45(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (113,12) _for_allocate
  -> EXTERN: (113,12) _for_deallocate


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at symba_setup.f90(101,7)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at symba_setup.f90(103,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(103,7)
      remark #15389: vectorization support: reference at (103:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(103,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(104,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(104,7)
      remark #15389: vectorization support: reference at (104:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(104,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(105,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(105,7)
      remark #15389: vectorization support: reference at (105:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(105,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(106,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(106,7)
      remark #15389: vectorization support: reference at (106:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(106,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(107,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(107,7)
      remark #15389: vectorization support: reference at (107:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(107,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(108,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(108,7)
      remark #15389: vectorization support: reference at (108:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(108,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(109,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(109,7)
      remark #15389: vectorization support: reference at (109:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(109,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(110,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(110,7)
      remark #15389: vectorization support: reference at (110:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(110,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(111,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(111,7)
      remark #15389: vectorization support: reference at (111:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at symba_setup.f90(111,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(112,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(112,7)
      remark #15389: vectorization support: reference at (112:7) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at symba_setup.f90(112,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(113,12)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=15
LOOP END

LOOP BEGIN at symba_setup.f90(113,12)
   remark #15389: vectorization support: reference at (113:12) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.620 
   remark #15478: estimated potential speedup: 3.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at symba_setup.f90(113,12)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

symba_setup.f90(101,7):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
symba_setup.f90(101,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
symba_setup.f90(101,7):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
symba_setup.f90(101,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
symba_setup.f90(103,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(103,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(104,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(104,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(105,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(105,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(106,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(106,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(107,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(107,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(108,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(108,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(109,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(109,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(110,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(110,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(111,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(111,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(112,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(112,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(59,22):remark #34051: REGISTER ALLOCATION : [_symba_classes_mp_symba_setup_pl_] symba_setup.f90:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :    1225
            Global    :     134
            Local     :    1091
        Regenerable   :     140
        Spilled       :      15
        
    Routine stack
        Variables     :     232 bytes*
            Reads     :      16 [3.78e-01 ~ 0.4%]
            Writes    :      12 [2.52e-01 ~ 0.3%]
        Spills        :      80 bytes*
            Reads     :      10 [1.55e-01 ~ 0.2%]
            Writes    :      10 [1.55e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_ENCOUNTER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_ENCOUNTER) [4/6=66.7%] symba_setup.f90(118,22)
  -> EXTERN: (128,12) SETUP_ENCOUNTER
  -> EXTERN: (131,34) _for_dealloc_allocatable
  -> EXTERN: (135,7) _for_alloc_allocatable
  -> EXTERN: (135,7) _for_check_mult_overflow64


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at symba_setup.f90(137,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(137,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(137,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

symba_setup.f90(137,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(137,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(118,22):remark #34051: REGISTER ALLOCATION : [_symba_classes_mp_symba_setup_encounter_] symba_setup.f90:118

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     124
            Global    :      22
            Local     :     102
        Regenerable   :      17
        Spilled       :       4
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [1.05e-01 ~ 0.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_TP) [5/6=83.3%] symba_setup.f90(143,22)
  -> EXTERN: (156,12) SETUP_TP
  -> EXTERN: (159,35) _for_dealloc_allocatable
  -> EXTERN: (160,35) _for_dealloc_allocatable
  -> EXTERN: (161,35) _for_dealloc_allocatable
  -> EXTERN: (162,33) _for_dealloc_allocatable
  -> EXTERN: (166,7) _for_alloc_allocatable
  -> EXTERN: (166,7) _for_check_mult_overflow64
  -> EXTERN: (167,7) _for_check_mult_overflow64
  -> EXTERN: (167,7) _for_alloc_allocatable
  -> EXTERN: (168,7) _for_check_mult_overflow64
  -> EXTERN: (168,7) _for_alloc_allocatable
  -> EXTERN: (169,7) _for_check_mult_overflow64
  -> EXTERN: (169,7) _for_alloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at symba_setup.f90(171,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(171,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(171,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(172,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(172,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(172,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at symba_setup.f90(173,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at symba_setup.f90(173,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at symba_setup.f90(173,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

symba_setup.f90(171,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(171,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(172,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(172,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(173,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
symba_setup.f90(173,7):remark #34026: call to memset implemented as a call to optimized library version
symba_setup.f90(143,22):remark #34051: REGISTER ALLOCATION : [_symba_classes_mp_symba_setup_tp_] symba_setup.f90:143

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     431
            Global    :      50
            Local     :     381
        Regenerable   :      46
        Spilled       :       5
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [2.36e-01 ~ 0.2%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_INITIALIZE_SYSTEM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SYMBA_CLASSES@S_SYMBA_SETUP::SYMBA_SETUP_INITIALIZE_SYSTEM) [6/6=100.0%] symba_setup.f90(5,22)
  -> EXTERN: (20,15) HELIO_SETUP_INITIALIZE_SYSTEM
  -> INDIRECT-: (21,15)  (*((P64*) *((P64*) (&(_symba_classes_mp_symba_setup_initialize_system_$SELF_V$f1a3.0.2->QNCAtemplate.dim31_dv_template.addr_a0_V$f1cb.0.2)->SYMBA_NBODY_SYSTEM$PLTPENC_LIST$22_V$f9b + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (22,15)  (*((P64*) *((P64*) (&(_symba_classes_mp_symba_setup_initialize_system_$SELF_V$f1a3.0.2->QNCAtemplate.dim31_dv_template.addr_a0_V$f1cb.0.2)->SYMBA_NBODY_SYSTEM$PLPLENC_LIST$23_V$fcb + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (23,15)  (*((P64*) *((P64*) (&(_symba_classes_mp_symba_setup_initialize_system_$SELF_V$f1a3.0.2->QNCAtemplate.dim31_dv_template.addr_a0_V$f1cb.0.2)->SYMBA_NBODY_SYSTEM$PLPLCOLLISION_LIST$24_V$ffb + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]


    Report from: Code generation optimizations [cg]

symba_setup.f90(5,22):remark #34051: REGISTER ALLOCATION : [_symba_classes_mp_symba_setup_initialize_system_] symba_setup.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rsi rdi r14]
        
    Routine temporaries
        Total         :      30
            Global    :       8
            Local     :      22
        Regenerable   :       4
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining this subprogram at this call site would increase the size of the 
    caller more than is currently acceptable. Use the option 
    -inline-max-total-size to increase the size that all subprograms can 
    grow through inlining, add "!DIR$ATTRIBUTES OPTIMIZATION_PARAMETER:
    "INLINE_MAX_PER_ROUTINE"" to the caller, add "!DIR$ATTRIBUTES FORCEINLINE"
    to the declaration of the called subprogram, or add "!DIR$ FORCEINLINE" 
    before the call site.

<2> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.


Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _whm_classes.s_whm_coord._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_whm_classes.s_whm_coord._) [1/4=25.0%] whm_coord.f90(1,25)


    Report from: Code generation optimizations [cg]

whm_coord.f90(1,25):remark #34051: REGISTER ALLOCATION : [_whm_classes.s_whm_coord._] whm_coord.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WHM_CLASSES@S_WHM_COORD::WHM_COORD_H2J_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WHM_CLASSES@S_WHM_COORD::WHM_COORD_H2J_PL) [2/4=50.0%] whm_coord.f90(5,22)
  -> EXTERN: (5,22) _for_array_initialize
  -> EXTERN: (5,22) _for_array_initialize
  -> EXTERN: (5,22) _for_array_initialize
  -> EXTERN: (5,22) _for_array_initialize


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at whm_coord.f90(27,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between XJ(:,1) (27:10) and XH(:,1) (27:10)
   remark #15346: vector dependence: assumed ANTI dependence between XH(:,1) (27:10) and XJ(:,1) (27:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(27,10)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at whm_coord.f90(27,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(27,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at whm_coord.f90(28,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between VJ(:,1) (28:10) and VH(:,1) (28:10)
   remark #15346: vector dependence: assumed ANTI dependence between VH(:,1) (28:10) and VJ(:,1) (28:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(28,10)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at whm_coord.f90(28,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(28,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at whm_coord.f90(29,10)
   remark #25045: Fused Loops: ( 29 30 )

   remark #15388: vectorization support: reference sumx(:) has aligned access
   remark #15388: vectorization support: reference sumv(:) has aligned access   [ whm_coord.f90(30,10) ]
   remark #15305: vectorization support: vector length 2
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at whm_coord.f90(30,10)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at whm_coord.f90(29,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at whm_coord.f90(31,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between GMPL(i-1) (32:33) and VJ(:,i) (37:13)
   remark #15346: vector dependence: assumed FLOW dependence between VJ(:,i) (37:13) and GMPL(i-1) (32:33)

   LOOP BEGIN at whm_coord.f90(32,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(33,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(34,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(35,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(36,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(37,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

whm_coord.f90(25,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(25,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(25,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(25,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(25,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(25,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(25,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(25,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(25,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(25,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(25,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(25,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(5,22):remark #34051: REGISTER ALLOCATION : [_whm_classes_mp_whm_coord_h2j_pl_] whm_coord.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     374
            Global    :     102
            Local     :     272
        Regenerable   :      28
        Spilled       :      66
        
    Routine stack
        Variables     :     624 bytes*
            Reads     :      44 [9.48e+00 ~ 9.5%]
            Writes    :      39 [9.32e+00 ~ 9.3%]
        Spills        :     464 bytes*
            Reads     :      70 [1.37e+01 ~ 13.7%]
            Writes    :      63 [5.41e+00 ~ 5.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WHM_CLASSES@S_WHM_COORD::WHM_COORD_J2H_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WHM_CLASSES@S_WHM_COORD::WHM_COORD_J2H_PL) [3/4=75.0%] whm_coord.f90(45,22)
  -> EXTERN: (45,22) _for_array_initialize
  -> EXTERN: (45,22) _for_array_initialize


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at whm_coord.f90(68,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between XH(:,1) (68:10) and XJ(:,1) (68:10)
   remark #15346: vector dependence: assumed ANTI dependence between XJ(:,1) (68:10) and XH(:,1) (68:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(68,10)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at whm_coord.f90(68,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(68,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at whm_coord.f90(69,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between VH(:,1) (69:10) and VJ(:,1) (69:10)
   remark #15346: vector dependence: assumed ANTI dependence between VJ(:,1) (69:10) and VH(:,1) (69:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(69,10)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at whm_coord.f90(69,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(69,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at whm_coord.f90(70,10)
   remark #25045: Fused Loops: ( 70 71 )

   remark #15388: vectorization support: reference sumx(:) has aligned access
   remark #15388: vectorization support: reference sumv(:) has aligned access   [ whm_coord.f90(71,10) ]
   remark #15305: vectorization support: vector length 2
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at whm_coord.f90(71,10)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at whm_coord.f90(70,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at whm_coord.f90(72,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between GMPL(i-1) (73:33) and VH(:,i) (76:13)
   remark #15346: vector dependence: assumed FLOW dependence between VH(:,i) (76:13) and GMPL(i-1) (73:33)

   LOOP BEGIN at whm_coord.f90(73,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(74,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(75,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(76,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

whm_coord.f90(66,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(66,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(66,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(66,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(66,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(66,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(66,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(66,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(66,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(66,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(66,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(66,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(45,22):remark #34051: REGISTER ALLOCATION : [_whm_classes_mp_whm_coord_j2h_pl_] whm_coord.f90:45

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     361
            Global    :     102
            Local     :     259
        Regenerable   :      16
        Spilled       :      66
        
    Routine stack
        Variables     :     576 bytes*
            Reads     :      44 [1.02e+01 ~ 10.2%]
            Writes    :      33 [6.61e+00 ~ 6.6%]
        Spills        :     456 bytes*
            Reads     :      70 [1.48e+01 ~ 14.8%]
            Writes    :      63 [5.84e+00 ~ 5.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WHM_CLASSES@S_WHM_COORD::WHM_COORD_VH2VJ_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WHM_CLASSES@S_WHM_COORD::WHM_COORD_VH2VJ_PL) [4/4=100.0%] whm_coord.f90(84,22)
  -> EXTERN: (84,22) _for_array_initialize
  -> EXTERN: (84,22) _for_array_initialize


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at whm_coord.f90(105,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between VJ(:,1) (105:10) and VH(:,1) (105:10)
   remark #15346: vector dependence: assumed ANTI dependence between VH(:,1) (105:10) and VJ(:,1) (105:10)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(105,10)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at whm_coord.f90(105,10)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at whm_coord.f90(105,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at whm_coord.f90(106,10)
   remark #15388: vectorization support: reference sumv(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at whm_coord.f90(106,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at whm_coord.f90(107,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between GMPL(i-1) (108:33) and VJ(:,i) (110:13)
   remark #15346: vector dependence: assumed FLOW dependence between VJ(:,i) (110:13) and GMPL(i-1) (108:33)

   LOOP BEGIN at whm_coord.f90(108,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(109,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at whm_coord.f90(110,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

whm_coord.f90(104,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(104,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(104,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(104,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(104,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(104,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(104,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
whm_coord.f90(104,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
whm_coord.f90(84,22):remark #34051: REGISTER ALLOCATION : [_whm_classes_mp_whm_coord_vh2vj_pl_] whm_coord.f90:84

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     208
            Global    :      63
            Local     :     145
        Regenerable   :      16
        Spilled       :      38
        
    Routine stack
        Variables     :     384 bytes*
            Reads     :      19 [7.76e+00 ~ 7.8%]
            Writes    :      23 [9.10e+00 ~ 9.1%]
        Spills        :     232 bytes*
            Reads     :      33 [1.10e+01 ~ 11.0%]
            Writes    :      31 [4.81e+00 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

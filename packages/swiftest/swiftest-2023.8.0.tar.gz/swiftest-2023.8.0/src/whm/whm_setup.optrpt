Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _whm_classes.s_whm_setup._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_whm_classes.s_whm_setup._) [1/4=25.0%] whm_setup.f90(1,24)


    Report from: Code generation optimizations [cg]

whm_setup.f90(1,24):remark #34051: REGISTER ALLOCATION : [_whm_classes.s_whm_setup._] whm_setup.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WHM_CLASSES@S_WHM_SETUP::WHM_SETUP_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WHM_CLASSES@S_WHM_SETUP::WHM_SETUP_PL) [2/4=50.0%] whm_setup.f90(5,22)
  -> EXTERN: (18,12) SETUP_PL
  -> EXTERN: (21,32) _for_dealloc_allocatable
  -> EXTERN: (22,32) _for_dealloc_allocatable
  -> EXTERN: (23,31) _for_dealloc_allocatable
  -> EXTERN: (24,31) _for_dealloc_allocatable
  -> EXTERN: (25,33) _for_dealloc_allocatable
  -> EXTERN: (29,7) _for_alloc_and_init
  -> EXTERN: (29,7) _for_check_mult_overflow64
  -> EXTERN: (30,7) _for_alloc_and_init
  -> EXTERN: (30,7) _for_check_mult_overflow64
  -> EXTERN: (31,7) _for_alloc_and_init
  -> EXTERN: (31,7) _for_check_mult_overflow64
  -> EXTERN: (32,7) _for_check_mult_overflow64
  -> EXTERN: (32,7) _for_alloc_and_init
  -> EXTERN: (33,7) _for_alloc_and_init
  -> EXTERN: (33,7) _for_check_mult_overflow64


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at whm_setup.f90(35,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at whm_setup.f90(35,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at whm_setup.f90(35,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at whm_setup.f90(36,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at whm_setup.f90(36,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at whm_setup.f90(36,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at whm_setup.f90(37,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at whm_setup.f90(37,7)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at whm_setup.f90(37,7)
         remark #15389: vectorization support: reference self(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 1.440 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at whm_setup.f90(37,7)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at whm_setup.f90(38,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at whm_setup.f90(38,7)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at whm_setup.f90(38,7)
         remark #15389: vectorization support: reference self(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 1.440 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at whm_setup.f90(38,7)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at whm_setup.f90(39,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at whm_setup.f90(39,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 1.440 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at whm_setup.f90(39,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

whm_setup.f90(35,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
whm_setup.f90(35,7):remark #34026: call to memset implemented as a call to optimized library version
whm_setup.f90(36,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
whm_setup.f90(36,7):remark #34026: call to memset implemented as a call to optimized library version
whm_setup.f90(37,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
whm_setup.f90(37,7):remark #34026: call to memset implemented as a call to optimized library version
whm_setup.f90(38,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
whm_setup.f90(38,7):remark #34026: call to memset implemented as a call to optimized library version
whm_setup.f90(39,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
whm_setup.f90(39,7):remark #34026: call to memset implemented as a call to optimized library version
whm_setup.f90(5,22):remark #34051: REGISTER ALLOCATION : [_whm_classes_mp_whm_setup_pl_] whm_setup.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     602
            Global    :      81
            Local     :     521
        Regenerable   :      78
        Spilled       :      11
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :       5 [1.70e-01 ~ 0.2%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :      10 [6.81e-01 ~ 0.7%]
            Writes    :       6 [1.84e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WHM_CLASSES@S_WHM_SETUP::WHM_UTIL_SET_MU_ETA_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WHM_CLASSES@S_WHM_SETUP::WHM_UTIL_SET_MU_ETA_PL) [3/4=75.0%] whm_setup.f90(45,22)
  -> EXTERN: (58,15) UTIL_SET_MU_PL


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at whm_setup.f90(61,10)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between self(i) (62:13) and self(i-1) (62:13)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at whm_setup.f90(61,10)
<Remainder, Distributed chunk1>
LOOP END

LOOP BEGIN at whm_setup.f90(61,10)
<Peeled loop for vectorization, Distributed chunk2>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at whm_setup.f90(61,10)
<Distributed chunk2>
   remark #15388: vectorization support: reference self(i) has aligned access   [ whm_setup.f90(63,13) ]
   remark #15389: vectorization support: reference self(i) has unaligned access   [ whm_setup.f90(63,36) ]
   remark #15389: vectorization support: reference self(i-1) has unaligned access   [ whm_setup.f90(63,48) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.109
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.750 
   remark #15478: estimated potential speedup: 2.990 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at whm_setup.f90(61,10)
<Remainder loop for vectorization, Distributed chunk2>
   remark #15389: vectorization support: reference self(i) has unaligned access   [ whm_setup.f90(63,13) ]
   remark #15389: vectorization support: reference self(i) has unaligned access   [ whm_setup.f90(63,36) ]
   remark #15389: vectorization support: reference self(i-1) has unaligned access   [ whm_setup.f90(63,48) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.488
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 32 
   remark #15477: vector cost: 9.750 
   remark #15478: estimated potential speedup: 2.990 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at whm_setup.f90(61,10)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

    Report from: Code generation optimizations [cg]

whm_setup.f90(45,22):remark #34051: REGISTER ALLOCATION : [_whm_classes_mp_whm_util_set_mu_eta_pl_] whm_setup.f90:45

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rsi rdi r8-r13 r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :      87
            Global    :      39
            Local     :      48
        Regenerable   :       1
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WHM_CLASSES@S_WHM_SETUP::WHM_SETUP_INITIALIZE_SYSTEM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WHM_CLASSES@S_WHM_SETUP::WHM_SETUP_INITIALIZE_SYSTEM) [4/4=100.0%] whm_setup.f90(71,22)
  -> EXTERN: (81,12) SETUP_INITIALIZE_SYSTEM
  -> EXTERN: (83,12) UTIL_SET_IR3H
  -> INDIRECT-: (84,12)  (*((P64*) *((P64*) (&(_whm_classes_mp_whm_setup_initialize_system_$SELF_V$a32b.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$a33f.0.4)->WHM_NBODY_SYSTEM$SWIFTEST_NBODY_SYSTEM$15_V$85e + 56(SI64)))))[25(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (85,12)  (*((P64*) *((P64*) (&(_whm_classes_mp_whm_setup_initialize_system_$SELF_V$a32b.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$a33f.0.4)->WHM_NBODY_SYSTEM$SWIFTEST_NBODY_SYSTEM$15_V$85e + 56(SI64)))))[28(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (88,12)  (*((P64*) *((P64*) (&(_whm_classes_mp_whm_setup_initialize_system_$SELF_V$a32b.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$a33f.0.4)->WHM_NBODY_SYSTEM$SWIFTEST_NBODY_SYSTEM$15_V$882 + 56(SI64)))))[19(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (89,12)  (*((P64*) *((P64*) (&(_whm_classes_mp_whm_setup_initialize_system_$SELF_V$a32b.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$a33f.0.4)->WHM_NBODY_SYSTEM$SWIFTEST_NBODY_SYSTEM$15_V$85e + 56(SI64)))))[7(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (90,12)  (*((P64*) *((P64*) (&(_whm_classes_mp_whm_setup_initialize_system_$SELF_V$a32b.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$a33f.0.4)->WHM_NBODY_SYSTEM$SWIFTEST_NBODY_SYSTEM$15_V$870 + 56(SI64)))))[7(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (92,15)  (*((P64*) *((P64*) (&(_whm_classes_mp_whm_setup_initialize_system_$SELF_V$a32b.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$a33f.0.4)->WHM_NBODY_SYSTEM$SWIFTEST_NBODY_SYSTEM$15_V$85e + 56(SI64)))))[11(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (93,15)  (*((P64*) *((P64*) (&(_whm_classes_mp_whm_setup_initialize_system_$SELF_V$a32b.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$a33f.0.4)->WHM_NBODY_SYSTEM$SWIFTEST_NBODY_SYSTEM$15_V$870 + 56(SI64)))))[11(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Code generation optimizations [cg]

whm_setup.f90(71,22):remark #34051: REGISTER ALLOCATION : [_whm_classes_mp_whm_setup_initialize_system_] whm_setup.f90:71

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r13-r14]
        
    Routine temporaries
        Total         :      58
            Global    :       9
            Local     :      49
        Regenerable   :       6
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.


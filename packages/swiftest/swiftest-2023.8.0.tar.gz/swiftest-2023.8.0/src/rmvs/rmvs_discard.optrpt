Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _rmvs_classes.s_rmvs_discard._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_rmvs_classes.s_rmvs_discard._) [1/2=50.0%] rmvs_discard.f90(1,25)


    Report from: Code generation optimizations [cg]

rmvs_discard.f90(1,25):remark #34051: REGISTER ALLOCATION : [_rmvs_classes.s_rmvs_discard._] rmvs_discard.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_DISCARD::RMVS_DISCARD_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_DISCARD::RMVS_DISCARD_TP) [2/2=100.0%] rmvs_discard.f90(5,22)
  -> EXTERN: (29,22) _for_write_int_lis
  -> EXTERN: (30,22) _for_write_int_lis
  -> EXTERN: (31,22) _for_write_int_lis
  -> EXTERN: (32,22) _for_write_seq_lis
  -> EXTERN: (32,22) _for_deallocate
  -> EXTERN: (32,50) _for_trim
  -> EXTERN: (32,55) _for_adjustl
  -> EXTERN: (32,92) _for_trim
  -> EXTERN: (32,97) _for_adjustl
  -> EXTERN: (33,73) _for_trim
  -> EXTERN: (33,78) _for_adjustl
  -> EXTERN: (33,121) _for_trim
  -> EXTERN: (33,126) _for_adjustl
  -> EXTERN: (34,59) _for_allocate
  -> EXTERN: (34,59) _for_concat
  -> EXTERN: (34,62) _for_trim
  -> EXTERN: (34,67) _for_adjustl
  -> EXTERN: (37,27) _for_allocate
  -> EXTERN: (37,27) UTIL_SET_PARTICLE_INFO
  -> EXTERN: (37,27) _for_deallocate
  -> EXTERN: (37,27) _for_deallocate
  -> EXTERN: (37,99) _for_allocate
  -> EXTERN: (43,15) DISCARD_TP


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_discard.f90(24,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_discard.f90(37,27)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_discard.f90(37,27)
         remark #15389: vectorization support: reference at (37:99) has unaligned access   [ rmvs_discard.f90(37,99) ]
         remark #15389: vectorization support: reference at (37:99) has unaligned access   [ rmvs_discard.f90(37,99) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_discard.f90(37,27)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_discard.f90(37,99)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_discard.f90(37,99)
         remark #15389: vectorization support: reference at (37:122) has unaligned access   [ rmvs_discard.f90(37,122) ]
         remark #15389: vectorization support: reference at (37:122) has unaligned access   [ rmvs_discard.f90(37,122) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_discard.f90(37,99)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_discard.f90(37,99)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_discard.f90(37,99)
         remark #15389: vectorization support: reference at (37:99) has unaligned access
         remark #15389: vectorization support: reference at (37:99) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_discard.f90(37,99)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_discard.f90(37,122)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_discard.f90(37,122)
         remark #15389: vectorization support: reference at (37:122) has unaligned access
         remark #15389: vectorization support: reference at (37:122) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_discard.f90(37,122)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_discard.f90(23,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_discard.f90(23,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_discard.f90(37,27):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_discard.f90(37,27):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_discard.f90(37,27):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_discard.f90(37,99):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_discard.f90(37,99):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_discard.f90(37,99):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_discard.f90(37,99):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_discard.f90(37,99):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_discard.f90(37,99):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_discard.f90(37,122):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_discard.f90(37,122):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_discard.f90(37,122):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_discard.f90(5,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_discard_tp_] rmvs_discard.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     365
            Global    :      92
            Local     :     273
        Regenerable   :     121
        Spilled       :      24
        
    Routine stack
        Variables     :    5808 bytes*
            Reads     :      17 [1.65e+00 ~ 1.7%]
            Writes    :     105 [1.14e+01 ~ 11.4%]
        Spills        :     192 bytes*
            Reads     :      72 [3.96e+00 ~ 4.0%]
            Writes    :      37 [3.52e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

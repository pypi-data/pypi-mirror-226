Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _rmvs_classes.s_rmvs_kick._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_rmvs_classes.s_rmvs_kick._) [1/2=50.0%] rmvs_kick.f90(1,25)


    Report from: Code generation optimizations [cg]

rmvs_kick.f90(1,25):remark #34051: REGISTER ALLOCATION : [_rmvs_classes.s_rmvs_kick._] rmvs_kick.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_KICK::RMVS_KICK_GETACCH_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_KICK::RMVS_KICK_GETACCH_TP) [2/2=100.0%] rmvs_kick.f90(5,22)
  -> EXTERN: (29,22) _strcmp
  -> EXTERN: (33,28) _strcmp
  -> EXTERN: (35,32) _strcmp
  -> EXTERN: (41,25) _for_alloc_and_init
  -> EXTERN: (41,34) _for_dealloc_allocatable
  -> EXTERN: (44,25) _for_alloc_copy
  -> EXTERN: (50,30) WHM_KICK_GETACCH_TP
  -> INDIRECT-: (71,46)  (*((P64*) *((P64*) (_rmvs_classes_mp_rmvs_kick_getacch_tp_$SELF_V$c85a.0.2 + 56(SI64)))))[16(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (72,49)  (*((P64*) *((P64*) (_rmvs_classes_mp_rmvs_kick_getacch_tp_$SELF_V$c85a.0.2 + 56(SI64)))))[20(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (73,40)  (*((P64*) *((P64*) (_rmvs_classes_mp_rmvs_kick_getacch_tp_$SELF_V$c85a.0.2 + 56(SI64)))))[35(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (76,25) _for_dealloc_allocatable
  -> EXTERN: (83,21) WHM_KICK_GETACCH_TP
  -> EXTERN: (89,4) _for_finalize
  -> EXTERN: (89,4) _for_dealloc_allocatable
  -> EXTERN: (89,4) _for_dealloc_all_nocheck


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at rmvs_kick.f90(54,28)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at rmvs_kick.f90(58,28)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED
OpenMP Construct at rmvs_kick.f90(64,25)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_kick.f90(29,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at rmvs_kick.f90(33,28)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at rmvs_kick.f90(35,32)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at rmvs_kick.f90(41,25)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_kick.f90(41,25)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_kick.f90(41,25)
         remark #15389: vectorization support: reference XH_ORIGINAL(:,:) has unaligned access
         remark #15389: vectorization support: reference self(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_kick.f90(41,25)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at rmvs_kick.f90(59,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between self(:,i) (59:31) and at (59:31)
   remark #15346: vector dependence: assumed ANTI dependence between at (59:31) and self(:,i) (59:31)

   LOOP BEGIN at rmvs_kick.f90(59,31)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between self(:,i) (59:31) and at (59:31)
      remark #15346: vector dependence: assumed ANTI dependence between at (59:31) and self(:,i) (59:31)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at rmvs_kick.f90(59,31)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at rmvs_kick.f90(55,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between self(:,i) (55:31) and at (55:31)
   remark #15346: vector dependence: assumed ANTI dependence between at (55:31) and self(:,i) (55:31)

   LOOP BEGIN at rmvs_kick.f90(55,31)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between self(:,i) (55:31) and at (55:31)
      remark #15346: vector dependence: assumed ANTI dependence between at (55:31) and self(:,i) (55:31)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at rmvs_kick.f90(55,31)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at rmvs_kick.f90(64,50)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_kick.f90(65,28)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_kick.f90(65,28)
         remark #15389: vectorization support: reference self(:,i) has unaligned access
         remark #15389: vectorization support: reference self(:,i) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_kick.f90(65,28)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_kick.f90(22,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
rmvs_kick.f90(65,28):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_kick.f90(65,28):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_kick.f90(65,28):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_kick.f90(33,28):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_kick.f90(33,28):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_kick.f90(35,32):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_kick.f90(35,32):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_kick.f90(37,22):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_kick.f90(37,22):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_kick.f90(37,22):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_kick.f90(37,22):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_kick.f90(37,22):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_kick.f90(37,22):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_kick.f90(76,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
rmvs_kick.f90(76,25):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
rmvs_kick.f90(41,25):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_kick.f90(41,25):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_kick.f90(41,25):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_kick.f90(5,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_kick_getacch_tp_] rmvs_kick.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     854
            Global    :     143
            Local     :     711
        Regenerable   :     166
        Spilled       :      34
        
    Routine stack
        Variables     :     684 bytes*
            Reads     :      51 [1.91e+00 ~ 1.9%]
            Writes    :      94 [1.71e+01 ~ 17.1%]
        Spills        :     280 bytes*
            Reads     :      68 [2.60e+00 ~ 2.6%]
            Writes    :      53 [3.58e+00 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.


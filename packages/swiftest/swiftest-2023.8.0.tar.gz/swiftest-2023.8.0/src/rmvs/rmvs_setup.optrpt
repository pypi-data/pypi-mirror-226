Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _rmvs_classes.s_rmvs_setup._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_rmvs_classes.s_rmvs_setup._) [1/4=25.0%] rmvs_setup.f90(1,25)


    Report from: Code generation optimizations [cg]

rmvs_setup.f90(1,25):remark #34051: REGISTER ALLOCATION : [_rmvs_classes.s_rmvs_setup._] rmvs_setup.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_SETUP::RMVS_SETUP_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_SETUP::RMVS_SETUP_PL) [2/4=50.0%] rmvs_setup.f90(5,22)
  -> EXTERN: (21,15) WHM_SETUP_PL
  -> EXTERN: (24,35) _for_deallocate_all
  -> EXTERN: (25,35) _for_deallocate_all
  -> EXTERN: (26,35) _for_dealloc_allocatable
  -> EXTERN: (30,10) _for_alloc_allocatable
  -> EXTERN: (31,10) _for_alloc_allocatable
  -> EXTERN: (33,13) _for_alloc_allocatable
  -> EXTERN: (33,13) _for_check_mult_overflow64
  -> EXTERN: (37,16) _for_check_mult_overflow64
  -> EXTERN: (37,16) _for_alloc_and_init
  -> EXTERN: (38,16) _for_check_mult_overflow64
  -> EXTERN: (38,16) _for_alloc_and_init
  -> EXTERN: (43,16) _for_check_mult_overflow64
  -> EXTERN: (43,16) _for_alloc_and_init
  -> EXTERN: (44,16) _for_alloc_and_init
  -> EXTERN: (44,16) _for_check_mult_overflow64
  -> EXTERN: (50,19) _for_alloc_and_init
  -> EXTERN: (50,19) _for_check_mult_overflow64
  -> EXTERN: (56,19) _for_check_mult_overflow64
  -> EXTERN: (56,19) _for_alloc_and_init


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_setup.f90(30,10)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at rmvs_setup.f90(31,10)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at rmvs_setup.f90(34,13)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_setup.f90(34,13)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(34,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at rmvs_setup.f90(37,25)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_setup.f90(39,16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(39,16)
         remark #25408: memset generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at rmvs_setup.f90(39,16)
            remark #15389: vectorization support: reference at (39:16) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 1.250 
            remark #15478: estimated potential speedup: 1.440 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at rmvs_setup.f90(39,16)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(40,16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(40,16)
         remark #25408: memset generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at rmvs_setup.f90(40,16)
            remark #15389: vectorization support: reference at (40:16) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 1.250 
            remark #15478: estimated potential speedup: 1.440 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at rmvs_setup.f90(40,16)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at rmvs_setup.f90(43,25)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_setup.f90(45,16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(45,16)
         remark #25408: memset generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at rmvs_setup.f90(45,16)
            remark #15389: vectorization support: reference at (45:16) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 1.250 
            remark #15478: estimated potential speedup: 1.440 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at rmvs_setup.f90(45,16)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(46,16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(46,16)
         remark #25408: memset generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at rmvs_setup.f90(46,16)
            remark #15389: vectorization support: reference at (46:16) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 1.250 
            remark #15478: estimated potential speedup: 1.440 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at rmvs_setup.f90(46,16)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at rmvs_setup.f90(49,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_setup.f90(51,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(51,19)
         remark #25408: memset generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at rmvs_setup.f90(51,19)
            remark #15389: vectorization support: reference at (51:19) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 1.250 
            remark #15478: estimated potential speedup: 1.440 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at rmvs_setup.f90(51,19)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at rmvs_setup.f90(55,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_setup.f90(57,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(57,19)
         remark #25408: memset generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at rmvs_setup.f90(57,19)
            remark #15389: vectorization support: reference at (57:19) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 1.250 
            remark #15478: estimated potential speedup: 1.440 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at rmvs_setup.f90(57,19)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_setup.f90(30,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
rmvs_setup.f90(30,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
rmvs_setup.f90(31,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
rmvs_setup.f90(31,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
rmvs_setup.f90(34,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(34,13):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(39,16):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(39,16):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(40,16):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(40,16):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(45,16):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(45,16):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(46,16):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(46,16):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(57,19):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(57,19):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(51,19):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(51,19):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(5,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_setup_pl_] rmvs_setup.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :    1040
            Global    :     169
            Local     :     871
        Regenerable   :     105
        Spilled       :      38
        
    Routine stack
        Variables     :      56 bytes*
            Reads     :       7 [5.83e-02 ~ 0.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     256 bytes*
            Reads     :      99 [9.35e-01 ~ 0.9%]
            Writes    :      54 [4.17e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_SETUP::RMVS_SETUP_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_SETUP::RMVS_SETUP_TP) [3/4=75.0%] rmvs_setup.f90(140,22)
  -> EXTERN: (153,12) SETUP_TP
  -> EXTERN: (156,34) _for_dealloc_allocatable
  -> EXTERN: (157,35) _for_dealloc_allocatable
  -> EXTERN: (158,35) _for_dealloc_allocatable
  -> EXTERN: (162,7) _for_check_mult_overflow64
  -> EXTERN: (162,7) _for_alloc_allocatable
  -> EXTERN: (163,7) _for_check_mult_overflow64
  -> EXTERN: (163,7) _for_alloc_allocatable
  -> EXTERN: (164,7) _for_check_mult_overflow64
  -> EXTERN: (164,7) _for_alloc_allocatable
  -> EXTERN: (167,45) _for_dealloc_allocatable
  -> EXTERN: (168,10) _for_alloc_and_init
  -> EXTERN: (168,10) _for_check_mult_overflow64


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_setup.f90(171,7)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_setup.f90(171,7)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(171,7)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_setup.f90(171,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(171,7):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(140,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_setup_tp_] rmvs_setup.f90:140

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     412
            Global    :      40
            Local     :     372
        Regenerable   :      44
        Spilled       :       5
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [2.41e-01 ~ 0.2%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_SETUP::RMVS_SETUP_INITIALIZE_SYSTEM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_SETUP::RMVS_SETUP_INITIALIZE_SYSTEM) [4/4=100.0%] rmvs_setup.f90(66,22)
  -> EXTERN: (84,12) WHM_SETUP_INITIALIZE_SYSTEM
  -> EXTERN: (88,19) _strcmp
  -> EXTERN: (90,22) _strcmp
  -> EXTERN: (92,26) _strcmp
  -> EXTERN: (94,16) _for_alloc_assign_v2
  -> EXTERN: (99,19) _for_alloc_allocatable
  -> EXTERN: (99,19) _for_check_mult_overflow64
  -> EXTERN: (102,22) _for_alloc_copy
  -> EXTERN: (103,22) _for_alloc_allocatable
  -> EXTERN: (104,34) _strcmp
  -> EXTERN: (106,37) _strcmp
  -> INDIRECT-: (110,33)  (*((P64*) _rmvs_classes_mp_rmvs_setup_initialize_system_$PLENCI$_2000$139_V$10d57.0.3))[19(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (122,28) _for_check_mult_overflow64
  -> EXTERN: (122,28) _for_alloc_allocatable
  -> EXTERN: (123,28) _for_deallocate
  -> EXTERN: (123,28) _for_allocate
  -> EXTERN: (124,28) _for_deallocate
  -> EXTERN: (124,28) _for_deallocate
  -> EXTERN: (124,28) _for_deallocate
  -> EXTERN: (124,28) _for_allocate
  -> EXTERN: (124,50) _for_allocate
  -> EXTERN: (124,50) _for_allocate
  -> EXTERN: (127,28) _for_allocate
  -> EXTERN: (127,28) _for_deallocate

Optimization 'Type/class analysis' reduced: function size or variable count limit exceeded: use -override_limits / -Qoverride_limits to overrideF64 vs. RMVS_CLASSES$.btRMVS_PL

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_setup.f90(88,19)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at rmvs_setup.f90(90,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at rmvs_setup.f90(92,26)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at rmvs_setup.f90(99,19)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at rmvs_setup.f90(100,19)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at rmvs_setup.f90(100,19)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15389: vectorization support: reference PL(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.370 
   remark #15478: estimated potential speedup: 4.220 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at rmvs_setup.f90(100,19)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at rmvs_setup.f90(100,19)
<Multiversioned v2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <PL(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.360 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at rmvs_setup.f90(100,19)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at rmvs_setup.f90(101,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at rmvs_setup.f90(104,34)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(106,37)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(111,28)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(111,28)
         remark #15389: vectorization support: reference PLENCI(:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 2 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_setup.f90(111,28)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(112,28)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(112,28)
         remark #15389: vectorization support: reference PLENCI(:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 2 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_setup.f90(112,28)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(123,28)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=15
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(123,28)
      remark #15389: vectorization support: reference at (123:28) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 1.100
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 3.960 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(123,28)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(123,28)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(123,28)
         remark #15389: vectorization support: reference PLENCI(:) has unaligned access
         remark #15389: vectorization support: reference at (123:28) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_setup.f90(123,28)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,50)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,50)
      remark #15389: vectorization support: reference at (124:96) has unaligned access   [ rmvs_setup.f90(124,96) ]
      remark #15389: vectorization support: reference at (124:96) has unaligned access   [ rmvs_setup.f90(124,96) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.875
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 12 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 4.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,50)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,50)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,50)
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.455
      remark #15355: vectorization support: at (124:50) is int64 type reduction
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 3.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,50)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,50)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (124:50) and at (124:50)
      remark #15346: vector dependence: assumed FLOW dependence between at (124:50) and at (124:50)
      remark #15346: vector dependence: assumed FLOW dependence between at (124:50) and at (124:50)
      remark #15346: vector dependence: assumed ANTI dependence between at (124:50) and at (124:50)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,50)
   <Remainder>
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,28)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(124,28)
         remark #15389: vectorization support: reference at (124:28) has unaligned access
         remark #15389: vectorization support: reference at (124:28) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_setup.f90(124,28)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(124,28)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(124,28)
         remark #15389: vectorization support: reference PLENCI(:) has unaligned access
         remark #15389: vectorization support: reference at (124:28) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_setup.f90(124,28)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(127,28)
      remark #15389: vectorization support: reference at (127:28) has unaligned access
      remark #15389: vectorization support: reference PLENCI(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <PL(PLENCI(:))>, part of index is read from memory
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.462
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 0.760 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(127,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at rmvs_setup.f90(127,28)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at rmvs_setup.f90(127,28)
         remark #15389: vectorization support: reference PLENCI(:) has unaligned access
         remark #15389: vectorization support: reference at (127:28) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at rmvs_setup.f90(127,28)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_setup.f90(88,19):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_setup.f90(88,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_setup.f90(90,22):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_setup.f90(90,22):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_setup.f90(92,26):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_setup.f90(92,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_setup.f90(99,19):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
rmvs_setup.f90(99,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
rmvs_setup.f90(103,22):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(103,22):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_setup.f90(104,34):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_setup.f90(104,34):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_setup.f90(106,37):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
rmvs_setup.f90(106,37):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
rmvs_setup.f90(111,28):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(111,28):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(112,28):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(112,28):remark #34026: call to memset implemented as a call to optimized library version
rmvs_setup.f90(123,28):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(123,28):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(123,28):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_setup.f90(124,28):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(124,28):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(124,28):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_setup.f90(124,28):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(124,28):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(124,28):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_setup.f90(127,28):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(127,28):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
rmvs_setup.f90(127,28):remark #34026: call to memcpy implemented as a call to optimized library version
rmvs_setup.f90(66,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_setup_initialize_system_] rmvs_setup.f90:66

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     724
            Global    :     183
            Local     :     541
        Regenerable   :     115
        Spilled       :      22
        
    Routine stack
        Variables     :    1016 bytes*
            Reads     :      54 [1.95e+00 ~ 1.9%]
            Writes    :      83 [2.62e+00 ~ 2.6%]
        Spills        :     128 bytes*
            Reads     :      52 [4.46e-01 ~ 0.4%]
            Writes    :      26 [1.91e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.


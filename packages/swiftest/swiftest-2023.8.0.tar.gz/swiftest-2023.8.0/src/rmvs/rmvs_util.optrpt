Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _rmvs_classes.s_rmvs_util._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_rmvs_classes.s_rmvs_util._) [1/13=7.7%] rmvs_util.f90(1,25)


    Report from: Code generation optimizations [cg]

rmvs_util.f90(1,25):remark #34051: REGISTER ALLOCATION : [_rmvs_classes.s_rmvs_util._] rmvs_util.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_APPEND_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_APPEND_PL) [2/13=15.4%] rmvs_util.f90(5,22)
  -> EXTERN: (16,19) _strcmp
  -> EXTERN: (19,18) UTIL_APPEND_ARR_I4B
  -> EXTERN: (20,18) UTIL_APPEND_ARR_I4B
  -> EXTERN: (21,18) UTIL_APPEND_ARR_I4B
  -> EXTERN: (29,18) WHM_UTIL_APPEND_PL
  -> EXTERN: (32,10) _for_write_seq_lis
  -> EXTERN: (33,15) UTIL_EXIT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_util.f90(16,19)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_util.f90(5,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_append_pl_] rmvs_util.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      81
            Global    :      18
            Local     :      63
        Regenerable   :      20
        Spilled       :       5
        
    Routine stack
        Variables     :     208 bytes*
            Reads     :       2 [6.31e-01 ~ 0.6%]
            Writes    :      17 [5.36e+00 ~ 5.4%]
        Spills        :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_APPEND_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_APPEND_TP) [3/13=23.1%] rmvs_util.f90(40,22)
  -> EXTERN: (51,19) _strcmp
  -> EXTERN: (54,18) UTIL_APPEND_ARR_LOGICAL
  -> EXTERN: (55,18) UTIL_APPEND_ARR_I4B
  -> EXTERN: (56,18) UTIL_APPEND_ARR_I4B
  -> EXTERN: (58,18) UTIL_APPEND_TP
  -> EXTERN: (61,10) _for_write_seq_lis
  -> EXTERN: (62,15) UTIL_EXIT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_util.f90(51,19)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_util.f90(40,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_append_tp_] rmvs_util.f90:40

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      81
            Global    :      18
            Local     :      63
        Regenerable   :      20
        Spilled       :       5
        
    Routine stack
        Variables     :     208 bytes*
            Reads     :       2 [6.31e-01 ~ 0.6%]
            Writes    :      17 [5.36e+00 ~ 5.4%]
        Spills        :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_FILL_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_FILL_PL) [4/13=30.8%] rmvs_util.f90(69,22)
  -> EXTERN: (84,22) _strcmp
  -> EXTERN: (86,18) UTIL_FILL_ARR_I4B
  -> EXTERN: (87,18) UTIL_FILL_ARR_I4B
  -> EXTERN: (88,18) UTIL_FILL_ARR_I4B
  -> EXTERN: (96,18) WHM_UTIL_FILL_PL
  -> EXTERN: (98,13) _for_write_seq_lis
  -> EXTERN: (99,18) UTIL_EXIT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_util.f90(84,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_util.f90(69,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_fill_pl_] rmvs_util.f90:69

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      73
            Global    :      16
            Local     :      57
        Regenerable   :      20
        Spilled       :       5
        
    Routine stack
        Variables     :     208 bytes*
            Reads     :       2 [6.92e-01 ~ 0.7%]
            Writes    :      17 [5.88e+00 ~ 5.9%]
        Spills        :      24 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_FILL_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_FILL_TP) [5/13=38.5%] rmvs_util.f90(107,22)
  -> EXTERN: (120,22) _strcmp
  -> EXTERN: (122,18) UTIL_FILL_ARR_LOGICAL
  -> EXTERN: (123,18) UTIL_FILL_ARR_I4B
  -> EXTERN: (124,18) UTIL_FILL_ARR_I4B
  -> EXTERN: (126,18) UTIL_FILL_TP
  -> EXTERN: (128,13) _for_write_seq_lis
  -> EXTERN: (129,18) UTIL_EXIT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_util.f90(120,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_util.f90(107,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_fill_tp_] rmvs_util.f90:107

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      73
            Global    :      16
            Local     :      57
        Regenerable   :      20
        Spilled       :       5
        
    Routine stack
        Variables     :     208 bytes*
            Reads     :       2 [6.92e-01 ~ 0.7%]
            Writes    :      17 [5.88e+00 ~ 5.9%]
        Spills        :      24 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_RESIZE_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_RESIZE_PL) [6/13=46.2%] rmvs_util.f90(137,22)
  -> EXTERN: (146,12) UTIL_RESIZE_ARR_I4B
  -> EXTERN: (147,12) UTIL_RESIZE_ARR_I4B
  -> EXTERN: (148,12) UTIL_RESIZE_ARR_I4B
  -> EXTERN: (156,12) WHM_UTIL_RESIZE_PL


    Report from: Code generation optimizations [cg]

rmvs_util.f90(137,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_resize_pl_] rmvs_util.f90:137

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rbx rsi rdi r12]
        
    Routine temporaries
        Total         :      24
            Global    :       8
            Local     :      16
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_RESIZE_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_RESIZE_TP) [7/13=53.8%] rmvs_util.f90(161,22)
  -> EXTERN: (170,12) UTIL_RESIZE_ARR_LOGICAL
  -> EXTERN: (171,12) UTIL_RESIZE_ARR_I4B
  -> EXTERN: (172,12) UTIL_RESIZE_ARR_I4B
  -> EXTERN: (173,12) UTIL_RESIZE_ARR_DPVEC
  -> EXTERN: (175,12) UTIL_RESIZE_TP


    Report from: Code generation optimizations [cg]

rmvs_util.f90(161,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_resize_tp_] rmvs_util.f90:161

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rbx rsi rdi r15]
        
    Routine temporaries
        Total         :      28
            Global    :       8
            Local     :      20
        Regenerable   :       0
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SORT_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SORT_PL) [8/13=61.5%] rmvs_util.f90(181,22)
  -> EXTERN: (204,10) _for_check_mult_overflow64
  -> EXTERN: (204,10) _for_alloc_allocatable
  -> EXTERN: (206,15) _for_cpstr
  -> EXTERN: (207,18) _for_allocate
  -> EXTERN: (207,18) _for_deallocate
  -> EXTERN: (207,18) UTIL_SORT_INDEX_I4B
  -> EXTERN: (208,15) _for_cpstr
  -> EXTERN: (209,18) _for_deallocate
  -> EXTERN: (209,18) _for_allocate
  -> EXTERN: (209,18) UTIL_SORT_INDEX_I4B
  -> EXTERN: (210,15) _for_cpstr
  -> EXTERN: (211,18) _for_deallocate
  -> EXTERN: (211,18) _for_allocate
  -> EXTERN: (211,18) UTIL_SORT_INDEX_I4B
  -> EXTERN: (212,15) _for_cpstr
  -> EXTERN: (212,24) _for_cpstr
  -> EXTERN: (212,33) _for_cpstr
  -> EXTERN: (212,51) _for_cpstr
  -> EXTERN: (213,13) _for_deallocate
  -> EXTERN: (213,13) _for_deallocate
  -> EXTERN: (213,13) _for_write_seq_lis
  -> EXTERN: (213,13) _for_deallocate
  -> EXTERN: (213,45) _for_trim
  -> EXTERN: (213,45) _for_allocate
  -> EXTERN: (213,50) _for_allocate
  -> EXTERN: (213,50) _for_adjustl
  -> EXTERN: (213,67) _for_concat
  -> EXTERN: (213,67) _for_allocate
  -> EXTERN: (215,18) WHM_UTIL_SORT_PL
  -> INDIRECT-: (219,15)  (*((P64*) *((P64*) (_rmvs_classes_mp_rmvs_util_sort_pl_$SELF_V$d994.0.8 + 56(SI64)))))[26(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (223,4) _for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_util.f90(207,18)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at rmvs_util.f90(207,18)
   remark #15389: vectorization support: reference at (207:38) has unaligned access   [ rmvs_util.f90(207,38) ]
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at rmvs_util.f90(207,18)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at rmvs_util.f90(209,18)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at rmvs_util.f90(209,18)
   remark #15389: vectorization support: reference at (209:38) has unaligned access   [ rmvs_util.f90(209,38) ]
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at rmvs_util.f90(209,18)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at rmvs_util.f90(211,18)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at rmvs_util.f90(211,18)
   remark #15389: vectorization support: reference at (211:38) has unaligned access   [ rmvs_util.f90(211,38) ]
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at rmvs_util.f90(211,18)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_util.f90(192,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
rmvs_util.f90(181,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_sort_pl_] rmvs_util.f90:181

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     370
            Global    :      66
            Local     :     304
        Regenerable   :     100
        Spilled       :       8
        
    Routine stack
        Variables     :    1144 bytes*
            Reads     :      34 [2.56e+00 ~ 2.6%]
            Writes    :     102 [7.53e+00 ~ 7.5%]
        Spills        :      24 bytes*
            Reads     :      11 [1.92e-01 ~ 0.2%]
            Writes    :       3 [2.64e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SORT_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SORT_TP) [9/13=69.2%] rmvs_util.f90(226,22)
  -> EXTERN: (249,10) _for_check_mult_overflow64
  -> EXTERN: (249,10) _for_alloc_allocatable
  -> EXTERN: (251,15) _for_cpstr
  -> EXTERN: (252,18) UTIL_SORT_INDEX_I4B
  -> EXTERN: (252,18) _for_allocate
  -> EXTERN: (252,18) _for_deallocate
  -> EXTERN: (253,15) _for_cpstr
  -> EXTERN: (254,18) UTIL_SORT_INDEX_I4B
  -> EXTERN: (254,18) _for_deallocate
  -> EXTERN: (254,18) _for_allocate
  -> EXTERN: (255,15) _for_cpstr
  -> EXTERN: (255,24) _for_cpstr
  -> EXTERN: (255,43) _for_cpstr
  -> EXTERN: (255,60) _for_cpstr
  -> EXTERN: (255,69) _for_cpstr
  -> EXTERN: (255,78) _for_cpstr
  -> EXTERN: (256,13) _for_deallocate
  -> EXTERN: (256,13) _for_write_seq_lis
  -> EXTERN: (256,13) _for_deallocate
  -> EXTERN: (256,13) _for_deallocate
  -> EXTERN: (256,45) _for_allocate
  -> EXTERN: (256,45) _for_trim
  -> EXTERN: (256,50) _for_adjustl
  -> EXTERN: (256,50) _for_allocate
  -> EXTERN: (256,67) _for_concat
  -> EXTERN: (256,67) _for_allocate
  -> EXTERN: (258,18) UTIL_SORT_TP
  -> INDIRECT-: (262,15)  (*((P64*) *((P64*) (_rmvs_classes_mp_rmvs_util_sort_tp_$SELF_V$db78.0.9 + 56(SI64)))))[26(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (266,4) _for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_util.f90(252,18)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at rmvs_util.f90(252,18)
   remark #15389: vectorization support: reference at (252:38) has unaligned access   [ rmvs_util.f90(252,38) ]
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at rmvs_util.f90(252,18)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at rmvs_util.f90(254,18)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at rmvs_util.f90(254,18)
   remark #15389: vectorization support: reference at (254:38) has unaligned access   [ rmvs_util.f90(254,38) ]
   remark #15389: vectorization support: reference self(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 2.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at rmvs_util.f90(254,18)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_util.f90(237,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
rmvs_util.f90(226,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_sort_tp_] rmvs_util.f90:226

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     338
            Global    :      59
            Local     :     279
        Regenerable   :      96
        Spilled       :      10
        
    Routine stack
        Variables     :     928 bytes*
            Reads     :      29 [2.60e+00 ~ 2.6%]
            Writes    :      82 [7.55e+00 ~ 7.5%]
        Spills        :      40 bytes*
            Reads     :      10 [3.32e-01 ~ 0.3%]
            Writes    :       5 [4.45e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SORT_REARRANGE_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SORT_REARRANGE_PL) [10/13=76.9%] rmvs_util.f90(268,22)
  -> EXTERN: (281,15) UTIL_SORT_REARRANGE_ARR_I4B
  -> EXTERN: (282,15) UTIL_SORT_REARRANGE_ARR_I4B
  -> EXTERN: (283,15) UTIL_SORT_REARRANGE_ARR_I4B
  -> EXTERN: (284,15) UTIL_SORT_REARRANGE_PL


    Report from: Code generation optimizations [cg]

rmvs_util.f90(268,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_sort_rearrange_pl_] rmvs_util.f90:268

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      28
            Global    :      10
            Local     :      18
        Regenerable   :       0
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SORT_REARRANGE_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SORT_REARRANGE_TP) [11/13=84.6%] rmvs_util.f90(291,22)
  -> EXTERN: (304,15) UTIL_SORT_REARRANGE_ARR_LOGICAL
  -> EXTERN: (305,15) UTIL_SORT_REARRANGE_ARR_I4B
  -> EXTERN: (306,15) UTIL_SORT_REARRANGE_ARR_I4B
  -> EXTERN: (307,15) UTIL_SORT_REARRANGE_ARR_DPVEC
  -> EXTERN: (308,15) UTIL_SORT_REARRANGE_TP


    Report from: Code generation optimizations [cg]

rmvs_util.f90(291,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_sort_rearrange_tp_] rmvs_util.f90:291

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rsi rdi r13-r15]
        
    Routine temporaries
        Total         :      33
            Global    :      10
            Local     :      23
        Regenerable   :       0
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SPILL_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SPILL_PL) [12/13=92.3%] rmvs_util.f90(315,22)
  -> EXTERN: (331,22) _strcmp
  -> EXTERN: (333,18) UTIL_SPILL_ARR_I4B
  -> EXTERN: (334,18) UTIL_SPILL_ARR_I4B
  -> EXTERN: (335,18) UTIL_SPILL_ARR_I4B
  -> EXTERN: (337,18) WHM_UTIL_SPILL_PL
  -> EXTERN: (339,13) _for_write_seq_lis
  -> EXTERN: (340,18) UTIL_EXIT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_util.f90(331,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_util.f90(315,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_spill_pl_] rmvs_util.f90:315

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      79
            Global    :      17
            Local     :      62
        Regenerable   :      20
        Spilled       :       6
        
    Routine stack
        Variables     :     208 bytes*
            Reads     :       2 [6.19e-01 ~ 0.6%]
            Writes    :      17 [5.26e+00 ~ 5.3%]
        Spills        :      24 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SPILL_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (RMVS_CLASSES@S_RMVS_UTIL::RMVS_UTIL_SPILL_TP) [13/13=100.0%] rmvs_util.f90(348,22)
  -> EXTERN: (364,22) _strcmp
  -> EXTERN: (366,18) UTIL_SPILL_ARR_LOGICAL
  -> EXTERN: (367,18) UTIL_SPILL_ARR_I4B
  -> EXTERN: (368,18) UTIL_SPILL_ARR_I4B
  -> EXTERN: (370,18) UTIL_SPILL_TP
  -> EXTERN: (372,13) _for_write_seq_lis
  -> EXTERN: (373,18) UTIL_EXIT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at rmvs_util.f90(364,22)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

rmvs_util.f90(348,22):remark #34051: REGISTER ALLOCATION : [_rmvs_classes_mp_rmvs_util_spill_tp_] rmvs_util.f90:348

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      79
            Global    :      17
            Local     :      62
        Regenerable   :      20
        Spilled       :       6
        
    Routine stack
        Variables     :     208 bytes*
            Reads     :       2 [6.19e-01 ~ 0.6%]
            Writes    :      17 [5.26e+00 ~ 5.3%]
        Spills        :      24 bytes*
            Reads     :       6 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.


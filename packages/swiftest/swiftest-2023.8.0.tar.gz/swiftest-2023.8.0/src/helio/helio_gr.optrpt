Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.4.0 Build 20210910_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/include -I/opt/intel/oneapi/mkl/2021.4.0/include -g -O2 -qopt-report=5 -shared-intel -traceback -simd -xhost -align all -pad -assume contiguous_assumed_shape -vecabi=cmdtarget -fp-model no-except -fma -qopenmp -parallel -fp-model=fast -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _helio_classes.s_helio_gr._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_helio_classes.s_helio_gr._) [1/5=20.0%] helio_gr.f90(1,26)


    Report from: Code generation optimizations [cg]

helio_gr.f90(1,26):remark #34051: REGISTER ALLOCATION : [_helio_classes.s_helio_gr._] helio_gr.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HELIO_CLASSES@S_HELIO_GR::HELIO_GR_KICK_GETACCH_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HELIO_CLASSES@S_HELIO_GR::HELIO_GR_KICK_GETACCH_PL) [2/5=40.0%] helio_gr.f90(5,27)
  -> EXTERN: (25,15) GR_KICK_GETACCH
  -> EXTERN: (30,4) _for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helio_gr.f90(26,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at helio_gr.f90(26,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at helio_gr.f90(26,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,:) has aligned access
      remark #15389: vectorization support: reference self(:,:) has unaligned access
      remark #15388: vectorization support: reference self(:,:) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.542
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.480 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at helio_gr.f90(26,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference self(:,:) has unaligned access
      remark #15389: vectorization support: reference self(:,:) has unaligned access
      remark #15389: vectorization support: reference self(:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.111
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.480 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at helio_gr.f90(26,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helio_gr.f90(19,55):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
helio_gr.f90(5,27):remark #34051: REGISTER ALLOCATION : [_helio_classes_mp_helio_gr_kick_getacch_pl_] helio_gr.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     159
            Global    :      39
            Local     :     120
        Regenerable   :      19
        Spilled       :       8
        
    Routine stack
        Variables     :     432 bytes*
            Reads     :       2 [1.43e-01 ~ 0.1%]
            Writes    :      43 [3.06e+00 ~ 3.1%]
        Spills        :      40 bytes*
            Reads     :       7 [9.29e-01 ~ 0.9%]
            Writes    :       5 [1.39e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HELIO_CLASSES@S_HELIO_GR::HELIO_GR_KICK_GETACCH_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HELIO_CLASSES@S_HELIO_GR::HELIO_GR_KICK_GETACCH_TP) [3/5=60.0%] helio_gr.f90(33,27)
  -> EXTERN: (51,15) GR_KICK_GETACCH


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helio_gr.f90(52,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at helio_gr.f90(52,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at helio_gr.f90(52,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,:) has aligned access
      remark #15389: vectorization support: reference self(:,:) has unaligned access
      remark #15388: vectorization support: reference self(:,:) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.542
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.480 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at helio_gr.f90(52,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference self(:,:) has unaligned access
      remark #15389: vectorization support: reference self(:,:) has unaligned access
      remark #15389: vectorization support: reference self(:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.111
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.480 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at helio_gr.f90(52,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helio_gr.f90(33,27):remark #34051: REGISTER ALLOCATION : [_helio_classes_mp_helio_gr_kick_getacch_tp_] helio_gr.f90:33

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     114
            Global    :      36
            Local     :      78
        Regenerable   :      14
        Spilled       :       8
        
    Routine stack
        Variables     :     336 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      38 [2.68e+00 ~ 2.7%]
        Spills        :      40 bytes*
            Reads     :       7 [9.43e-01 ~ 0.9%]
            Writes    :       5 [1.41e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HELIO_CLASSES@S_HELIO_GR::HELIO_GR_P4_PL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HELIO_CLASSES@S_HELIO_GR::HELIO_GR_P4_PL) [4/5=80.0%] helio_gr.f90(59,27)
  -> EXTERN: (78,18) _alloca
  -> EXTERN: (78,18) GR_P4_POS_KICK
  -> EXTERN: (78,18) __resetsp_inlined
  -> EXTERN: (78,18) __getsp_inlined
  -> EXTERN: (78,40) _alloca


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at helio_gr.f90(77,10)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helio_gr.f90(77,10)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (78:18) and at (78:18)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (78:18) and at (78:18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at helio_gr.f90(78,18)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (78:18) and at (78:18)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (78:18) and at (78:18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at helio_gr.f90(78,18)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (78:40) has aligned access   [ helio_gr.f90(78,40) ]
         remark #15389: vectorization support: reference self(:,i) has unaligned access   [ helio_gr.f90(78,40) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 3.200 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at helio_gr.f90(78,18)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at helio_gr.f90(78,40)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (78:40) and at (78:40)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (78:40) and at (78:40)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at helio_gr.f90(78,40)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (78:53) has aligned access   [ helio_gr.f90(78,53) ]
         remark #15389: vectorization support: reference self(:,i) has unaligned access   [ helio_gr.f90(78,53) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 3.200 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at helio_gr.f90(78,40)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at helio_gr.f90(78,40)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (78:40) and self(:,i) (78:40)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (78:40) and self(:,i) (78:40)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at helio_gr.f90(78,40)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference self(:,i) has unaligned access
         remark #15388: vectorization support: reference at (78:40) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at helio_gr.f90(78,40)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at helio_gr.f90(78,53)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (78:53) and self(:,i) (78:53)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (78:53) and self(:,i) (78:53)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at helio_gr.f90(78,53)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference self(:,i) has unaligned access
         remark #15388: vectorization support: reference at (78:53) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at helio_gr.f90(78,53)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helio_gr.f90(78,18):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(78,18):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(78,18):remark #34026: call to memcpy implemented as a call to optimized library version
helio_gr.f90(78,40):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(78,40):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(78,40):remark #34026: call to memcpy implemented as a call to optimized library version
helio_gr.f90(78,40):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(78,40):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(78,40):remark #34026: call to memcpy implemented as a call to optimized library version
helio_gr.f90(78,53):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(78,53):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(78,53):remark #34026: call to memcpy implemented as a call to optimized library version
helio_gr.f90(59,27):remark #34051: REGISTER ALLOCATION : [_helio_classes_mp_helio_gr_p4_pl_] helio_gr.f90:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     312
            Global    :      73
            Local     :     239
        Regenerable   :     112
        Spilled       :      21
        
    Routine stack
        Variables     :     340 bytes*
            Reads     :      12 [0.00e+00 ~ 0.0%]
            Writes    :       9 [5.53e+00 ~ 5.5%]
        Spills        :     200 bytes*
            Reads     :      65 [7.34e+00 ~ 7.3%]
            Writes    :      48 [7.08e+00 ~ 7.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HELIO_CLASSES@S_HELIO_GR::HELIO_GR_P4_TP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HELIO_CLASSES@S_HELIO_GR::HELIO_GR_P4_TP) [5/5=100.0%] helio_gr.f90(85,27)
  -> EXTERN: (104,18) _alloca
  -> EXTERN: (104,18) GR_P4_POS_KICK
  -> EXTERN: (104,18) __resetsp_inlined
  -> EXTERN: (104,18) __getsp_inlined
  -> EXTERN: (104,40) _alloca


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at helio_gr.f90(103,10)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at helio_gr.f90(103,10)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (104:18) and at (104:18)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (104:18) and at (104:18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at helio_gr.f90(104,18)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (104:18) and at (104:18)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (104:18) and at (104:18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at helio_gr.f90(104,18)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (104:40) has aligned access   [ helio_gr.f90(104,40) ]
         remark #15389: vectorization support: reference self(:,i) has unaligned access   [ helio_gr.f90(104,40) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 3.200 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at helio_gr.f90(104,18)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at helio_gr.f90(104,40)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (104:40) and at (104:40)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (104:40) and at (104:40)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at helio_gr.f90(104,40)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (104:53) has aligned access   [ helio_gr.f90(104,53) ]
         remark #15389: vectorization support: reference self(:,i) has unaligned access   [ helio_gr.f90(104,53) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 3.200 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at helio_gr.f90(104,40)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at helio_gr.f90(104,40)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (104:40) and self(:,i) (104:40)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (104:40) and self(:,i) (104:40)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at helio_gr.f90(104,40)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference self(:,i) has unaligned access
         remark #15388: vectorization support: reference at (104:40) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at helio_gr.f90(104,40)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at helio_gr.f90(104,53)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (104:53) and self(:,i) (104:53)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (104:53) and self(:,i) (104:53)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at helio_gr.f90(104,53)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference self(:,i) has unaligned access
         remark #15388: vectorization support: reference at (104:53) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at helio_gr.f90(104,53)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

helio_gr.f90(104,18):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(104,18):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(104,18):remark #34026: call to memcpy implemented as a call to optimized library version
helio_gr.f90(104,40):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(104,40):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(104,40):remark #34026: call to memcpy implemented as a call to optimized library version
helio_gr.f90(104,40):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(104,40):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(104,40):remark #34026: call to memcpy implemented as a call to optimized library version
helio_gr.f90(104,53):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(104,53):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
helio_gr.f90(104,53):remark #34026: call to memcpy implemented as a call to optimized library version
helio_gr.f90(85,27):remark #34051: REGISTER ALLOCATION : [_helio_classes_mp_helio_gr_p4_tp_] helio_gr.f90:85

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     312
            Global    :      73
            Local     :     239
        Regenerable   :     112
        Spilled       :      21
        
    Routine stack
        Variables     :     340 bytes*
            Reads     :      12 [0.00e+00 ~ 0.0%]
            Writes    :       9 [5.53e+00 ~ 5.5%]
        Spills        :     200 bytes*
            Reads     :      65 [7.34e+00 ~ 7.3%]
            Writes    :      48 [7.08e+00 ~ 7.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

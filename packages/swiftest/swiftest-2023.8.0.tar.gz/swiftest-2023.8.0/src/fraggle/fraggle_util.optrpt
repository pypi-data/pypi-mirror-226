Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.4.0 Build 20210910_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/include -I/opt/intel/oneapi/mkl/2021.4.0/include -g -O2 -qopt-report=5 -shared-intel -traceback -simd -xhost -align all -pad -assume contiguous_assumed_shape -vecabi=cmdtarget -fp-model no-except -fma -qopenmp -parallel -fp-model=fast -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _fraggle_classes.s_fraggle_util._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_fraggle_classes.s_fraggle_util._) [1/8=12.5%] fraggle_util.f90(1,28)


    Report from: Code generation optimizations [cg]

fraggle_util.f90(1,28):remark #34051: REGISTER ALLOCATION : [_fraggle_classes.s_fraggle_util._] fraggle_util.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_ANG_MTM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_ANG_MTM) [2/8=25.0%] fraggle_util.f90(53,22)
  -> EXTERN: (68,13) __resetsp_inlined
  -> EXTERN: (68,13) __getsp_inlined
  -> EXTERN: (68,65) _alloca
  -> EXTERN: (68,83) _alloca
  -> EXTERN: (68,83) OPERATOR_CROSS_DP


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at fraggle_util.f90(64,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference self%L_ORBIT(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at fraggle_util.f90(65,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference self%L_SPIN(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 0.810 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at fraggle_util.f90(67,10)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between self(i) (68:49) and self%L_SPIN(:) (69:13)
   remark #17106: parallel dependence: assumed FLOW dependence between self%L_SPIN(:) (69:13) and self(i) (68:49)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(68,83)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (68:83) and at (68:83)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (68:83) and at (68:83)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at fraggle_util.f90(68,83)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (68:65) has aligned access   [ fraggle_util.f90(68,65) ]
         remark #15389: vectorization support: reference self(:,i) has unaligned access   [ fraggle_util.f90(68,65) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 3.200 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at fraggle_util.f90(68,83)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at fraggle_util.f90(68,65)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (68:65) and at (68:65)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (68:65) and at (68:65)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at fraggle_util.f90(68,65)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (68:91) has aligned access   [ fraggle_util.f90(68,91) ]
         remark #15389: vectorization support: reference self(:,i) has unaligned access   [ fraggle_util.f90(68,91) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 3.200 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at fraggle_util.f90(68,65)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at fraggle_util.f90(68,65)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (68:65) and self(:,i) (68:65)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (68:65) and self(:,i) (68:65)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at fraggle_util.f90(68,65)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference self(:,i) has unaligned access
         remark #15388: vectorization support: reference at (68:65) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at fraggle_util.f90(68,65)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at fraggle_util.f90(68,91)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (68:91) and self(:,i) (68:91)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,i) (68:91) and self(:,i) (68:91)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at fraggle_util.f90(68,91)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference self(:,i) has unaligned access
         remark #15388: vectorization support: reference at (68:91) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at fraggle_util.f90(68,91)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at fraggle_util.f90(68,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (68:13) has aligned access
      remark #15389: vectorization support: reference self%L_ORBIT(:) has unaligned access   [ fraggle_util.f90(68,49) ]
      remark #15388: vectorization support: reference at (68:83) has aligned access   [ fraggle_util.f90(68,83) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 1.200 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at fraggle_util.f90(68,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference self%L_ORBIT(:) has unaligned access
      remark #15388: vectorization support: reference at (68:13) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at fraggle_util.f90(69,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (69:13) has aligned access
      remark #15389: vectorization support: reference self(:,i) has unaligned access   [ fraggle_util.f90(69,80) ]
      remark #15389: vectorization support: reference self(:,i) has unaligned access   [ fraggle_util.f90(69,60) ]
      remark #15389: vectorization support: reference self%L_SPIN(:) has unaligned access   [ fraggle_util.f90(69,47) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.714
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 15 
      remark #15477: vector cost: 7.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at fraggle_util.f90(69,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference self%L_SPIN(:) has unaligned access
      remark #15388: vectorization support: reference at (69:13) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at fraggle_util.f90(68,13)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END

   LOOP BEGIN at fraggle_util.f90(69,13)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

fraggle_util.f90(68,83):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(68,83):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(68,83):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(68,65):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(68,65):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(68,65):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(68,65):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(68,65):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(68,65):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(68,91):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(68,91):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(68,91):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(53,22):remark #34051: REGISTER ALLOCATION : [_fraggle_classes_mp_fraggle_util_ang_mtm_] fraggle_util.f90:53

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     188
            Global    :      61
            Local     :     127
        Regenerable   :       6
        Spilled       :      14
        
    Routine stack
        Variables     :     432 bytes*
            Reads     :       6 [1.67e+00 ~ 1.7%]
            Writes    :      44 [8.65e+00 ~ 8.7%]
        Spills        :     112 bytes*
            Reads     :      37 [5.48e+00 ~ 5.5%]
            Writes    :      18 [2.05e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_GET_ENERGY_MOMENTUM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_GET_ENERGY_MOMENTUM) [3/8=37.5%] fraggle_util.f90(126,22)
  -> EXTERN: (160,10) _for_check_mult_overflow64
  -> EXTERN: (160,10) _for_alloc_allocatable
  -> (164,18) FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_CONSTRUCT_TEMPORARY_SYSTEM (isz = 1013) (sz = 1026)
     [[ Inlining would exceed -inline-max-size value (1026>253) <1>]]
  -> EXTERN: (167,13) __resetsp_inlined
  -> EXTERN: (167,13) __getsp_inlined
  -> EXTERN: (167,13) _alloca
  -> EXTERN: (169,16) _for_write_seq_lis
  -> EXTERN: (170,21) UTIL_EXIT
  -> (172,18) FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_ADD_FRAGMENTS_TO_SYSTEM (isz = 1338) (sz = 1349)
     [[ Inlining would exceed -inline-max-size value (1349>253) <1>]]
  -> INDIRECT-: (175,15)  (*((P64*) *((P64*) (&_fraggle_classes_mp_fraggle_util_get_energy_momentum_$TMPSYS$73_V$cc31.0.5->SWIFTEST_NBODY_SYSTEM$PL$4_V$12a + 56(SI64)))))[29(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (177,15)  (*((P64*) _fraggle_classes_mp_fraggle_util_get_energy_momentum_$TMPSYS$73_V$cc38.0.5))[25(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (201,4) _for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at fraggle_util.f90(162,13)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(:) (162:13) and LEXCLUDE(:) (162:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(:) (162:13) and LEXCLUDE(:) (162:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(162,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference LEXCLUDE(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(162,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(163,13)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(:) (163:13) and LEXCLUDE(:) (163:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(:) (163:13) and LEXCLUDE(:) (163:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(163,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference LEXCLUDE(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(163,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(166,13)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(:) (166:13) and LEXCLUDE(:) (166:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(:) (166:13) and LEXCLUDE(:) (166:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(166,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference LEXCLUDE(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(166,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(167,13)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (167:13) and at (167:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (167:13) and at (167:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(167,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (167:22) has aligned access   [ fraggle_util.f90(167,22) ]
      remark #15389: vectorization support: reference colliders(:) has unaligned access   [ fraggle_util.f90(167,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 6.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(167,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(167,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(colliders(:)) (167:13) and LEXCLUDE(colliders(:)) (167:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(colliders(:)) (167:13) and LEXCLUDE(colliders(:)) (167:13)
   remark #15389: vectorization support: reference colliders(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <LEXCLUDE(colliders(:))>, part of index is read from memory
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.034
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 22.000 
   remark #15478: estimated potential speedup: 0.180 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at fraggle_util.f90(167,13)
<Remainder>
LOOP END

LOOP BEGIN at fraggle_util.f90(182,13)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference self%LORBIT_BEFORE(:) has unaligned access
   remark #15389: vectorization support: reference TMPSYS%LORBIT(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at fraggle_util.f90(183,13)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference self%LSPIN_BEFORE(:) has unaligned access
   remark #15389: vectorization support: reference TMPSYS%LSPIN(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at fraggle_util.f90(184,13)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference self%LTOT_BEFORE(:) has unaligned access
   remark #15389: vectorization support: reference TMPSYS%LTOT(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at fraggle_util.f90(190,13)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference self%LORBIT_AFTER(:) has unaligned access
   remark #15389: vectorization support: reference TMPSYS%LORBIT(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at fraggle_util.f90(191,13)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference self%LSPIN_AFTER(:) has unaligned access
   remark #15389: vectorization support: reference TMPSYS%LSPIN(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at fraggle_util.f90(192,13)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference self%LTOT_AFTER(:) has unaligned access
   remark #15389: vectorization support: reference TMPSYS%LTOT(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.750 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

fraggle_util.f90(142,45):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(149,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
fraggle_util.f90(149,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(149,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
fraggle_util.f90(149,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(162,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(162,13):remark #34026: call to memset implemented as a call to optimized library version
fraggle_util.f90(163,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(163,13):remark #34026: call to memset implemented as a call to optimized library version
fraggle_util.f90(166,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(166,13):remark #34026: call to memset implemented as a call to optimized library version
fraggle_util.f90(167,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(167,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(167,13):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(126,22):remark #34051: REGISTER ALLOCATION : [_fraggle_classes_mp_fraggle_util_get_energy_momentum_] fraggle_util.f90:126

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     302
            Global    :      69
            Local     :     233
        Regenerable   :      51
        Spilled       :       8
        
    Routine stack
        Variables     :     416 bytes*
            Reads     :      10 [1.33e+00 ~ 1.3%]
            Writes    :      40 [8.32e+00 ~ 8.3%]
        Spills        :      32 bytes*
            Reads     :       7 [1.33e+00 ~ 1.3%]
            Writes    :       4 [9.47e-01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_ADD_FRAGMENTS_TO_SYSTEM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_ADD_FRAGMENTS_TO_SYSTEM) [4/8=50.0%] fraggle_util.f90(5,22)
  -> EXTERN: (22,10) _for_check_mult_overflow64
  -> EXTERN: (22,10) _for_alloc_allocatable
  -> EXTERN: (25,10) _alloca
  -> EXTERN: (25,10) __resetsp_inlined
  -> EXTERN: (25,10) __getsp_inlined
  -> EXTERN: (27,10) __resetsp_inlined
  -> EXTERN: (27,10) __getsp_inlined
  -> EXTERN: (27,10) _alloca
  -> EXTERN: (35,13) _alloca
  -> EXTERN: (35,13) __getsp_inlined
  -> EXTERN: (35,13) __resetsp_inlined
  -> EXTERN: (36,13) _alloca
  -> EXTERN: (36,13) __getsp_inlined
  -> EXTERN: (36,13) __resetsp_inlined
  -> EXTERN: (40,10) __getsp_inlined
  -> EXTERN: (40,10) _alloca
  -> EXTERN: (40,10) __resetsp_inlined
  -> EXTERN: (41,10) _alloca
  -> EXTERN: (44,13) __getsp_inlined
  -> EXTERN: (44,13) __resetsp_inlined
  -> EXTERN: (50,4) _for_dealloc_allocatable


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at fraggle_util.f90(28,10)
remark #16200: OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at fraggle_util.f90(24,10)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between PL(:) (24:10) and PL(:) (24:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between PL(:) (24:10) and PL(:) (24:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(24,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference PL(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(24,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(25,10)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (25:10) and at (25:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (25:10) and at (25:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(25,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (25:10) has aligned access
      remark #15389: vectorization support: reference frag(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 3.200 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(25,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(25,10)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between PL(:) (25:10) and PL(:) (25:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between PL(:) (25:10) and PL(:) (25:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(25,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference PL(:) has unaligned access
      remark #15388: vectorization support: reference at (25:10) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(25,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(26,10)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at fraggle_util.f90(26,10)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference PL(:) has aligned access
   remark #15389: vectorization support: reference frag(:) has unaligned access   [ fraggle_util.f90(26,66) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.583
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.470 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at fraggle_util.f90(26,10)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference PL(:) has aligned access
   remark #15389: vectorization support: reference frag(:) has unaligned access   [ fraggle_util.f90(26,66) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.333
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at fraggle_util.f90(26,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at fraggle_util.f90(26,10)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PL(:) (26:10) and frag(:) (26:10)
   remark #17106: parallel dependence: assumed ANTI dependence between frag(:) (26:10) and PL(:) (26:10)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at fraggle_util.f90(26,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at fraggle_util.f90(27,10)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (27:10) and at (27:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (27:10) and at (27:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(27,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (27:10) has aligned access
      remark #15389: vectorization support: reference frag(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 3.200 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(27,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(27,10)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between PL(:) (27:10) and PL(:) (27:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between PL(:) (27:10) and PL(:) (27:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(27,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference PL(:) has unaligned access
      remark #15388: vectorization support: reference at (27:10) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(27,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(35,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (35:13) and at (35:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (35:13) and at (35:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(35,13)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (35:13) and at (35:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (35:13) and at (35:13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at fraggle_util.f90(35,13)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (35:13) has unaligned access
         remark #15389: vectorization support: reference frag(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at fraggle_util.f90(35,13)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(35,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between PL%SWIFTEST (35:13) and PL(:,:) (35:13)
   remark #17106: parallel dependence: assumed FLOW dependence between PL(:,:) (35:13) and PL%SWIFTEST (35:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(35,13)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between PL%SWIFTEST (35:13) and PL(:,:) (35:13)
      remark #17106: parallel dependence: assumed FLOW dependence between PL(:,:) (35:13) and PL%SWIFTEST (35:13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at fraggle_util.f90(35,13)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference PL(:,:) has unaligned access
         remark #15389: vectorization support: reference at (35:13) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at fraggle_util.f90(35,13)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(36,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (36:13) and at (36:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (36:13) and at (36:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(36,13)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (36:13) and at (36:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (36:13) and at (36:13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at fraggle_util.f90(36,13)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (36:13) has unaligned access
         remark #15389: vectorization support: reference frag(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at fraggle_util.f90(36,13)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(36,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between PL%SWIFTEST (36:13) and PL(:,:) (36:13)
   remark #17106: parallel dependence: assumed FLOW dependence between PL(:,:) (36:13) and PL%SWIFTEST (36:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(36,13)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between PL%SWIFTEST (36:13) and PL(:,:) (36:13)
      remark #17106: parallel dependence: assumed FLOW dependence between PL(:,:) (36:13) and PL%SWIFTEST (36:13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at fraggle_util.f90(36,13)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference PL(:,:) has unaligned access
         remark #15389: vectorization support: reference at (36:13) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at fraggle_util.f90(36,13)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(39,10)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(:) (39:10) and LEXCLUDE(:) (39:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(:) (39:10) and LEXCLUDE(:) (39:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(39,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference LEXCLUDE(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(39,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(40,10)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (40:10) and at (40:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (40:10) and at (40:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(40,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (40:19) has aligned access   [ fraggle_util.f90(40,19) ]
      remark #15389: vectorization support: reference colliders(:) has unaligned access   [ fraggle_util.f90(40,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 6.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(40,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(40,10)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(colliders(:)) (40:10) and LEXCLUDE(colliders(:)) (40:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between LEXCLUDE(colliders(:)) (40:10) and LEXCLUDE(colliders(:)) (40:10)
   remark #15389: vectorization support: reference colliders(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <LEXCLUDE(colliders(:))>, part of index is read from memory
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.034
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 22.000 
   remark #15478: estimated potential speedup: 0.180 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at fraggle_util.f90(40,10)
<Remainder>
LOOP END

LOOP BEGIN at fraggle_util.f90(41,10)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (41:10) and at (41:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (41:10) and at (41:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(41,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (41:16) has aligned access   [ fraggle_util.f90(41,16) ]
      remark #15389: vectorization support: reference LEXCLUDE(:) has unaligned access   [ fraggle_util.f90(41,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 6.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(41,10)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (41:16) has aligned access   [ fraggle_util.f90(41,16) ]
      remark #15388: vectorization support: reference LEXCLUDE(:) has aligned access   [ fraggle_util.f90(41,16) ]
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 6.400 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(42,13)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference PL(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 5.480 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at fraggle_util.f90(42,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at fraggle_util.f90(44,13)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference PL(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 1.870 
   remark #15478: estimated potential speedup: 5.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at fraggle_util.f90(44,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at fraggle_util.f90(31,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between frag(:,i) (29:13) and PL%pl(:,npl_before+i) (32:13)
   remark #17106: parallel dependence: assumed FLOW dependence between PL%pl(:,npl_before+i) (32:13) and frag(:,i) (29:13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at fraggle_util.f90(29,13)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between frag(:,i) (29:13) and PL%pl(:,npl_before+i) (29:13)
      remark #17106: parallel dependence: assumed FLOW dependence between PL%pl(:,npl_before+i) (29:13) and frag(:,i) (29:13)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at fraggle_util.f90(29,13)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between PL%pl(:,npl_before+i) (29:13) and frag(:,i) (29:13)
         remark #17106: parallel dependence: assumed ANTI dependence between frag(:,i) (29:13) and PL%pl(:,npl_before+i) (29:13)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at fraggle_util.f90(29,13)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END

   LOOP BEGIN at fraggle_util.f90(30,13)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between frag(:,i) (30:13) and PL%pl(:,npl_before+i) (30:13)
      remark #17106: parallel dependence: assumed FLOW dependence between PL%pl(:,npl_before+i) (30:13) and frag(:,i) (30:13)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at fraggle_util.f90(30,13)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between PL%pl(:,npl_before+i) (30:13) and frag(:,i) (30:13)
         remark #17106: parallel dependence: assumed ANTI dependence between frag(:,i) (30:13) and PL%pl(:,npl_before+i) (30:13)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at fraggle_util.f90(30,13)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END

   LOOP BEGIN at fraggle_util.f90(31,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END

   LOOP BEGIN at fraggle_util.f90(32,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

fraggle_util.f90(17,45):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(19,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
fraggle_util.f90(19,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(19,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
fraggle_util.f90(19,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(24,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(24,10):remark #34026: call to memset implemented as a call to optimized library version
fraggle_util.f90(25,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(25,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(25,10):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(25,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(25,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(25,10):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(27,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(27,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(27,10):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(27,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(27,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(27,10):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(39,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(39,10):remark #34026: call to memset implemented as a call to optimized library version
fraggle_util.f90(40,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(40,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(40,10):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(41,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(41,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(41,10):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(29,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(29,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(29,13):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(30,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(30,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(30,13):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(35,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(35,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(35,13):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(35,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(35,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(35,13):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(36,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(36,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(36,13):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(36,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(36,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(36,13):remark #34026: call to memcpy implemented as a call to optimized library version
fraggle_util.f90(5,22):remark #34051: REGISTER ALLOCATION : [_fraggle_classes_mp_fraggle_util_add_fragments_to_system_] fraggle_util.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     876
            Global    :     277
            Local     :     599
        Regenerable   :      82
        Spilled       :      74
        
    Routine stack
        Variables     :     376 bytes*
            Reads     :      37 [4.26e-01 ~ 0.4%]
            Writes    :      45 [1.86e+00 ~ 1.9%]
        Spills        :     624 bytes*
            Reads     :     175 [1.13e+01 ~ 11.3%]
            Writes    :      93 [2.20e+00 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_CONSTRUCT_TEMPORARY_SYSTEM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_CONSTRUCT_TEMPORARY_SYSTEM) [5/8=62.5%] fraggle_util.f90(77,22)
  -> EXTERN: (77,83) _for_finalize
  -> EXTERN: (77,83) _for_dealloc_all_nopdtlen
  -> EXTERN: (77,91) _for_finalize
  -> EXTERN: (77,91) _for_dealloc_all_nopdtlen
  -> EXTERN: (95,35) _for_finalize
  -> EXTERN: (95,35) _for_deallocate_all
  -> EXTERN: (96,33) _for_deallocate_all
  -> EXTERN: (96,33) _for_finalize
  -> EXTERN: (97,10) _for_alloc_copy
  -> EXTERN: (98,15) SETUP_CONSTRUCT_SYSTEM
  -> INDIRECT-: (101,15)  (*((P64*) *((P64*) (&(_fraggle_classes_mp_fraggle_util_construct_temporary_system_$TMPSYS_V$c834.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$c847.0.4)->SWIFTEST_NBODY_SYSTEM$TP$5_V$15a + 56(SI64)))))[19(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (104,10) _for_finalize
  -> EXTERN: (104,10) _for_deallocate_all
  -> EXTERN: (105,10) _for_alloc_copy
  -> INDIRECT-: (109,15)  (*((P64*) *((P64*) (&(_fraggle_classes_mp_fraggle_util_construct_temporary_system_$TMPSYS_V$c834.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$c847.0.4)->SWIFTEST_NBODY_SYSTEM$PL$4_V$12a + 56(SI64)))))[19(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (110,10) _for_alloc_allocatable
  -> EXTERN: (110,10) _for_check_mult_overflow64
  -> INDIRECT-: (115,15)  (*((P64*) *((P64*) (&(_fraggle_classes_mp_fraggle_util_construct_temporary_system_$TMPSYS_V$c834.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$c847.0.4)->SWIFTEST_NBODY_SYSTEM$PL$4_V$12a + 56(SI64)))))[23(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (118,15)  (*((P64*) *((P64*) (_fraggle_classes_mp_fraggle_util_construct_temporary_system_$TMPSYS_V$c834.0.4 + 56(SI64)))))[26(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (123,4) _for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at fraggle_util.f90(113,10)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between LINCLUDE(:) (113:10) and LINCLUDE(:) (113:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between LINCLUDE(:) (113:10) and LINCLUDE(:) (113:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(113,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference LINCLUDE(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(113,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(114,10)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between LINCLUDE(:) (114:10) and LINCLUDE(:) (114:10)
   remark #17106: parallel dependence: assumed OUTPUT dependence between LINCLUDE(:) (114:10) and LINCLUDE(:) (114:10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(114,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference LINCLUDE(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(114,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

fraggle_util.f90(90,45):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(93,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
fraggle_util.f90(93,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(93,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
fraggle_util.f90(93,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(113,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(113,10):remark #34026: call to memset implemented as a call to optimized library version
fraggle_util.f90(114,10):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
fraggle_util.f90(114,10):remark #34026: call to memset implemented as a call to optimized library version
fraggle_util.f90(77,22):remark #34051: REGISTER ALLOCATION : [_fraggle_classes_mp_fraggle_util_construct_temporary_system_] fraggle_util.f90:77

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     460
            Global    :      38
            Local     :     422
        Regenerable   :      43
        Spilled       :       5
        
    Routine stack
        Variables     :     412 bytes*
            Reads     :      14 [2.32e+00 ~ 2.3%]
            Writes    :      48 [8.14e+00 ~ 8.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_RESTRUCTURE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_RESTRUCTURE) [6/8=75.0%] fraggle_util.f90(204,22)
  -> EXTERN: (225,15) _for_random_number
  -> EXTERN: (250,4) _for_dealloc_allocatable
  -> EXTERN: (250,4) _for_dealloc_allocatable
  -> EXTERN: (250,4) _for_dealloc_allocatable
  -> EXTERN: (250,4) _for_dealloc_allocatable
  -> EXTERN: (250,4) _for_dealloc_allocatable
  -> EXTERN: (250,4) _for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at fraggle_util.f90(226,24)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference colliders%RADIUS(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 2.667
   remark #15355: vectorization support: at (226:24) is double type reduction
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

fraggle_util.f90(219,88):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(219,75):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(219,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(219,49):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(218,59):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(218,47):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
fraggle_util.f90(204,22):remark #34051: REGISTER ALLOCATION : [_fraggle_classes_mp_fraggle_util_restructure_] fraggle_util.f90:204

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :     310
            Global    :      48
            Local     :     262
        Regenerable   :      21
        Spilled       :       5
        
    Routine stack
        Variables     :     528 bytes*
            Reads     :      12 [4.88e+00 ~ 4.9%]
            Writes    :      30 [1.43e+01 ~ 14.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_SHIFT_VECTOR_TO_ORIGIN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_SHIFT_VECTOR_TO_ORIGIN) [7/8=87.5%] fraggle_util.f90(253,22)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at fraggle_util.f90(267,7)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference mvec_frag(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at fraggle_util.f90(267,7)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at fraggle_util.f90(268,14)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at fraggle_util.f90(268,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference m_frag(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.450
   remark #15355: vectorization support: at (268:7) is double type reduction   [ fraggle_util.f90(268,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.340 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at fraggle_util.f90(268,14)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference m_frag(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 5.333
   remark #15355: vectorization support: at (268:7) is double type reduction   [ fraggle_util.f90(268,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.340 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at fraggle_util.f90(268,14)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at fraggle_util.f90(271,7)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at fraggle_util.f90(271,7)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ fraggle_util.f90(272,10) ]
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ fraggle_util.f90(272,10) ]
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ fraggle_util.f90(272,10) ]
   remark #15389: vectorization support: reference m_frag(i) has unaligned access   [ fraggle_util.f90(272,53) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <vec_frag(:,i)>, stride is unknown to compiler   [ fraggle_util.f90(272,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <vec_frag(:,i)>, stride is unknown to compiler   [ fraggle_util.f90(272,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <vec_frag(:,i)>, stride is unknown to compiler   [ fraggle_util.f90(272,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.556
   remark #15355: vectorization support: mvec_frag(:) is double type reduction   [ fraggle_util.f90(272,10) ]
   remark #15355: vectorization support: mvec_frag(:) is double type reduction   [ fraggle_util.f90(272,10) ]
   remark #15355: vectorization support: mvec_frag(:) is double type reduction   [ fraggle_util.f90(272,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 11.250 
   remark #15478: estimated potential speedup: 1.970 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at fraggle_util.f90(272,10)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(271,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at fraggle_util.f90(274,7)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference com_offset(:) has aligned access
   remark #15388: vectorization support: reference mvec_frag(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 18.000 
   remark #15478: estimated potential speedup: 1.360 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at fraggle_util.f90(274,7)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at fraggle_util.f90(275,7)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at fraggle_util.f90(276,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference vec_frag(:,i) has unaligned access
      remark #15389: vectorization support: reference vec_frag(:,i) has unaligned access
      remark #15388: vectorization support: reference com_offset(:) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.810 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

fraggle_util.f90(272,10):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { unknown }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
fraggle_util.f90(253,22):remark #34051: REGISTER ALLOCATION : [_fraggle_classes_mp_fraggle_util_shift_vector_to_origin_] fraggle_util.f90:253

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rsi rdi r8-r12 zmm0-zmm15]
        
    Routine temporaries
        Total         :     141
            Global    :      54
            Local     :      87
        Regenerable   :       3
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_VMAG_TO_VB

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_VMAG_TO_VB) [8/8=100.0%] fraggle_util.f90(283,4)
  -> EXTERN: (283,103) _for_deallocate
  -> EXTERN: (299,7) _for_alloc_allocatable
  -> INLINE: (306,12) FRAGGLE_CLASSES@S_FRAGGLE_UTIL::FRAGGLE_UTIL_SHIFT_VECTOR_TO_ORIGIN (isz = 170) (sz = 177)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at fraggle_util.f90(303,20)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(303,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(303,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference vb(:,i) has aligned access
      remark #15389: vectorization support: reference v_r_unit(:,i) has unaligned access   [ fraggle_util.f90(303,20) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.583
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 5.300 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at fraggle_util.f90(303,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference vb(:,i) has unaligned access
      remark #15389: vectorization support: reference v_r_unit(:,i) has unaligned access   [ fraggle_util.f90(303,20) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.125
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 5.300 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at fraggle_util.f90(303,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(267,7) inlined into fraggle_util.f90(306,12)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference mvec_frag(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.500 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at fraggle_util.f90(267,7) inlined into fraggle_util.f90(306,12)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at fraggle_util.f90(268,14) inlined into fraggle_util.f90(306,12)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at fraggle_util.f90(268,14) inlined into fraggle_util.f90(306,12)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference m_frag(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.450
   remark #15355: vectorization support: at (268:7) is double type reduction   [ fraggle_util.f90(268,7) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.340 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at fraggle_util.f90(268,14) inlined into fraggle_util.f90(306,12)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference m_frag(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 5.333
   remark #15355: vectorization support: at (268:7) is double type reduction   [ fraggle_util.f90(268,7) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.340 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at fraggle_util.f90(268,14) inlined into fraggle_util.f90(306,12)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at fraggle_util.f90(271,7) inlined into fraggle_util.f90(306,12)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at fraggle_util.f90(271,7) inlined into fraggle_util.f90(306,12)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ fraggle_util.f90(272,10) ]
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ fraggle_util.f90(272,10) ]
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ fraggle_util.f90(272,10) ]
   remark #15389: vectorization support: reference m_frag(i) has unaligned access   [ fraggle_util.f90(272,53) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <vb(:,i)>, stride is unknown to compiler   [ fraggle_util.f90(272,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <vb(:,i)>, stride is unknown to compiler   [ fraggle_util.f90(272,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <vb(:,i)>, stride is unknown to compiler   [ fraggle_util.f90(272,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.556
   remark #15355: vectorization support: mvec_frag(:) is double type reduction   [ fraggle_util.f90(272,10) ]
   remark #15355: vectorization support: mvec_frag(:) is double type reduction   [ fraggle_util.f90(272,10) ]
   remark #15355: vectorization support: mvec_frag(:) is double type reduction   [ fraggle_util.f90(272,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15452: unmasked strided loads: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 11.250 
   remark #15478: estimated potential speedup: 1.970 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at fraggle_util.f90(272,10) inlined into fraggle_util.f90(306,12)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(271,7) inlined into fraggle_util.f90(306,12)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at fraggle_util.f90(274,7) inlined into fraggle_util.f90(306,12)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference com_offset(:) has aligned access
   remark #15388: vectorization support: reference mvec_frag(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 18.000 
   remark #15478: estimated potential speedup: 1.360 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at fraggle_util.f90(274,7) inlined into fraggle_util.f90(306,12)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at fraggle_util.f90(275,7) inlined into fraggle_util.f90(306,12)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at fraggle_util.f90(276,10) inlined into fraggle_util.f90(306,12)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference vb(:,i) has unaligned access
      remark #15389: vectorization support: reference vb(:,i) has unaligned access
      remark #15388: vectorization support: reference com_offset(:) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.810 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at fraggle_util.f90(308,7)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at fraggle_util.f90(309,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at fraggle_util.f90(309,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference vb(:,i) has aligned access
      remark #15388: vectorization support: reference vb(:,i) has aligned access
      remark #15389: vectorization support: reference v_t_unit(:,i) has unaligned access   [ fraggle_util.f90(309,32) ]
      remark #15389: vectorization support: reference vcom(:) has unaligned access   [ fraggle_util.f90(309,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.386
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 3.500 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at fraggle_util.f90(309,10)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference vb(:,i) has unaligned access
      remark #15389: vectorization support: reference vb(:,i) has unaligned access
      remark #15389: vectorization support: reference v_t_unit(:,i) has unaligned access   [ fraggle_util.f90(309,32) ]
      remark #15389: vectorization support: reference vcom(:) has unaligned access   [ fraggle_util.f90(309,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.643
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 3.500 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at fraggle_util.f90(309,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

fraggle_util.f90(272,10):remark #34030: adjacent sparse (strided) loads optimized for speed. Details: stride { unknown }, types { F64-V256, F64-V256, F64-V256 }, number of elements { 4 }, select mask { 0x000000007 }.
fraggle_util.f90(283,4):remark #34051: REGISTER ALLOCATION : [_fraggle_classes_mp_fraggle_util_vmag_to_vb_] fraggle_util.f90:283

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     282
            Global    :     105
            Local     :     177
        Regenerable   :      10
        Spilled       :      14
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      10 [4.30e-01 ~ 0.4%]
            Writes    :      10 [2.98e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

<2> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.


Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.2.0 Build 20210228_000000

Compiler options: -I/Users/daminton/git/swiftest/include -I/usr/local/Cellar/netcdf/4.8.0_2/include -init=snan,arrays -no-wrap-margin -O3 -fp-model strict -fp-model no-except -prec-div -prec-sqrt -assume protect-parens -qopenmp -simd -xhost -align all -assume contiguous_assumed_shape -vecabi=cmdtarget -prec-div -prec-sqrt -assume protect-parens -heap-arrays 1048576 -qopt-report=5 -g -traceback -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: _swiftest_classes.s_tides_step_spin._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (_swiftest_classes.s_tides_step_spin._) [1/5=20.0%] tides_spin_step.f90(1,29)


    Report from: Code generation optimizations [cg]

tides_spin_step.f90(1,29):remark #34051: REGISTER ALLOCATION : [_swiftest_classes.s_tides_step_spin._] tides_spin_step.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SWIFTEST_CLASSES@S_TIDES_STEP_SPIN::TIDES_STEP_SPIN_SYSTEM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SWIFTEST_CLASSES@S_TIDES_STEP_SPIN::TIDES_STEP_SPIN_SYSTEM) [2/5=40.0%] tides_spin_step.f90(33,22)
  -> EXTERN: (50,10) _for_check_mult_overflow64
  -> EXTERN: (50,10) _for_alloc_and_init
  -> EXTERN: (51,10) _for_deallocate
  -> EXTERN: (51,10) _for_deallocate
  -> EXTERN: (51,10) _for_deallocate
  -> EXTERN: (51,10) _for_realloc_lhs
  -> EXTERN: (51,10) _for_allocate
  -> EXTERN: (51,10) __resetsp_inlined
  -> EXTERN: (51,10) _for_allocate
  -> EXTERN: (51,10) _for_allocate
  -> EXTERN: (51,10) __getsp_inlined
  -> EXTERN: (51,18) _alloca
  -> EXTERN: (51,18) _alloca
  -> EXTERN: (61,4) _for_dealloc_allocatable
  -> EXTERN: (61,4) _for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at tides_spin_step.f90(51,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tides_spin_step.f90(51,10)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at tides_spin_step.f90(51,10)
         remark #15389: vectorization support: reference at (51:18) has unaligned access   [ tides_spin_step.f90(51,18) ]
         remark #15389: vectorization support: reference PL(:,:) has unaligned access   [ tides_spin_step.f90(51,18) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at tides_spin_step.f90(51,10)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at tides_spin_step.f90(51,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tides_spin_step.f90(51,10)
      remark #15389: vectorization support: reference at (51:18) has unaligned access   [ tides_spin_step.f90(51,18) ]
      remark #15389: vectorization support: reference at (51:18) has unaligned access   [ tides_spin_step.f90(51,18) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at tides_spin_step.f90(51,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at tides_spin_step.f90(51,18)
   remark #15388: vectorization support: reference at (51:48) has aligned access   [ tides_spin_step.f90(51,48) ]
   remark #15389: vectorization support: reference CB%ROT(:) has unaligned access   [ tides_spin_step.f90(51,48) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.090 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at tides_spin_step.f90(51,18)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at tides_spin_step.f90(51,18)
   remark #15388: vectorization support: reference at (51:48) has aligned access   [ tides_spin_step.f90(51,48) ]
   remark #15388: vectorization support: reference at (51:48) has aligned access   [ tides_spin_step.f90(51,48) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at tides_spin_step.f90(51,18)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at tides_spin_step.f90(51,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tides_spin_step.f90(51,10)
      remark #15389: vectorization support: reference at (51:10) has unaligned access
      remark #15389: vectorization support: reference at (51:10) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.538
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.620 
      remark #15478: estimated potential speedup: 1.500 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at tides_spin_step.f90(51,10)
   <Remainder loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at tides_spin_step.f90(51,10)
   remark #15389: vectorization support: reference at (51:10) has unaligned access
   remark #15388: vectorization support: reference at (51:10) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at tides_spin_step.f90(51,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tides_spin_step.f90(51,10)
      remark #15389: vectorization support: reference ROT0(:) has unaligned access
      remark #15389: vectorization support: reference at (51:10) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at tides_spin_step.f90(51,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

tides_spin_step.f90(44,58):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
tides_spin_step.f90(44,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
tides_spin_step.f90(49,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
tides_spin_step.f90(49,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
tides_spin_step.f90(49,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 32 (and use __assume_aligned) to increase the width of loads
tides_spin_step.f90(49,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (32, 0)
tides_spin_step.f90(51,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(51,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(51,10):remark #34026: call to memcpy implemented as a call to optimized library version
tides_spin_step.f90(51,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(51,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(51,10):remark #34026: call to memcpy implemented as a call to optimized library version
tides_spin_step.f90(51,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(51,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(51,10):remark #34026: call to memcpy implemented as a call to optimized library version
tides_spin_step.f90(51,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(51,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(51,10):remark #34026: call to memcpy implemented as a call to optimized library version
tides_spin_step.f90(33,22):remark #34051: REGISTER ALLOCATION : [_swiftest_classes_mp_tides_step_spin_system_] tides_spin_step.f90:33

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     319
            Global    :      56
            Local     :     263
        Regenerable   :      40
        Spilled       :      15
        
    Routine stack
        Variables     :     696 bytes*
            Reads     :      25 [1.73e+00 ~ 1.7%]
            Writes    :      62 [5.00e+00 ~ 5.0%]
        Spills        :      88 bytes*
            Reads     :      24 [3.51e+00 ~ 3.5%]
            Writes    :      11 [9.41e-01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SWIFTEST_CLASSES@S_TIDES_STEP_SPIN::TIDES_SPIN_DERIVS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SWIFTEST_CLASSES@S_TIDES_STEP_SPIN::TIDES_SPIN_DERIVS) [3/5=60.0%] tides_spin_step.f90(64,13)
  -> EXTERN: (64,13) _for_array_initialize
  -> EXTERN: (64,13) _for_array_initialize
  -> EXTERN: (64,13) _for_array_initialize
  -> EXTERN: (64,13) _for_array_initialize
  -> EXTERN: (64,13) _for_array_initialize
  -> EXTERN: (64,68) _for_deallocate
  -> EXTERN: (84,28) _for_dealloc_allocatable
  -> EXTERN: (85,7) _for_alloc_and_init
  -> EXTERN: (96,4) _for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at tides_spin_step.f90(86,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tides_spin_step.f90(86,7)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at tides_spin_step.f90(86,7)
         remark #15389: vectorization support: reference drot(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 1.250 
         remark #15478: estimated potential speedup: 1.440 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at tides_spin_step.f90(86,7)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at tides_spin_step.f90(87,7)
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xbeg(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xend(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,37) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xbeg(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,37) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xbeg(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xend(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,37) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xbeg(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,37) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xbeg(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xend(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,37) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xbeg(:,i)>, stride is unknown to compiler   [ tides_spin_step.f90(88,37) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 9 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 111 
   remark #15477: vector cost: 22.500 
   remark #15478: estimated potential speedup: 4.920 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at tides_spin_step.f90(88,10)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at tides_spin_step.f90(87,7)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

tides_spin_step.f90(88,10):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { unknown }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
tides_spin_step.f90(88,37):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { unknown }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
tides_spin_step.f90(88,37):remark #34069: adjacent sparse (strided) loads seem unprofitable to optimize. Details: stride { unknown }, types { F64-V128, F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000007 }.
tides_spin_step.f90(77,51):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
tides_spin_step.f90(86,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(86,7):remark #34026: call to memset implemented as a call to optimized library version
tides_spin_step.f90(64,13):remark #34051: REGISTER ALLOCATION : [_swiftest_classes.s_tides_step_spin_mp_tides_spin_derivs_] tides_spin_step.f90:64

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     261
            Global    :      51
            Local     :     210
        Regenerable   :      48
        Spilled       :      12
        
    Routine stack
        Variables     :     192 bytes*
            Reads     :       2 [1.09e-01 ~ 0.1%]
            Writes    :      11 [9.39e-01 ~ 0.9%]
        Spills        :      56 bytes*
            Reads     :      10 [5.98e-01 ~ 0.6%]
            Writes    :       7 [6.02e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SWIFTEST_CLASSES@S_TIDES_STEP_SPIN::TIDES_DERIVS_EVAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SWIFTEST_CLASSES@S_TIDES_STEP_SPIN::TIDES_DERIVS_EVAL) [4/5=80.0%] tides_spin_step.f90(98,13)
  -> EXTERN: (98,50) _for_deallocate
  -> EXTERN: (107,10) _for_allocate
  -> EXTERN: (107,10) _for_realloc_lhs
  -> EXTERN: (107,10) _for_deallocate
  -> EXTERN: (107,10) _for_dealloc_allocatable
  -> INDIRECT-: (107,14)  (_swiftest_classes.s_tides_step_spin_mp_tides_derivs_eval_$SELF_V$5c06.0.4->QNCAtemplate.dim31_dv_template.addr_a0_V$5c1c.0.4)->SWIFTEST_CLASSES@S_TIDES_STEP_SPIN$.btTIDES_DERIVS_FUNC$LAMBDAPTR_TIDES_DERIV_V$137c
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (109,21) _for_error_stop_quiet


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at tides_spin_step.f90(107,10)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at tides_spin_step.f90(107,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15389: vectorization support: reference at (107:10) has unaligned access
   remark #15389: vectorization support: reference at (107:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 3.690 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at tides_spin_step.f90(107,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at tides_spin_step.f90(107,10)
<Peeled loop for vectorization, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at tides_spin_step.f90(107,10)
<Multiversioned v2>
   remark #15389: vectorization support: reference at (107:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (107:10)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at tides_spin_step.f90(107,10)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at tides_spin_step.f90(107,10)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tides_spin_step.f90(107,10)
      remark #15389: vectorization support: reference y(:) has unaligned access
      remark #15389: vectorization support: reference at (107:10) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.000 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at tides_spin_step.f90(107,10)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

tides_spin_step.f90(107,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(107,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(107,10):remark #34026: call to memcpy implemented as a call to optimized library version
tides_spin_step.f90(98,13):remark #34051: REGISTER ALLOCATION : [_swiftest_classes.s_tides_step_spin_mp_tides_derivs_eval_] tides_spin_step.f90:98

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     159
            Global    :      37
            Local     :     122
        Regenerable   :      29
        Spilled       :       6
        
    Routine stack
        Variables     :     408 bytes*
            Reads     :      12 [2.62e+00 ~ 2.6%]
            Writes    :      40 [1.02e+01 ~ 10.2%]
        Spills        :       8 bytes*
            Reads     :       1 [1.33e-02 ~ 0.0%]
            Writes    :       1 [1.33e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SWIFTEST_CLASSES@S_TIDES_STEP_SPIN::TIDES_DERIVS_INIT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SWIFTEST_CLASSES@S_TIDES_STEP_SPIN::TIDES_DERIVS_INIT) [5/5=100.0%] tides_spin_step.f90(115,13)
  -> EXTERN: (126,7) _for_alloc_and_init
  -> EXTERN: (127,7) _for_alloc_and_init


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at tides_spin_step.f90(126,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tides_spin_step.f90(126,7)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at tides_spin_step.f90(126,7)
         remark #15389: vectorization support: reference f(:,:) has unaligned access
         remark #15389: vectorization support: reference xbeg(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at tides_spin_step.f90(126,7)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at tides_spin_step.f90(127,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at tides_spin_step.f90(127,7)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at tides_spin_step.f90(127,7)
         remark #15389: vectorization support: reference f(:,:) has unaligned access
         remark #15389: vectorization support: reference xend(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at tides_spin_step.f90(127,7)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

tides_spin_step.f90(115,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 32 (and use __assume_aligned) to increase the width of stores
tides_spin_step.f90(115,13):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
tides_spin_step.f90(126,7):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(126,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(126,7):remark #34026: call to memcpy implemented as a call to optimized library version
tides_spin_step.f90(127,7):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(127,7):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
tides_spin_step.f90(127,7):remark #34026: call to memcpy implemented as a call to optimized library version
tides_spin_step.f90(115,13):remark #34051: REGISTER ALLOCATION : [_swiftest_classes.s_tides_step_spin_mp_tides_derivs_init_] tides_spin_step.f90:115

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     141
            Global    :      42
            Local     :      99
        Regenerable   :      16
        Spilled       :      15
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      19 [3.07e+00 ~ 3.1%]
            Writes    :      12 [9.92e-01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.


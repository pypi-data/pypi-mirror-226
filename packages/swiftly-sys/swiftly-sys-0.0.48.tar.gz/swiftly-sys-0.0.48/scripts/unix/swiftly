#!/bin/bash

source swiftly-utils.sh

# Define functions for each command
activate() {
    if ! is_sourced; then
        echo -e "run this command as 'source swiftly activate'"
        exit 1  # If sourced, use 'return'. If run as a script, use 'exit'.
    fi

    # Check if the project is already activated
    if [[ "$SWIFTLY_ACTIVATED" == "true" ]]; then
        echo "Swiftly project already activated."
        return
    fi

    # Run check_swiftly from swiftly.core.main.py
    python3 -c "from swiftly.core.main import check_swiftly; check_swiftly()"
    result=$(read_cli_result)

    # Handle the result
    case $result in
        "init")
            init  # Assuming you have an init function defined elsewhere in your script
            return 0  # Exit after initialization
            ;;
        "exit")
            return 0
            ;;
        "continue")
            # Continue with the rest of the script
            ;;
        *)
            echo "Unexpected result from check_swiftly: $result"
            return 1
            ;;
    esac

    # update swiftly
    python3 -c "from swiftly.core.main import update_swiftly; update_swiftly()"

    # get swiftly project name
    project_name=$(python3 -c "from swiftly.utils.get import get_name; print(get_name())")
    export SWIFTLY_PROJECT_NAME="$project_name"
    export SWIFTLY_PROJECT_LOCATION="$(pwd)"

    # Modify the shell prompt
    export OLD_PS1="$PS1"  # Store the current PS1 value

    # git pull
    python3 -c "from swiftly.utils.git import git_pull; git_pull()"

    # get swiftly project runtime
    runtime=$(python3 -c "from swiftly.utils.get import get_runtime; print(get_runtime())")

    # Source the appropriate script and run the activate function
    source "swiftly-${runtime}.sh"
    "activate_${runtime}"  # This will call a function like activate_python, activate_node, etc. based on the runtime

    PS1="(swiftly ${SWIFTLY_PROJECT_NAME}) $OLD_PS1"
    export SWIFTLY_ACTIVATED=true
}

deactivate() {
    if ! is_sourced; then
        echo -e "run this command as 'source swiftly deactivate'"
        exit 1  # If sourced, use 'return'. If run as a script, use 'exit'.
    fi

    # Check if the project is not activated
    if [[ "$SWIFTLY_ACTIVATED" != "true" ]]; then
        echo "Swiftly project is not activated."
        return
    fi

    # Get the runtime
    runtime=$(python3 -c "from swiftly.utils.get import get_runtime; print(get_runtime())")

    # Source the appropriate script and run the deactivate function
    source "swiftly-${runtime}.sh"
    "deactivate_${runtime}"  # This will call a function like deactivate_python, deactivate_node, etc. based on the runtime

    # Restore the original PS1 value
    PS1="$OLD_PS1"
    unset OLD_PS1

    # Unset the SWIFTLY_ACTIVATED variable
    unset SWIFTLY_ACTIVATED

    # Unset SWIFTLY specific variables
    unset SWIFTLY_PROJECT_NAME
    unset SWIFTLY_PROJECT_LOCATION

    # Unset functions
    unset -f activate
    unset -f init
    unset -f makeapp
    unset -f run
    unset -f install
    unset -f uninstall
    unset -f add_framework
    unset -f custom
}


init() {
    # should be source
    if ! is_sourced; then
        echo -e "run this command as 'source swiftly init'"
        exit 1  # If sourced, use 'return'. If run as a script, use 'exit'.
    fi

    git_project=$(python3 -c "from swiftly.utils.check import is_git_url; print(is_git_url('$1'))")
    git_project_name=$(python3 -c "from swiftly.core.main import get_git_name; print(get_git_name('$1'))")

    if [[ "$git_project" == "True" ]]; then
        git clone "$@"
        cd $git_project_name
        return
    fi

    # Run check_swiftly from swiftly.core.main.py
    python3 -c "from swiftly.core.main import check_swiftly; check_swiftly()"
    result=$(read_cli_result)

    # Handle the result
    case $result in
        "init")
            ;;
        "exit")
            return 0
            ;;
        "continue")
            activate
            echo "You can use 'source swiftly activate' to activate an exiting swiftly project ðŸ˜Ž"
            return 0
            ;;
        *)
            echo "Unexpected result from check_swiftly: $result"
            return 1
            ;;
    esac



    # sets the project_name if parsed in the function
    local project_name="$1"

    # checks if the project_name is empty or not and executes accordingly
    if [[ -z "$project_name" ]]; then
        python3 -c "from swiftly.core.main import init; init()"
    else
        python3 -c "from swiftly.core.main import init; init('$project_name')"
    fi

}

makeapp() {
    if [[ "$SWIFTLY_ACTIVATED" != "true" ]]; then
        echo "No swiftly project activated ðŸ«¢"
        return 1
    fi

    # Check if an app name has been provided
    local app_name="$1"

    # Run makeapp from swiftly.core.main.py and pass appname as a parameter
    if [[ -z "$app_name" ]]; then
        python3 -c "from swiftly.core.main import makeapp; makeapp()"
    else
        python3 -c "from swiftly.core.main import makeapp; makeapp('$app_name')"
    fi

    execution_list=$(read_cli_result) # it's a list of makeapp to execute as a string like python,python-django,python-tensorflow
    
    # Convert the comma-separated string into an array
    IFS=',' read -ra execute_array <<< "$execution_list"

    # Iterate through the execution list
    for execute in "${execute_array[@]}"; do
        # Source the appropriate shell script
        source "swiftly-${execute}.sh"

        # Replace '-' with '_' and call the appropriate function
        makeapp_function_name="makeapp_${execute//-/_}"
        $makeapp_function_name
    done
}



run() {
    if [[ "$SWIFTLY_ACTIVATED" != "true" ]]; then
        echo "No swiftly project activated ðŸ«¢"
        return 1
    fi

    # Check if an app name has been provided
    local app_name="$1"

    # Run run() from swiftly.core.main.py and pass app_name as a parameter if available
    if [[ -z "$app_name" ]]; then
        python3 -c "from swiftly.core.main import run; run()"
    else
        python3 -c "from swiftly.core.main import run; run('$app_name')"
    fi

    execute=$(read_cli_result)

    if [[ "$execute" == "exit" ]]; then
        echo "What you tryna run bro! ðŸ¤”"
        return 1
    fi

    source "swiftly-${execute}.sh"

    # Replace '-' with '_' and call the appropriate function
    run_function_name="run_${execute//-/_}"
    $run_function_name
}

install() {
    echo "Running install function"
    # Add your complex install command here
}

uninstall() {
    echo "Running uninstall function"
    # Add your complex uninstall command here
}

add_framework() {
    echo "Running add-framework function"
    # Add your complex add-framework command here
}

# Function to handle custom commands
custom() {
    echo "Running custom function with arguments: $@"
    # Add your custom command handling logic here
}

# Check if a function exists and call it, otherwise call the custom function
if declare -f "$1" > /dev/null; then
    "$@"
else
    # Check if there's more than one argument
    if [ $# -gt 1 ]; then
        custom "${@:2}"  # Pass all arguments except the first one to custom
    fi
fi


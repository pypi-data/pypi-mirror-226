"""
    Lookup/Ibis web service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from identitylib.lookup_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from identitylib.lookup_client.exceptions import ApiAttributeError


def lazy_import():
    from identitylib.lookup_client.model.group_members_of_inst import GroupMembersOfInst
    from identitylib.lookup_client.model.institution import Institution
    from identitylib.lookup_client.model.person import Person
    globals()['GroupMembersOfInst'] = GroupMembersOfInst
    globals()['Institution'] = Institution
    globals()['Person'] = Person


class Group(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'cancelled': (bool,),  # noqa: E501
            'groupid': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'title': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'email': (str,),  # noqa: E501
            'members_of_inst': (GroupMembersOfInst,),  # noqa: E501
            'members': ([Person],),  # noqa: E501
            'direct_members': ([Person],),  # noqa: E501
            'owning_insts': ([Institution],),  # noqa: E501
            'manages_insts': ([Institution],),  # noqa: E501
            'manages_groups': ([Group],),  # noqa: E501
            'managed_by_groups': ([Group],),  # noqa: E501
            'reads_groups': ([Group],),  # noqa: E501
            'read_by_groups': ([Group],),  # noqa: E501
            'includes_groups': ([Group],),  # noqa: E501
            'included_by_groups': ([Group],),  # noqa: E501
            'id': (str,),  # noqa: E501
            'ref': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'cancelled': 'cancelled',  # noqa: E501
        'groupid': 'groupid',  # noqa: E501
        'name': 'name',  # noqa: E501
        'title': 'title',  # noqa: E501
        'description': 'description',  # noqa: E501
        'email': 'email',  # noqa: E501
        'members_of_inst': 'membersOfInst',  # noqa: E501
        'members': 'members',  # noqa: E501
        'direct_members': 'directMembers',  # noqa: E501
        'owning_insts': 'owningInsts',  # noqa: E501
        'manages_insts': 'managesInsts',  # noqa: E501
        'manages_groups': 'managesGroups',  # noqa: E501
        'managed_by_groups': 'managedByGroups',  # noqa: E501
        'reads_groups': 'readsGroups',  # noqa: E501
        'read_by_groups': 'readByGroups',  # noqa: E501
        'includes_groups': 'includesGroups',  # noqa: E501
        'included_by_groups': 'includedByGroups',  # noqa: E501
        'id': 'id',  # noqa: E501
        'ref': 'ref',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Group - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            cancelled (bool): Flag indicating if the group is cancelled.. [optional]  # noqa: E501
            groupid (str): The group's numeric ID (actually a string e.g., \"100656\").. [optional]  # noqa: E501
            name (str): The group's unique name (e.g., \"cs-editors\").. [optional]  # noqa: E501
            title (str): The group's title.. [optional]  # noqa: E501
            description (str): The more detailed description of the group.. [optional]  # noqa: E501
            email (str): The group's email address.. [optional]  # noqa: E501
            members_of_inst (GroupMembersOfInst): [optional]  # noqa: E501
            members ([Person]): A list of the group's members, including (recursively) any members of any included groups. This will only be populated if the `fetch` parameter includes the `\"all_members\"` option.. [optional]  # noqa: E501
            direct_members ([Person]): A list of the group's direct members, not including any members included via groups included by this group. This will only be populated if the `fetch` parameter includes the `\"direct_members\"` option.. [optional]  # noqa: E501
            owning_insts ([Institution]): A list of the institutions to which this group belongs. This will only be populated if the `fetch` parameter includes the `\"owning_insts\"` option.. [optional]  # noqa: E501
            manages_insts ([Institution]): A list of the institutions managed by this group. This will only be populated if the `fetch` parameter includes the `\"manages_insts\"` option.. [optional]  # noqa: E501
            manages_groups ([Group]): A list of the groups managed by this group. This will only be populated if the `fetch` parameter includes the `\"manages_groups\"` option.. [optional]  # noqa: E501
            managed_by_groups ([Group]): A list of the groups that manage this group. This will only be populated if the `fetch` parameter includes the `\"managed_by_groups\"` option.. [optional]  # noqa: E501
            reads_groups ([Group]): A list of the groups that this group has privileged access to. Members of this group will be able to read the members of any of those groups, regardless of the membership visibilities. This will only be populated if the `fetch` parameter includes the `\"reads_groups\"` option.. [optional]  # noqa: E501
            read_by_groups ([Group]): A list of the groups that have privileged access to this group. Members of those groups will be able to read the members of this group, regardless of the membership visibilities. This will only be populated if the `fetch` parameter includes the `\"read_by_groups\"` option.. [optional]  # noqa: E501
            includes_groups ([Group]): A list of the groups directly included in this group. Any members of the included groups (and recursively any groups that they include) will automatically be included in this group. This will only be populated if the `fetch` parameter includes the `\"includes_groups\"` option.. [optional]  # noqa: E501
            included_by_groups ([Group]): A list of the groups that directly include this group. Any members of this group will automatically be included in those groups (and recursively in any groups that include those groups). This will only be populated if the `fetch` parameter includes the `\"included_by_groups\"` option.. [optional]  # noqa: E501
            id (str): An ID that can uniquely identify this group within the returned XML/JSON document. This is only used in the flattened XML/JSON representation (if the \"flatten\" parameter is specified).. [optional]  # noqa: E501
            ref (str): A reference (by id) to a group element in the XML/JSON document. This is only used in the flattened XML/JSON representation (if the \"flatten\" parameter is specified).. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Group - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            cancelled (bool): Flag indicating if the group is cancelled.. [optional]  # noqa: E501
            groupid (str): The group's numeric ID (actually a string e.g., \"100656\").. [optional]  # noqa: E501
            name (str): The group's unique name (e.g., \"cs-editors\").. [optional]  # noqa: E501
            title (str): The group's title.. [optional]  # noqa: E501
            description (str): The more detailed description of the group.. [optional]  # noqa: E501
            email (str): The group's email address.. [optional]  # noqa: E501
            members_of_inst (GroupMembersOfInst): [optional]  # noqa: E501
            members ([Person]): A list of the group's members, including (recursively) any members of any included groups. This will only be populated if the `fetch` parameter includes the `\"all_members\"` option.. [optional]  # noqa: E501
            direct_members ([Person]): A list of the group's direct members, not including any members included via groups included by this group. This will only be populated if the `fetch` parameter includes the `\"direct_members\"` option.. [optional]  # noqa: E501
            owning_insts ([Institution]): A list of the institutions to which this group belongs. This will only be populated if the `fetch` parameter includes the `\"owning_insts\"` option.. [optional]  # noqa: E501
            manages_insts ([Institution]): A list of the institutions managed by this group. This will only be populated if the `fetch` parameter includes the `\"manages_insts\"` option.. [optional]  # noqa: E501
            manages_groups ([Group]): A list of the groups managed by this group. This will only be populated if the `fetch` parameter includes the `\"manages_groups\"` option.. [optional]  # noqa: E501
            managed_by_groups ([Group]): A list of the groups that manage this group. This will only be populated if the `fetch` parameter includes the `\"managed_by_groups\"` option.. [optional]  # noqa: E501
            reads_groups ([Group]): A list of the groups that this group has privileged access to. Members of this group will be able to read the members of any of those groups, regardless of the membership visibilities. This will only be populated if the `fetch` parameter includes the `\"reads_groups\"` option.. [optional]  # noqa: E501
            read_by_groups ([Group]): A list of the groups that have privileged access to this group. Members of those groups will be able to read the members of this group, regardless of the membership visibilities. This will only be populated if the `fetch` parameter includes the `\"read_by_groups\"` option.. [optional]  # noqa: E501
            includes_groups ([Group]): A list of the groups directly included in this group. Any members of the included groups (and recursively any groups that they include) will automatically be included in this group. This will only be populated if the `fetch` parameter includes the `\"includes_groups\"` option.. [optional]  # noqa: E501
            included_by_groups ([Group]): A list of the groups that directly include this group. Any members of this group will automatically be included in those groups (and recursively in any groups that include those groups). This will only be populated if the `fetch` parameter includes the `\"included_by_groups\"` option.. [optional]  # noqa: E501
            id (str): An ID that can uniquely identify this group within the returned XML/JSON document. This is only used in the flattened XML/JSON representation (if the \"flatten\" parameter is specified).. [optional]  # noqa: E501
            ref (str): A reference (by id) to a group element in the XML/JSON document. This is only used in the flattened XML/JSON representation (if the \"flatten\" parameter is specified).. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

Index: switcore/ui/search_select.py
===================================================================
diff --git a/switcore/ui/search_select.py b/switcore/ui/search_select.py
deleted file mode 100644
--- a/switcore/ui/search_select.py	(revision 614d8dbd9794f7a1002cb6ee99e85e11579f565f)
+++ /dev/null	(revision 614d8dbd9794f7a1002cb6ee99e85e11579f565f)
@@ -1,12 +0,0 @@
-# from pydantic import BaseModel
-#
-#
-#
-#
-# class SearchSelect(BaseModel):
-#     type: str = 'search_select'
-#     placeholder: str | None
-#     multiselect: bool = False
-#     # trigger_on_input: bool
-#     value: list[str] | None
-#     options: list[Option] = []
Index: switcore/ui/select.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pydantic import BaseModel\n\nfrom switcore.ui.element_components import StaticAction\n\n\nclass Option(BaseModel):\n    label: str\n    action_id: str\n    static_action: StaticAction | None = None\n\n\nclass Style(BaseModel):\n    variant: str | None\n\n\nclass Select(BaseModel):\n    type: str = 'select'\n    placeholder: str | None\n    multiselect: bool = False\n    trigger_on_input: bool\n    value: list[str] | None\n    options: list[Option] = []\n    style: Style | None = None\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/switcore/ui/select.py b/switcore/ui/select.py
--- a/switcore/ui/select.py	(revision 614d8dbd9794f7a1002cb6ee99e85e11579f565f)
+++ b/switcore/ui/select.py	(date 1692149888297)
@@ -1,16 +1,30 @@
+from enum import Enum
+
 from pydantic import BaseModel
 
-from switcore.ui.element_components import StaticAction
+from switcore.ui.element_components import Tag
+from switcore.ui.image import Image
+from switcore.ui.select_item import SelectItem
+
 
+class Option(SelectItem):
+    image: Image | None = None
+    tag: Tag | None = None
 
-class Option(BaseModel):
+
+class OptionGroup(BaseModel):
     label: str
-    action_id: str
-    static_action: StaticAction | None = None
+    options: list[Option]
+
+
+class SelectStyleTypes(str, Enum):
+    filled = "filled"
+    outlined = "outlined"
+    ghost = "ghost"
 
 
 class Style(BaseModel):
-    variant: str | None
+    variant: SelectStyleTypes = SelectStyleTypes.outlined
 
 
 class Select(BaseModel):
@@ -20,4 +34,8 @@
     trigger_on_input: bool
     value: list[str] | None
     options: list[Option] = []
+    option_groups: list[OptionGroup] = []
     style: Style | None = None
+    searchable: bool = True
+    search_keyword: str | None = None
+    search_keyword_placeholder: str | None = None
Index: tests/ui/test_select.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\nimport unittest\n\nfrom switcore.ui.element_components import OpenLink\nfrom switcore.ui.select import Select, Option\n\n\nclass SelectTest(unittest.TestCase):\n\n    def test_valid_select01(self):\n        select = Select(\n            trigger_on_input=True,\n            options=[\n                Option(\n                    label=\"test label1\",\n                    action_id=\"action_id1\"\n                ),\n                Option(\n                    label=\"test label2\",\n                    action_id=\"action_id2\"\n                ),\n            ]\n        )\n        expected = {\n            'type': 'select',\n            'multiselect': False,\n            'trigger_on_input': True,\n            'options': [\n                {\n                    'label': 'test label1',\n                    'action_id': 'action_id1'\n                },\n                {\n                    'label': 'test label2',\n                    'action_id': 'action_id2'\n                }\n            ]\n        }\n        # print(json.dumps(expected, indent=4))\n        self.assertEqual(expected, select.dict(exclude_none=True))\n\n    def test_valid_select02(self):\n        select = Select(\n            trigger_on_input=True,\n            options=[\n                Option(\n                    label=\"test label1\",\n                    action_id=\"action_id1\",\n                    static_action=OpenLink(\n                        link_url=\"https://www.google.com\"\n                    )\n                ),\n                Option(\n                    label=\"test label2\",\n                    action_id=\"action_id2\"\n                ),\n            ]\n        )\n        expected = {'multiselect': False,\n                    'options': [{'action_id': 'action_id1',\n                                 'label': 'test label1',\n                                 'static_action': {'link_url': 'https://www.google.com',\n                                                   'action_type': 'open_link'}},\n                                {'action_id': 'action_id2', 'label': 'test label2'}],\n                    'trigger_on_input': True,\n                    'type': 'select'}\n        print(json.dumps(expected, indent=4))\n        self.assertEqual(expected, select.dict(exclude_none=True))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/ui/test_select.py b/tests/ui/test_select.py
--- a/tests/ui/test_select.py	(revision 614d8dbd9794f7a1002cb6ee99e85e11579f565f)
+++ b/tests/ui/test_select.py	(date 1692147701141)
@@ -2,7 +2,7 @@
 import unittest
 
 from switcore.ui.element_components import OpenLink
-from switcore.ui.select import Select, Option
+from switcore.ui.select import Select, Option, OptionGroup
 
 
 class SelectTest(unittest.TestCase):
@@ -23,6 +23,7 @@
         )
         expected = {
             'type': 'select',
+            'searchable': True,
             'multiselect': False,
             'trigger_on_input': True,
             'options': [
@@ -34,7 +35,8 @@
                     'label': 'test label2',
                     'action_id': 'action_id2'
                 }
-            ]
+            ],
+            'option_groups': []
         }
         # print(json.dumps(expected, indent=4))
         self.assertEqual(expected, select.dict(exclude_none=True))
@@ -56,13 +58,61 @@
                 ),
             ]
         )
-        expected = {'multiselect': False,
-                    'options': [{'action_id': 'action_id1',
-                                 'label': 'test label1',
-                                 'static_action': {'link_url': 'https://www.google.com',
-                                                   'action_type': 'open_link'}},
-                                {'action_id': 'action_id2', 'label': 'test label2'}],
-                    'trigger_on_input': True,
-                    'type': 'select'}
+        expected = {
+            'type': 'select',
+            'searchable': True,
+            'multiselect': False,
+            'options': [{'action_id': 'action_id1',
+                         'label': 'test label1',
+                         'static_action': {'link_url': 'https://www.google.com',
+                                           'action_type': 'open_link'}},
+                        {'action_id': 'action_id2', 'label': 'test label2'}],
+            'option_groups': [],
+            'trigger_on_input': True,
+        }
         print(json.dumps(expected, indent=4))
         self.assertEqual(expected, select.dict(exclude_none=True))
+
+    def test_valid_select03(self):
+        select = Select(
+            trigger_on_input=True,
+            options=[
+                Option(
+                    label="test label1",
+                    action_id="action_id1",
+                    static_action=OpenLink(
+                        link_url="https://www.google.com"
+                    )
+                ),
+                Option(
+                    label="test label2",
+                    action_id="action_id2"
+                ),
+            ],
+            option_groups=[
+                OptionGroup(label="test group1", options=[Option(label="test label1", action_id="action_id1")]),
+                OptionGroup(label="test group2", options=[Option(label="test label2", action_id="action_id2")]),
+            ],
+            searchable=True,
+            search_keyword="search_keyword",
+            search_keyword_placeholder="search_keyword_placeholder",
+        )
+
+        expected: dict = {
+            'type': 'select',
+            'searchable': True,
+            'multiselect': False,
+            'options': [{'action_id': 'action_id1',
+                         'label': 'test label1',
+                         'static_action': {'link_url': 'https://www.google.com',
+                                           'action_type': 'open_link'}},
+                        {'action_id': 'action_id2', 'label': 'test label2'}],
+            'option_groups': [{'label': 'test group1',
+                               'options': [{'action_id': 'action_id1', 'label': 'test label1'}]},
+                              {'label': 'test group2',
+                               'options': [{'action_id': 'action_id2', 'label': 'test label2'}]}],
+            'search_keyword': 'search_keyword',
+            'search_keyword_placeholder': 'search_keyword_placeholder',
+            'trigger_on_input': True,
+        }
+        self.assertEqual(expected, select.dict(exclude_none=True))
Index: pyproject.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[project]\nname = \"swit-core\"\nversion = \"0.0.4\"\nauthors = [\n    { name = \"ur-team\", email = \"developers@swit.io\" },\n]\ndescription = \"this is a switbuilder core package\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n]\ndependencies = [\n    'pydantic >= 1.10.9',\n    'httpx >=0.24.1',\n    'httpx-oauth >=0.11.2',\n    'fastapi >=0.83.0',\n    'SQLAlchemy >=1.4.41',\n    'PyMySQL >=1.1.0',\n]\n\n\n[project.urls]\n\"Homepage\" = \"https://github.com/pypa/sampleproject\"\n\"Bug Tracker\" = \"https://github.com/pypa/sampleproject/issues\"\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pyproject.toml b/pyproject.toml
--- a/pyproject.toml	(revision 614d8dbd9794f7a1002cb6ee99e85e11579f565f)
+++ b/pyproject.toml	(date 1691732514657)
@@ -1,6 +1,6 @@
 [project]
 name = "swit-core"
-version = "0.0.4"
+version = "0.0.10"
 authors = [
     { name = "ur-team", email = "developers@swit.io" },
 ]

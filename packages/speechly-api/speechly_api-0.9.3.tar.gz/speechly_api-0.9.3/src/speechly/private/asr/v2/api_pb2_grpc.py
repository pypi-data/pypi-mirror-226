# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from speechly.private.asr.v2 import api_pb2 as speechly_dot_private_dot_asr_dot_v2_dot_api__pb2


class ASRStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Transcribe = channel.stream_unary(
        '/speechly.private.asr.v2.ASR/Transcribe',
        request_serializer=speechly_dot_private_dot_asr_dot_v2_dot_api__pb2.TranscribeRequest.SerializeToString,
        response_deserializer=speechly_dot_private_dot_asr_dot_v2_dot_api__pb2.TranscribeResponse.FromString,
        )


class ASRServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Transcribe(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ASRServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Transcribe': grpc.stream_unary_rpc_method_handler(
          servicer.Transcribe,
          request_deserializer=speechly_dot_private_dot_asr_dot_v2_dot_api__pb2.TranscribeRequest.FromString,
          response_serializer=speechly_dot_private_dot_asr_dot_v2_dot_api__pb2.TranscribeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'speechly.private.asr.v2.ASR', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))

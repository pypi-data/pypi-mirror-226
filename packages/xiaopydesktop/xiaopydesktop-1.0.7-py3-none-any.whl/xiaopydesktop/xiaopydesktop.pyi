import threading
from typing import List
from win32com.client import DispatchEx as DispatchEx

class DmObject:
    def __init__(self) -> None: ...
    @classmethod
    def set_dll_path(cls, dm_reg_dll, dm_dll) -> None: ...
    def ex_reg(self): ...
    def get_project_path(self): ...
    def create(self): ...
    def enable_pic_cache(self, enable): ...
    def get_base_path(self): ...
    def get_dm_count(self): ...
    def get_id(self): ...
    def get_last_error(self): ...
    def get_path(self): ...
    def reg(self, code, ver_info): ...
    def reg_ex(self, code, ver_info, ip): ...
    def reg_ex_no_mac(self, code, ver_info, ip): ...
    def reg_no_mac(self, code, ver_info): ...
    def set_display_input(self, mode): ...
    def set_enum_window_delay(self, delay): ...
    def set_path(self, path): ...
    def set_show_error_msg(self, show): ...
    def speed_normal_graphic(self, enable): ...
    def ver(self): ...
    def client_to_screen(self, hwnd, x, y): ...
    def enum_process(self, name): ...
    def enum_window(self, parent, title, class_name, filter): ...
    def enum_window_by_process(self, process_name, title, class_name, filter): ...
    def enum_window_by_process_id(self, process_id, title, class_name, filter): ...
    def enum_window_super(self, spec1, flag1, type1, spec2, flag2, type2, sort): ...
    def find_window(self, class_name, title): ...
    def find_window_by_process(self, process_name, class_name, title): ...
    def find_window_by_process_id(self, process_id, class_name, title): ...
    def find_window_ex(self, parent, class_name, title): ...
    def find_window_super(self, spec1, flag1, type1, spec2, flag2, type2): ...
    def get_client_rect(self, hwnd): ...
    def get_client_size(self, hwnd): ...
    def get_foreground_focus(self): ...
    def get_foreground_window(self): ...
    def get_mouse_point_window(self): ...
    def get_point_window(self, x, y): ...
    def get_process_info(self, pid): ...
    def get_special_window(self, flag): ...
    def get_window(self, hwnd, flag): ...
    def get_window_class(self, hwnd): ...
    def get_window_process_id(self, hwnd): ...
    def get_window_process_path(self, hwnd): ...
    def get_window_rect(self, hwnd): ...
    def get_window_state(self, hwnd, flag): ...
    def get_window_thread_id(self, hwnd): ...
    def get_window_title(self, hwnd): ...
    def move_window(self, hwnd, x, y): ...
    def screen_to_client(self, hwnd, x, y): ...
    def send_paste(self, hwnd): ...
    def send_string(self, hwnd, msg): ...
    def send_string2(self, hwnd, msg): ...
    def send_string_ime(self, hwnd, msg): ...
    def set_client_size(self, hwnd, width, height): ...
    def set_window_size(self, hwnd, width, height): ...
    def set_window_state(self, hwnd, flag): ...
    def set_window_text(self, hwnd, title): ...
    def set_window_transparent(self, hwnd, v): ...
    def dm_guard(self, enable, g_type): ...
    def dm_guard_extract(self, dm_type, path): ...
    def dm_guard_load_custom(self, dm_type, path): ...
    def dm_guard_params(self, dm_type, param): ...
    def un_load_driver(self): ...
    def bind_window(self, hwnd, display, mouse, keypad, mode): ...
    def bind_window_ex(self, hwnd, display, mouse, keypad, public, mode): ...
    def down_cpu(self, rate): ...
    def enable_bind(self, en): ...
    def enable_fake_active(self, en): ...
    def enable_ime(self, en): ...
    def enable_keypad_msg(self, en): ...
    def enable_keypad_patch(self, en): ...
    def enable_keypad_sync(self, en): ...
    def enable_mouse_msg(self, en): ...
    def enable_mouse_sync(self, en): ...
    def enable_real_keypad(self, en): ...
    def enable_real_mouse(self, en, mouse_delay, mouse_step): ...
    def enable_speed_dx(self, en): ...
    def fource_un_bind_window(self, hwnd): ...
    def get_bind_window(self): ...
    def get_fps(self): ...
    def hack_speed(self, speed): ...
    def is_bind(self, hwnd): ...
    def lock_display(self, lock): ...
    def lock_input(self, lock): ...
    def lock_mouse_rect(self, x1, y1, x2, y2): ...
    def set_aero(self, en): ...
    def set_display_delay(self, t): ...
    def set_display_refresh_delay(self, t): ...
    def set_input_dm(self, dm): ...
    def switch_bind_window(self, hwnd): ...
    def un_bind_window(self): ...
    def enable_mouse_accuracy(self, en): ...
    def get_cursor_pos(self): ...
    def get_cursor_shape(self): ...
    def get_cursor_shape_ex(self, type): ...
    def get_cursor_spot(self): ...
    def get_key_state(self, vk): ...
    def get_mouse_speed(self): ...
    def key_down(self, vk): ...
    def key_down_char(self, key_str): ...
    def key_press(self, vk): ...
    def key_press_char(self, key_str): ...
    def key_press_str(self, key_str, delay): ...
    def key_up(self, vk): ...
    def key_up_char(self, key_str): ...
    def left_click(self): ...
    def left_double_click(self): ...
    def left_down(self): ...
    def left_up(self): ...
    def middle_click(self): ...
    def middle_double_click(self): ...
    def middle_down(self): ...
    def middle_up(self): ...
    def move_r(self, rx, ry): ...
    def move_to(self, x, y): ...
    def right_click(self): ...
    def right_down(self): ...
    def right_up(self): ...
    def set_keypad_delay(self, type, delay): ...
    def set_mouse_delay(self, type, delay): ...
    def set_mouse_speed(self, speed): ...
    def set_sim_mode(self, mode): ...
    def wait_key(self, vk, time_out): ...
    def wheel_down(self): ...
    def wheel_up(self): ...
    def append_pic_addr(self, addr): ...
    def bgr_2_rgb(self, bgr_color): ...
    def capture(self, x1, y1, x2, y2, file): ...
    def capture_gif(self, x1, y1, x2, y2, file, delay, time): ...
    def capture_jpg(self, x1, y1, x2, y2, file, quality): ...
    def capture_png(self, x1, y1, x2, y2, file): ...
    def capture_pre(self, file): ...
    def cmp_color(self, x, y, color, sim): ...
    def enable_display_debug(self, enable_debug): ...
    def enable_find_pic_multithread(self, enable): ...
    def enable_get_color_by_capture(self, enable): ...
    def find_color(self, x1, y1, x2, y2, color, sim, direct): ...
    def find_color_block(self, x1, y1, x2, y2, color, sim, count, width, height, direct): ...
    def find_color_block_ex(self, x1, y1, x2, y2, color, sim, count, width, height, direct): ...
    def find_color_ex(self, x1, y1, x2, y2, color, sim, direct): ...
    def find_mul_color(self, x1, y1, x2, y2, color, sim): ...
    def find_multi_color(self, x1, y1, x2, y2, first_color, offset_color, sim, direct): ...
    def find_multi_color_ex(self, x1, y1, x2, y2, first_color, offset_color, sim, direct): ...
    def find_pic(self, x1, y1, x2, y2, pic_name, delta_color, sim, direct): ...
    def find_pic_ex(self, x1, y1, x2, y2, pic_name, delta_color, sim, direct): ...
    def find_pic_ex_s(self, x1, y1, x2, y2, pic_name, delta_color, sim, direct): ...
    def find_pic_mem(self, x1, y1, x2, y2, pic_info, delta_color, sim, direct): ...
    def find_pic_mem_ex(self, x1, y1, x2, y2, pic_info, delta_color, sim, direct): ...
    def find_pic_s(self, x1, y1, x2, y2, pic_name, delta_color, sim, direct): ...
    def find_shape(self, x1, y1, x2, y2, offset_color, sim, direct): ...
    def find_shape_ex(self, x1, y1, x2, y2, offset_color, sim, direct): ...
    def free_pic(self, pic_name): ...
    def get_ave_hsv(self, x1, y1, x2, y2): ...
    def get_ave_rgb(self, x1, y1, x2, y2): ...
    def get_color(self, x, y): ...
    def get_color_bgr(self, x, y): ...
    def get_color_hsv(self, x, y): ...
    def get_color_num(self, x1, y1, x2, y2, color, sim): ...
    def get_pic_size(self, pic_name): ...
    def get_screen_data(self, x1, y1, x2, y2): ...
    def get_screen_data_bmp(self, x1, y1, x2, y2): ...
    def image_to_bmp(self, pic_name, bmp_name): ...
    def is_display_dead(self, x1, y1, x2, y2, t): ...
    def load_pic(self, pic_name): ...
    def load_pic_byte(self, pic_name, data, size): ...
    def match_pic_name(self, pic_name): ...
    def rgb_2_bgr(self, rgb_color): ...
    def set_exclde_region(self, t, x1, y1, x2, y2): ...
    def set_find_pic_multithread_count(self, count): ...
    def set_find_pic_multithread_limit(self, limit): ...
    def set_pic_pwd(self, pwd): ...
    def add_dict(self, index, dict_info): ...
    def clear_dict(self, index): ...
    def enable_share_dict(self, enbale): ...
    def fetch_word(self, x1, y1, x2, y2, color, word): ...
    def find_str(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_e(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_ex(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_ex_s(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_fast(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_fast_s(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_fast_ex(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_fast_e(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_fast_ex_s(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_s(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_with_font(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_with_font_e(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def find_str_with_font_ex(self, x1, y1, x2, y2, string, color_format, sim: float = ...): ...
    def get_dict(self, index): ...
    def get_dict_count(self, index): ...
    def get_dict_info(self, index, font_name, font_size, flag): ...
    def get_now_dict(self): ...
    def get_result_count(self): ...
    def get_result_pos(self, index): ...
    def get_result_str(self, index): ...
    def get_words(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def get_words_no_dict(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def ocr(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def ocr_ex(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def ocr_ex_one(self, x1, y1, x2, y2, color_format, sim: float = ...): ...
    def ocr_in_file(self, x1, y1, x2, y2, pic_name, color_format, sim: float = ...): ...
    def save_dict(self, index, file): ...
    def set_col_gap_no_dict(self, col_gap): ...
    def set_dict(self, index, file): ...
    def set_dict_mem(self, index, addr, size): ...
    def set_dict_pwd(self, pwd): ...
    def set_exact_ocr(self, exact_ocr): ...
    def set_min_col_gap(self, col_gap): ...
    def set_min_row_gap(self, row_gap): ...
    def set_row_gap_no_dict(self, row_gap): ...
    def set_word_gap(self, word_gap): ...
    def set_word_gap_no_dict(self, word_gap): ...
    def set_word_line_height(self, line_height): ...
    def set_word_line_height_no_dict(self, line_height): ...
    def use_dict(self, index): ...
    def __getattr__(self, name, *args, **kwargs): ...

class DataStruct:
    dm: DmObject
    thread: str
    hwnd: str
    def __init__(self) -> None: ...
    def clear(self) -> None: ...

gl_data: DataStruct
td_data: List[DataStruct]

class Thread(threading.Thread):
    handle: str
    daemon: bool
    def __init__(self, target: callable, *args, **kwargs) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...
    def pause(self): ...
    def resume(self): ...
